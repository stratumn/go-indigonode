// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-indigonode/app/coin/protocol/state (interfaces: TxPool)

// Package mockstate is a generated GoMock package.
package mockstate

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/stratumn/go-indigonode/app/coin/pb"
	reflect "reflect"
)

// MockTxPool is a mock of TxPool interface
type MockTxPool struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolMockRecorder
}

// MockTxPoolMockRecorder is the mock recorder for MockTxPool
type MockTxPoolMockRecorder struct {
	mock *MockTxPool
}

// NewMockTxPool creates a new mock instance
func NewMockTxPool(ctrl *gomock.Controller) *MockTxPool {
	mock := &MockTxPool{ctrl: ctrl}
	mock.recorder = &MockTxPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxPool) EXPECT() *MockTxPoolMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method
func (m *MockTxPool) AddTransaction(arg0 *pb.Transaction) error {
	ret := m.ctrl.Call(m, "AddTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction
func (mr *MockTxPoolMockRecorder) AddTransaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockTxPool)(nil).AddTransaction), arg0)
}

// Peek mocks base method
func (m *MockTxPool) Peek(arg0 uint32) []*pb.Transaction {
	ret := m.ctrl.Call(m, "Peek", arg0)
	ret0, _ := ret[0].([]*pb.Transaction)
	return ret0
}

// Peek indicates an expected call of Peek
func (mr *MockTxPoolMockRecorder) Peek(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockTxPool)(nil).Peek), arg0)
}

// Pending mocks base method
func (m *MockTxPool) Pending() uint64 {
	ret := m.ctrl.Call(m, "Pending")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Pending indicates an expected call of Pending
func (mr *MockTxPoolMockRecorder) Pending() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MockTxPool)(nil).Pending))
}

// PopTransaction mocks base method
func (m *MockTxPool) PopTransaction() *pb.Transaction {
	ret := m.ctrl.Call(m, "PopTransaction")
	ret0, _ := ret[0].(*pb.Transaction)
	return ret0
}

// PopTransaction indicates an expected call of PopTransaction
func (mr *MockTxPoolMockRecorder) PopTransaction() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopTransaction", reflect.TypeOf((*MockTxPool)(nil).PopTransaction))
}
