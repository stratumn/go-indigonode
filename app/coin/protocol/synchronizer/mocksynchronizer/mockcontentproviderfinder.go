// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/app/coin/protocol/synchronizer (interfaces: ContentProviderFinder)

// Package mocksynchronizer is a generated GoMock package.
package mocksynchronizer

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	go_cid "gx/ipfs/QmcZfnkapfECQGcLZaf9B79NRg7cRa9EnZh4LSbkCzwNvY/go-cid"
	go_libp2p_peerstore "gx/ipfs/QmdeiKhUy1TVGBaKxt7y1QmBDLBdisSrLJ1x58Eoj4PXUh/go-libp2p-peerstore"
	reflect "reflect"
)

// MockContentProviderFinder is a mock of ContentProviderFinder interface
type MockContentProviderFinder struct {
	ctrl     *gomock.Controller
	recorder *MockContentProviderFinderMockRecorder
}

// MockContentProviderFinderMockRecorder is the mock recorder for MockContentProviderFinder
type MockContentProviderFinderMockRecorder struct {
	mock *MockContentProviderFinder
}

// NewMockContentProviderFinder creates a new mock instance
func NewMockContentProviderFinder(ctrl *gomock.Controller) *MockContentProviderFinder {
	mock := &MockContentProviderFinder{ctrl: ctrl}
	mock.recorder = &MockContentProviderFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContentProviderFinder) EXPECT() *MockContentProviderFinderMockRecorder {
	return m.recorder
}

// FindProviders mocks base method
func (m *MockContentProviderFinder) FindProviders(arg0 context.Context, arg1 *go_cid.Cid) ([]go_libp2p_peerstore.PeerInfo, error) {
	ret := m.ctrl.Call(m, "FindProviders", arg0, arg1)
	ret0, _ := ret[0].([]go_libp2p_peerstore.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProviders indicates an expected call of FindProviders
func (mr *MockContentProviderFinderMockRecorder) FindProviders(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProviders", reflect.TypeOf((*MockContentProviderFinder)(nil).FindProviders), arg0, arg1)
}
