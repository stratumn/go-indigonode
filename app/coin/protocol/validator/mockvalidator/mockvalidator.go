// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-indigonode/app/coin/protocol/validator (interfaces: Validator)

// Package mockvalidator is a generated GoMock package.
package mockvalidator

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/stratumn/go-indigonode/app/coin/pb"
	state "github.com/stratumn/go-indigonode/app/coin/protocol/state"
	reflect "reflect"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// MaxTxPerBlock mocks base method
func (m *MockValidator) MaxTxPerBlock() uint32 {
	ret := m.ctrl.Call(m, "MaxTxPerBlock")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// MaxTxPerBlock indicates an expected call of MaxTxPerBlock
func (mr *MockValidatorMockRecorder) MaxTxPerBlock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTxPerBlock", reflect.TypeOf((*MockValidator)(nil).MaxTxPerBlock))
}

// ValidateBlock mocks base method
func (m *MockValidator) ValidateBlock(arg0 *pb.Block, arg1 state.Reader) error {
	ret := m.ctrl.Call(m, "ValidateBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBlock indicates an expected call of ValidateBlock
func (mr *MockValidatorMockRecorder) ValidateBlock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBlock", reflect.TypeOf((*MockValidator)(nil).ValidateBlock), arg0, arg1)
}

// ValidateTransactions mocks base method
func (m *MockValidator) ValidateTransactions(arg0 []*pb.Transaction, arg1 state.Reader) error {
	ret := m.ctrl.Call(m, "ValidateTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTransactions indicates an expected call of ValidateTransactions
func (mr *MockValidatorMockRecorder) ValidateTransactions(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTransactions", reflect.TypeOf((*MockValidator)(nil).ValidateTransactions), arg0, arg1)
}

// ValidateTx mocks base method
func (m *MockValidator) ValidateTx(arg0 *pb.Transaction, arg1 state.Reader) error {
	ret := m.ctrl.Call(m, "ValidateTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTx indicates an expected call of ValidateTx
func (mr *MockValidatorMockRecorder) ValidateTx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTx", reflect.TypeOf((*MockValidator)(nil).ValidateTx), arg0, arg1)
}
