// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/app/indigo/grpc/fossilizer/fossilizer.proto

/*
	Package fossilizer is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/app/indigo/grpc/fossilizer/fossilizer.proto

	It has these top-level messages:
		InfoReq
		InfoResp
		FossilizeReq
		FossilizeResp
*/
package fossilizer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/cli/grpc/ext"

import context "context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoReq struct {
}

func (m *InfoReq) Reset()                    { *m = InfoReq{} }
func (m *InfoReq) String() string            { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()               {}
func (*InfoReq) Descriptor() ([]byte, []int) { return fileDescriptorFossilizer, []int{0} }

type InfoResp struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *InfoResp) Reset()                    { *m = InfoResp{} }
func (m *InfoResp) String() string            { return proto.CompactTextString(m) }
func (*InfoResp) ProtoMessage()               {}
func (*InfoResp) Descriptor() ([]byte, []int) { return fileDescriptorFossilizer, []int{1} }

func (m *InfoResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FossilizeReq struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Meta []byte `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *FossilizeReq) Reset()                    { *m = FossilizeReq{} }
func (m *FossilizeReq) String() string            { return proto.CompactTextString(m) }
func (*FossilizeReq) ProtoMessage()               {}
func (*FossilizeReq) Descriptor() ([]byte, []int) { return fileDescriptorFossilizer, []int{2} }

func (m *FossilizeReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FossilizeReq) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type FossilizeResp struct {
}

func (m *FossilizeResp) Reset()                    { *m = FossilizeResp{} }
func (m *FossilizeResp) String() string            { return proto.CompactTextString(m) }
func (*FossilizeResp) ProtoMessage()               {}
func (*FossilizeResp) Descriptor() ([]byte, []int) { return fileDescriptorFossilizer, []int{3} }

func init() {
	proto.RegisterType((*InfoReq)(nil), "stratumn.alice.app.indigo.grpc.fossilizer.InfoReq")
	proto.RegisterType((*InfoResp)(nil), "stratumn.alice.app.indigo.grpc.fossilizer.InfoResp")
	proto.RegisterType((*FossilizeReq)(nil), "stratumn.alice.app.indigo.grpc.fossilizer.FossilizeReq")
	proto.RegisterType((*FossilizeResp)(nil), "stratumn.alice.app.indigo.grpc.fossilizer.FossilizeResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IndigoFossilizer service

type IndigoFossilizerClient interface {
	// Get information about the Indigo Fossilizer service.
	GetInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	// Requests data to be fossilized.
	Fossilize(ctx context.Context, in *FossilizeReq, opts ...grpc.CallOption) (*FossilizeResp, error)
}

type indigoFossilizerClient struct {
	cc *grpc.ClientConn
}

func NewIndigoFossilizerClient(cc *grpc.ClientConn) IndigoFossilizerClient {
	return &indigoFossilizerClient{cc}
}

func (c *indigoFossilizerClient) GetInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := grpc.Invoke(ctx, "/stratumn.alice.app.indigo.grpc.fossilizer.IndigoFossilizer/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoFossilizerClient) Fossilize(ctx context.Context, in *FossilizeReq, opts ...grpc.CallOption) (*FossilizeResp, error) {
	out := new(FossilizeResp)
	err := grpc.Invoke(ctx, "/stratumn.alice.app.indigo.grpc.fossilizer.IndigoFossilizer/Fossilize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IndigoFossilizer service

type IndigoFossilizerServer interface {
	// Get information about the Indigo Fossilizer service.
	GetInfo(context.Context, *InfoReq) (*InfoResp, error)
	// Requests data to be fossilized.
	Fossilize(context.Context, *FossilizeReq) (*FossilizeResp, error)
}

func RegisterIndigoFossilizerServer(s *grpc.Server, srv IndigoFossilizerServer) {
	s.RegisterService(&_IndigoFossilizer_serviceDesc, srv)
}

func _IndigoFossilizer_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoFossilizerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.app.indigo.grpc.fossilizer.IndigoFossilizer/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoFossilizerServer).GetInfo(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoFossilizer_Fossilize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FossilizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoFossilizerServer).Fossilize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.app.indigo.grpc.fossilizer.IndigoFossilizer/Fossilize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoFossilizerServer).Fossilize(ctx, req.(*FossilizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndigoFossilizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.app.indigo.grpc.fossilizer.IndigoFossilizer",
	HandlerType: (*IndigoFossilizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _IndigoFossilizer_GetInfo_Handler,
		},
		{
			MethodName: "Fossilize",
			Handler:    _IndigoFossilizer_Fossilize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/stratumn/alice/app/indigo/grpc/fossilizer/fossilizer.proto",
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFossilizer(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *FossilizeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FossilizeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFossilizer(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFossilizer(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	return i, nil
}

func (m *FossilizeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FossilizeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintFossilizer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InfoResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFossilizer(uint64(l))
	}
	return n
}

func (m *FossilizeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFossilizer(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovFossilizer(uint64(l))
	}
	return n
}

func (m *FossilizeResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovFossilizer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFossilizer(x uint64) (n int) {
	return sovFossilizer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFossilizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFossilizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFossilizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFossilizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFossilizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFossilizer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFossilizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFossilizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FossilizeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFossilizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FossilizeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FossilizeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFossilizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFossilizer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFossilizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFossilizer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFossilizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFossilizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FossilizeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFossilizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FossilizeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FossilizeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFossilizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFossilizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFossilizer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFossilizer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFossilizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFossilizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFossilizer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFossilizer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFossilizer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFossilizer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFossilizer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/alice/app/indigo/grpc/fossilizer/fossilizer.proto", fileDescriptorFossilizer)
}

var fileDescriptorFossilizer = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x29, 0xcd, 0xcd, 0xd3,
	0x4f, 0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x4f, 0x2c, 0x28, 0xd0, 0xcf, 0xcc, 0x4b, 0xc9, 0x4c, 0xcf,
	0xd7, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0xcb, 0x2f, 0x2e, 0xce, 0xcc, 0xc9, 0xac, 0x4a, 0x2d,
	0x42, 0x62, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x69, 0xc2, 0xf4, 0xea, 0x81, 0xf5, 0xea,
	0x25, 0x16, 0x14, 0xe8, 0x41, 0xf4, 0xea, 0x81, 0xf4, 0xea, 0x21, 0x34, 0x48, 0xe9, 0xe0, 0xb6,
	0x11, 0x6c, 0x4d, 0x6a, 0x45, 0x09, 0x08, 0x43, 0x0c, 0x56, 0xe2, 0xe4, 0x62, 0xf7, 0xcc, 0x4b,
	0xcb, 0x0f, 0x4a, 0x2d, 0x54, 0x72, 0xe7, 0xe2, 0x80, 0x30, 0x8b, 0x0b, 0x84, 0xac, 0xb9, 0x58,
	0x52, 0x12, 0x4b, 0x12, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x9c, 0xd4, 0x17, 0xed, 0x96, 0x50,
	0xf6, 0x0a, 0xf6, 0xf7, 0xd3, 0x4d, 0xcd, 0x4b, 0xce, 0x4f, 0x49, 0x4d, 0x51, 0x40, 0xd8, 0xa7,
	0x90, 0x99, 0x97, 0x96, 0x5f, 0x94, 0x9b, 0x58, 0x92, 0x99, 0x9f, 0x17, 0x04, 0xd6, 0xa4, 0x54,
	0xcf, 0xc5, 0xe3, 0x06, 0x93, 0x0f, 0x4a, 0x2d, 0x14, 0xd2, 0x44, 0x31, 0x4c, 0x74, 0xd1, 0x6e,
	0x09, 0x41, 0x10, 0x5f, 0xa1, 0x24, 0x1f, 0x61, 0x0e, 0x44, 0xab, 0x90, 0x0b, 0x17, 0x4b, 0x6e,
	0x6a, 0x49, 0xa2, 0x04, 0x13, 0x58, 0xa9, 0xc1, 0xa2, 0xdd, 0x12, 0x3a, 0x20, 0x3e, 0xb2, 0x25,
	0x0a, 0x89, 0x49, 0xf9, 0xa5, 0x25, 0x0a, 0x25, 0x19, 0xa9, 0x0a, 0x58, 0x4c, 0x01, 0xa9, 0x56,
	0xe2, 0xe7, 0xe2, 0x45, 0x72, 0x40, 0x71, 0x81, 0xd1, 0x53, 0x26, 0x2e, 0x01, 0x4f, 0x70, 0x70,
	0xc1, 0xc5, 0x8b, 0x84, 0x56, 0x33, 0x72, 0xb1, 0xbb, 0xa7, 0x96, 0x80, 0xfc, 0x2c, 0x64, 0xa4,
	0x47, 0x74, 0x00, 0xeb, 0x41, 0xc3, 0x4b, 0xca, 0x98, 0x64, 0x3d, 0xc5, 0x05, 0x4a, 0xe6, 0x4d,
	0x5b, 0x25, 0x8c, 0xdd, 0x53, 0x4b, 0x70, 0xf8, 0x08, 0xe2, 0x48, 0x05, 0x84, 0x2b, 0x15, 0x8a,
	0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x16, 0x31, 0x72, 0x71, 0xc2, 0x85, 0x85, 0xcc, 0x49,
	0xb0, 0x1b, 0x39, 0x2e, 0xa4, 0x2c, 0xc8, 0xd3, 0x58, 0x5c, 0xa0, 0xa4, 0xd4, 0xb4, 0x55, 0x42,
	0x2e, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0xa4, 0x18, 0x1e, 0xf4, 0x49, 0xa9, 0x88, 0xd0, 0x4f,
	0x71, 0x0a, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67,
	0x3c, 0x96, 0x63, 0x88, 0xb2, 0x27, 0x27, 0xfd, 0x5b, 0x23, 0x98, 0x49, 0x6c, 0xe0, 0x74, 0x6a,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xd4, 0xb6, 0x7f, 0x49, 0x03, 0x00, 0x00,
}
