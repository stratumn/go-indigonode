// Copyright Â© 2017-2018 Stratumn SAS
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

import "github.com/stratumn/go-indigonode/cli/grpc/ext/ext.proto";
import "github.com/stratumn/go-indigonode/app/indigo/pb/store/segment.proto";

package stratumn.indigonode.app.indigo.store.grpc;

option go_package = "github.com/stratumn/go-indigonode/app/indigo/grpc/store;store";

// The Indigo Store service definition.
service IndigoStore {
    // Get store information.
    rpc GetInfo(InfoReq) returns (InfoResp) {
        option (stratumn.indigonode.cli.ext.method_desc) = "Get information about the Indigo Store service";
    }

    // Create a link.
    rpc CreateLink(stratumn.indigonode.app.indigo.store.Link) returns (stratumn.indigonode.app.indigo.store.LinkHash) {
        option (stratumn.indigonode.cli.ext.method_desc) = "Create a new link";
    }

    // Get a segment.
    rpc GetSegment(stratumn.indigonode.app.indigo.store.LinkHash) returns (stratumn.indigonode.app.indigo.store.Segment) {
        option (stratumn.indigonode.cli.ext.method_desc) = "Get an existing segment from its link hash";
    }

    // Find segments.
    rpc FindSegments(SegmentFilter) returns (stratumn.indigonode.app.indigo.store.Segments) {
        option (stratumn.indigonode.cli.ext.method_desc) = "Find existing segments";
    }

    // Get map IDs.
    rpc GetMapIDs(MapFilter) returns (MapIDs) {
        option (stratumn.indigonode.cli.ext.method_desc) = "Get existing map IDs";
    }

    // Add evidence to a segment.
    rpc AddEvidence(AddEvidenceReq) returns (AddEvidenceResp) {
        option (stratumn.indigonode.cli.ext.method_desc) = "Add evidence to a segment";
    }

    // Get segment evidences.
    rpc GetEvidences(stratumn.indigonode.app.indigo.store.LinkHash) returns (stratumn.indigonode.app.indigo.store.Evidences) {
        option (stratumn.indigonode.cli.ext.method_desc) = "Get segment evidences";
    }
}

message InfoReq {
}

message InfoResp {
    bytes data = 1 [
        (stratumn.indigonode.cli.ext.field_desc) = "JSON-encoded store information"
    ];
}

message SegmentFilter {
    bytes data = 1 [
        (stratumn.indigonode.cli.ext.field_desc) = "JSON-encoded segment filter bytes"
    ];
}

message MapIDs {
    repeated string map_ids = 1 [
        (stratumn.indigonode.cli.ext.field_desc) = "Map IDs"
    ];
}

message MapFilter {
    bytes data = 1 [
        (stratumn.indigonode.cli.ext.field_desc) = "JSON-encoded map filter bytes"
    ];
}

message AddEvidenceReq {
    stratumn.indigonode.app.indigo.store.LinkHash link_hash = 1 [
        (stratumn.indigonode.cli.ext.field_desc) = "32-bytes link hash"
    ];
    stratumn.indigonode.app.indigo.store.Evidence evidence = 2 [
        (stratumn.indigonode.cli.ext.field_desc) = "JSON-encoded evidence bytes"
    ];
}

message AddEvidenceResp {
}
