// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/app/indigo/protocol/store/sync (interfaces: Engine)

// Package mocksync is a generated GoMock package.
package mocksync

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cs "github.com/stratumn/go-indigocore/cs"
	store "github.com/stratumn/go-indigocore/store"
	reflect "reflect"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockEngine) Close(arg0 context.Context) {
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close
func (mr *MockEngineMockRecorder) Close(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEngine)(nil).Close), arg0)
}

// GetMissingLinks mocks base method
func (m *MockEngine) GetMissingLinks(arg0 context.Context, arg1 *cs.Link, arg2 store.SegmentReader) ([]*cs.Link, error) {
	ret := m.ctrl.Call(m, "GetMissingLinks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*cs.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMissingLinks indicates an expected call of GetMissingLinks
func (mr *MockEngineMockRecorder) GetMissingLinks(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissingLinks", reflect.TypeOf((*MockEngine)(nil).GetMissingLinks), arg0, arg1, arg2)
}
