// Copyright Â© 2017-2018 Stratumn SAS
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

import "github.com/stratumn/go-indigonode/cli/grpc/ext/ext.proto";

package stratumn.indigonode.app.raft.grpc;

option go_package = "github.com/stratumn/go-indigonode/app/raft/grpc;grpc";

// The clock service definition.
service Raft {
  rpc Start (Empty) returns (Empty) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Start single node raft server";
  }
  rpc Stop (Empty) returns (Empty) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Stop the server and remove the data";
  }
  rpc Status (Empty) returns (StatusInfo) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Get server status";
  }
  rpc Peers (Empty) returns (stream Peer) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Get cluster peers";
  }
  rpc Discover (PeerID) returns (stream Peer) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Discover Raft cluster";
  }
  rpc Invite (PeerID) returns (Empty) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Add a node to the cluster";
  }
  rpc Join (PeerID) returns (Empty) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Join exisiting cluster";
  }
  rpc Expel (PeerID) returns (Empty) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Remove peer from the cluster";
  }
  rpc Propose (Proposal) returns (Empty) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Put data";
  }
  rpc Log (Empty) returns (stream Entry) {
    option (stratumn.indigonode.cli.ext.method_desc) = "Get log of entries";
  }

}

message Empty {
}

message Peer {
  uint64 id = 1 [(stratumn.indigonode.cli.ext.field_desc) = "Raft ID"];
  bytes address = 2 [
    (stratumn.indigonode.cli.ext.field_desc) = "Peer ID",
    (stratumn.indigonode.cli.ext.field_base58) = true
  ];
}

message PeerID {
  bytes address = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Peer ID",
    (stratumn.indigonode.cli.ext.field_required) = true,
    (stratumn.indigonode.cli.ext.field_base58) = true
  ];
}

message StatusInfo {
  bool running = 1 [(stratumn.indigonode.cli.ext.field_desc) = "Running"];
  uint64 id = 2 [(stratumn.indigonode.cli.ext.field_desc) = "Raft ID"];
}

message Proposal {
  bytes data = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Data",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
}

message Entry {
  uint64 index = 1 [(stratumn.indigonode.cli.ext.field_desc) = "Index"];
  bytes data = 2 [(stratumn.indigonode.cli.ext.field_desc) = "Data"];
}
