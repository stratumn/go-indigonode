// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/app/raft/protocol/lib (interfaces: ConfChange)

// Package mocklib is a generated GoMock package.
package mocklib

import (
	gomock "github.com/golang/mock/gomock"
	lib "github.com/stratumn/alice/app/raft/protocol/lib"
	reflect "reflect"
)

// MockConfChange is a mock of ConfChange interface
type MockConfChange struct {
	ctrl     *gomock.Controller
	recorder *MockConfChangeMockRecorder
}

// MockConfChangeMockRecorder is the mock recorder for MockConfChange
type MockConfChangeMockRecorder struct {
	mock *MockConfChange
}

// NewMockConfChange creates a new mock instance
func NewMockConfChange(ctrl *gomock.Controller) *MockConfChange {
	mock := &MockConfChange{ctrl: ctrl}
	mock.recorder = &MockConfChangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfChange) EXPECT() *MockConfChangeMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockConfChange) Context() []byte {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConfChangeMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfChange)(nil).Context))
}

// ID mocks base method
func (m *MockConfChange) ID() uint64 {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockConfChangeMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockConfChange)(nil).ID))
}

// NodeID mocks base method
func (m *MockConfChange) NodeID() uint64 {
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// NodeID indicates an expected call of NodeID
func (mr *MockConfChangeMockRecorder) NodeID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockConfChange)(nil).NodeID))
}

// Type mocks base method
func (m *MockConfChange) Type() lib.ConfChangeType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(lib.ConfChangeType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockConfChangeMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockConfChange)(nil).Type))
}

// Unmarshal mocks base method
func (m *MockConfChange) Unmarshal(arg0 []byte) error {
	ret := m.ctrl.Call(m, "Unmarshal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockConfChangeMockRecorder) Unmarshal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockConfChange)(nil).Unmarshal), arg0)
}
