// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/app/raft/protocol/lib (interfaces: ConfState)

// Package mocklib is a generated GoMock package.
package mocklib

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfState is a mock of ConfState interface
type MockConfState struct {
	ctrl     *gomock.Controller
	recorder *MockConfStateMockRecorder
}

// MockConfStateMockRecorder is the mock recorder for MockConfState
type MockConfStateMockRecorder struct {
	mock *MockConfState
}

// NewMockConfState creates a new mock instance
func NewMockConfState(ctrl *gomock.Controller) *MockConfState {
	mock := &MockConfState{ctrl: ctrl}
	mock.recorder = &MockConfStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfState) EXPECT() *MockConfStateMockRecorder {
	return m.recorder
}

// Learners mocks base method
func (m *MockConfState) Learners() []uint64 {
	ret := m.ctrl.Call(m, "Learners")
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// Learners indicates an expected call of Learners
func (mr *MockConfStateMockRecorder) Learners() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Learners", reflect.TypeOf((*MockConfState)(nil).Learners))
}

// Nodes mocks base method
func (m *MockConfState) Nodes() []uint64 {
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// Nodes indicates an expected call of Nodes
func (mr *MockConfStateMockRecorder) Nodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockConfState)(nil).Nodes))
}
