// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/app/raft/protocol/lib (interfaces: Node)

// Package mocklib is a generated GoMock package.
package mocklib

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lib "github.com/stratumn/alice/app/raft/protocol/lib"
	reflect "reflect"
)

// MockNode is a mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Advance mocks base method
func (m *MockNode) Advance() {
	m.ctrl.Call(m, "Advance")
}

// Advance indicates an expected call of Advance
func (mr *MockNodeMockRecorder) Advance() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advance", reflect.TypeOf((*MockNode)(nil).Advance))
}

// ApplyConfChange mocks base method
func (m *MockNode) ApplyConfChange(arg0 lib.ConfChange) {
	m.ctrl.Call(m, "ApplyConfChange", arg0)
}

// ApplyConfChange indicates an expected call of ApplyConfChange
func (mr *MockNodeMockRecorder) ApplyConfChange(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfChange", reflect.TypeOf((*MockNode)(nil).ApplyConfChange), arg0)
}

// Propose mocks base method
func (m *MockNode) Propose(arg0 context.Context, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Propose", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Propose indicates an expected call of Propose
func (mr *MockNodeMockRecorder) Propose(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockNode)(nil).Propose), arg0, arg1)
}

// ProposeConfChange mocks base method
func (m *MockNode) ProposeConfChange(arg0 context.Context, arg1 lib.ConfChange) error {
	ret := m.ctrl.Call(m, "ProposeConfChange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposeConfChange indicates an expected call of ProposeConfChange
func (mr *MockNodeMockRecorder) ProposeConfChange(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeConfChange", reflect.TypeOf((*MockNode)(nil).ProposeConfChange), arg0, arg1)
}

// Ready mocks base method
func (m *MockNode) Ready() <-chan lib.Ready {
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(<-chan lib.Ready)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockNodeMockRecorder) Ready() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockNode)(nil).Ready))
}

// Step mocks base method
func (m *MockNode) Step(arg0 context.Context, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Step", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Step indicates an expected call of Step
func (mr *MockNodeMockRecorder) Step(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockNode)(nil).Step), arg0, arg1)
}

// Stop mocks base method
func (m *MockNode) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// Tick mocks base method
func (m *MockNode) Tick() {
	m.ctrl.Call(m, "Tick")
}

// Tick indicates an expected call of Tick
func (mr *MockNodeMockRecorder) Tick() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockNode)(nil).Tick))
}
