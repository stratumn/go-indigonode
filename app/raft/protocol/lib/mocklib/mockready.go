// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-indigonode/app/raft/protocol/lib (interfaces: Ready)

// Package mocklib is a generated GoMock package.
package mocklib

import (
	gomock "github.com/golang/mock/gomock"
	lib "github.com/stratumn/go-indigonode/app/raft/protocol/lib"
	reflect "reflect"
)

// MockReady is a mock of Ready interface
type MockReady struct {
	ctrl     *gomock.Controller
	recorder *MockReadyMockRecorder
}

// MockReadyMockRecorder is the mock recorder for MockReady
type MockReadyMockRecorder struct {
	mock *MockReady
}

// NewMockReady creates a new mock instance
func NewMockReady(ctrl *gomock.Controller) *MockReady {
	mock := &MockReady{ctrl: ctrl}
	mock.recorder = &MockReadyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReady) EXPECT() *MockReadyMockRecorder {
	return m.recorder
}

// CommittedEntries mocks base method
func (m *MockReady) CommittedEntries() []lib.Entry {
	ret := m.ctrl.Call(m, "CommittedEntries")
	ret0, _ := ret[0].([]lib.Entry)
	return ret0
}

// CommittedEntries indicates an expected call of CommittedEntries
func (mr *MockReadyMockRecorder) CommittedEntries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedEntries", reflect.TypeOf((*MockReady)(nil).CommittedEntries))
}

// Entries mocks base method
func (m *MockReady) Entries() []lib.Entry {
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].([]lib.Entry)
	return ret0
}

// Entries indicates an expected call of Entries
func (mr *MockReadyMockRecorder) Entries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockReady)(nil).Entries))
}

// Messages mocks base method
func (m *MockReady) Messages() []lib.Message {
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].([]lib.Message)
	return ret0
}

// Messages indicates an expected call of Messages
func (mr *MockReadyMockRecorder) Messages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockReady)(nil).Messages))
}
