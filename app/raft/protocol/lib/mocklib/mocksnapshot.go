// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-node/app/raft/protocol/lib (interfaces: Snapshot)

// Package mocklib is a generated GoMock package.
package mocklib

import (
	gomock "github.com/golang/mock/gomock"
	lib "github.com/stratumn/go-node/app/raft/protocol/lib"
	reflect "reflect"
)

// MockSnapshot is a mock of Snapshot interface
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// Data mocks base method
func (m *MockSnapshot) Data() []byte {
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data
func (mr *MockSnapshotMockRecorder) Data() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockSnapshot)(nil).Data))
}

// Metadata mocks base method
func (m *MockSnapshot) Metadata() lib.SnapshotMetadata {
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(lib.SnapshotMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata
func (mr *MockSnapshotMockRecorder) Metadata() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockSnapshot)(nil).Metadata))
}
