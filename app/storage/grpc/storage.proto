// Copyright Â© 2017-2018 Stratumn SAS
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

import "github.com/stratumn/go-indigonode/cli/grpc/ext/ext.proto";
import "github.com/stratumn/go-indigonode/app/storage/pb/storage.proto";

package stratumn.indigonode.app.storage.grpc;

option go_package = "github.com/stratumn/go-indigonode/app/storage/grpc;grpc";

// The storage service definition.
service Storage {
  
  // Upload a file to the Indigo node.
  rpc Upload (stream stratumn.indigonode.app.storage.FileChunk) returns (UploadAck) {}

  // Sends a request to the server to start a new upload.
  rpc StartUpload(UploadReq) returns (UploadSession) {}

  // Upload a single chunk of a file to the server.
  rpc UploadChunk(SessionFileChunk) returns (Ack) {}

  // Notifies the server that the session's file has been entirely sent.
  rpc EndUpload(UploadSession) returns (UploadAck) {}
  
  // Give peers access to a file.
  rpc AuthorizePeers (AuthRequest) returns (Ack) {}

  // Download downloads a file from a peer.
  rpc Download (DownloadRequest) returns (stream stratumn.indigonode.app.storage.FileChunk) {}
}

message SessionFileChunk {
  // file name is required only on first message.
  bytes id = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Id of the upload session",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
  bytes data = 2 [
    (stratumn.indigonode.cli.ext.field_desc) = "Bytes of one file chunk",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
}

message UploadReq {
  string file_name = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Name of the file",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
}

message UploadSession {
  bytes id = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Id of the upload session",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
}

message AuthRequest {
  repeated bytes peer_ids = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Peer IDs",
    (stratumn.indigonode.cli.ext.field_required) = true,
    (stratumn.indigonode.cli.ext.field_base58) = true
  ];
  bytes file_hash = 2 [
    (stratumn.indigonode.cli.ext.field_desc) = "Hash of the file",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
}

message DownloadRequest {
  bytes peer_id = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Peer ID",
    (stratumn.indigonode.cli.ext.field_required) = true,
    (stratumn.indigonode.cli.ext.field_base58) = true
  ];
  bytes file_hash = 2 [
    (stratumn.indigonode.cli.ext.field_desc) = "Hash of the file",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
}

// An empty ack.
message Ack {
}

message UploadAck {
  bytes file_hash = 1 [
    (stratumn.indigonode.cli.ext.field_desc) = "Hash of the file that was uploaded",
    (stratumn.indigonode.cli.ext.field_required) = true
  ];
}
