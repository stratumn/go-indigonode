// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/cli (interfaces: ServerStreamStub)

package mockcli

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cli "github.com/stratumn/alice/cli"
	reflect "reflect"
)

// MockServerStreamStub is a mock of ServerStreamStub interface
type MockServerStreamStub struct {
	ctrl     *gomock.Controller
	recorder *MockServerStreamStubMockRecorder
}

// MockServerStreamStubMockRecorder is the mock recorder for MockServerStreamStub
type MockServerStreamStubMockRecorder struct {
	mock *MockServerStreamStub
}

// NewMockServerStreamStub creates a new mock instance
func NewMockServerStreamStub(ctrl *gomock.Controller) *MockServerStreamStub {
	mock := &MockServerStreamStub{ctrl: ctrl}
	mock.recorder = &MockServerStreamStubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServerStreamStub) EXPECT() *MockServerStreamStubMockRecorder {
	return _m.recorder
}

// Invoke mocks base method
func (_m *MockServerStreamStub) Invoke(_param0 context.Context) (cli.ServerStream, error) {
	ret := _m.ctrl.Call(_m, "Invoke", _param0)
	ret0, _ := ret[0].(cli.ServerStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke
func (_mr *MockServerStreamStubMockRecorder) Invoke(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Invoke", reflect.TypeOf((*MockServerStreamStub)(nil).Invoke), arg0)
}

// Name mocks base method
func (_m *MockServerStreamStub) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockServerStreamStubMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockServerStreamStub)(nil).Name))
}
