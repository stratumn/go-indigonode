// Copyright Â© 2017-2018 Stratumn SAS
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

import "github.com/stratumn/go-node/cli/grpc/ext/ext.proto";
import "github.com/stratumn/go-node/core/app/bootstrap/pb/bootstrap.proto";

package stratumn.node.core.app.bootstrap.grpc;

option go_package = "github.com/stratumn/go-node/core/app/bootstrap/grpc;grpc";

// The bootstrap service definition.
service Bootstrap {
  // Propose adding a node to the network.
  rpc AddNode (stratumn.node.core.app.bootstrap.NodeIdentity) returns (stratumn.node.core.app.bootstrap.Ack) {
    option (stratumn.node.cli.ext.method_desc) = "Propose adding a node to the network";
  }

  // Propose removing a node from the network.
  rpc RemoveNode (stratumn.node.core.app.bootstrap.NodeIdentity) returns (stratumn.node.core.app.bootstrap.Ack) {
    option (stratumn.node.cli.ext.method_desc) = "Propose removing a node from the network";
  }

  // Accept a proposal to add or remove a network node.
  rpc Accept (stratumn.node.core.app.bootstrap.PeerID) returns (stratumn.node.core.app.bootstrap.Ack) {
    option (stratumn.node.cli.ext.method_desc) = "Accept a proposal to add or remove a network node";
  }

  // Reject a proposal to add or remove a network node.
  rpc Reject (stratumn.node.core.app.bootstrap.PeerID) returns (stratumn.node.core.app.bootstrap.Ack) {
    option (stratumn.node.cli.ext.method_desc) = "Reject a proposal to add or remove a network node";
  }

  // List pending proposals to add or remove a network node.
  rpc List (stratumn.node.core.app.bootstrap.Filter) returns (stream stratumn.node.core.app.bootstrap.UpdateProposal) {
    option (stratumn.node.cli.ext.method_desc) = "List pending proposals to add or remove a network node";
  }

  // Complete the network bootstrap phase.
  rpc Complete (stratumn.node.core.app.bootstrap.CompleteReq) returns (stratumn.node.core.app.bootstrap.Ack) {
    option (stratumn.node.cli.ext.method_desc) = "Complete the network bootstrap phase";
  }
}