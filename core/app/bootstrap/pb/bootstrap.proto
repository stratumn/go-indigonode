// Copyright Â© 2017-2018 Stratumn SAS
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

import "github.com/stratumn/go-indigonode/cli/grpc/ext/ext.proto";
import "github.com/stratumn/go-indigonode/core/crypto/crypto.proto";

package stratumn.indigonode.core.app.bootstrap;

option go_package = "github.com/stratumn/go-indigonode/core/app/bootstrap/pb;pb";

// A simple Hello handshake message.
message Hello {}

// A message ack.
message Ack {
    string error = 1;
}

// A request to complete the bootstrap phase.
message CompleteReq {}

// A results filter.
message Filter {}

// A base58-encoded PeerId.
message PeerID {
    bytes peer_id = 1 [
        (stratumn.indigonode.cli.ext.field_desc) = "Peer ID",
        (stratumn.indigonode.cli.ext.field_required) = true,
        (stratumn.indigonode.cli.ext.field_base58) = true
    ];
}

// A message containing a proof of a node's identity.
message NodeIdentity {
    bytes peer_id = 1 [
        (stratumn.indigonode.cli.ext.field_desc) = "Peer ID",
        (stratumn.indigonode.cli.ext.field_required) = true,
        (stratumn.indigonode.cli.ext.field_base58) = true
    ];
    bytes peer_addr = 2 [
        (stratumn.indigonode.cli.ext.field_desc) = "Peer Address"
    ];
    bytes identity_proof = 3 [
        (stratumn.indigonode.cli.ext.field_desc) = "KYC data (TBD)"
    ];
}

// Type of network updates that can be proposed.
enum UpdateType {
    None = 0;
    AddNode = 1;
    RemoveNode = 2;
}

// Proposal to update the network.
message UpdateProposal {
    UpdateType update_type = 1;
    NodeIdentity node_details = 2;
    bytes challenge = 3;
}

message Vote {
    UpdateType update_type = 1;
    bytes peer_id = 2;
    bytes challenge = 3;
    stratumn.indigonode.core.crypto.Signature signature = 4;
}