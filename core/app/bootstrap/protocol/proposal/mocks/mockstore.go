// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-indigonode/core/app/bootstrap/protocol/proposal (interfaces: Store)

// Package mockproposal is a generated GoMock package.
package mockproposal

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proposal "github.com/stratumn/go-indigonode/core/app/bootstrap/protocol/proposal"
	go_libp2p_peer "gx/ipfs/QmQsErDt8Qgw1XrsXf2BpEzDgGWtB1YLsTAARBup5b6B9W/go-libp2p-peer"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddRequest mocks base method
func (m *MockStore) AddRequest(arg0 context.Context, arg1 *proposal.Request) error {
	ret := m.ctrl.Call(m, "AddRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRequest indicates an expected call of AddRequest
func (mr *MockStoreMockRecorder) AddRequest(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequest", reflect.TypeOf((*MockStore)(nil).AddRequest), arg0, arg1)
}

// AddVote mocks base method
func (m *MockStore) AddVote(arg0 context.Context, arg1 *proposal.Vote) error {
	ret := m.ctrl.Call(m, "AddVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVote indicates an expected call of AddVote
func (mr *MockStoreMockRecorder) AddVote(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVote", reflect.TypeOf((*MockStore)(nil).AddVote), arg0, arg1)
}

// Get mocks base method
func (m *MockStore) Get(arg0 context.Context, arg1 go_libp2p_peer.ID) (*proposal.Request, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*proposal.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0, arg1)
}

// GetVotes mocks base method
func (m *MockStore) GetVotes(arg0 context.Context, arg1 go_libp2p_peer.ID) ([]*proposal.Vote, error) {
	ret := m.ctrl.Call(m, "GetVotes", arg0, arg1)
	ret0, _ := ret[0].([]*proposal.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotes indicates an expected call of GetVotes
func (mr *MockStoreMockRecorder) GetVotes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotes", reflect.TypeOf((*MockStore)(nil).GetVotes), arg0, arg1)
}

// List mocks base method
func (m *MockStore) List(arg0 context.Context) ([]*proposal.Request, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*proposal.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoreMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), arg0)
}

// Remove mocks base method
func (m *MockStore) Remove(arg0 context.Context, arg1 go_libp2p_peer.ID) error {
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockStoreMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStore)(nil).Remove), arg0, arg1)
}
