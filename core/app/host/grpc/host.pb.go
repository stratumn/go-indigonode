// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/go-node/core/app/host/grpc/host.proto

package grpc // import "github.com/stratumn/go-node/core/app/host/grpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/go-node/cli/grpc/ext"

import context "context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The ID request message.
type IdReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdReq) Reset()         { *m = IdReq{} }
func (m *IdReq) String() string { return proto.CompactTextString(m) }
func (*IdReq) ProtoMessage()    {}
func (*IdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{0}
}
func (m *IdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdReq.Merge(dst, src)
}
func (m *IdReq) XXX_Size() int {
	return m.Size()
}
func (m *IdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IdReq.DiscardUnknown(m)
}

var xxx_messageInfo_IdReq proto.InternalMessageInfo

// The address request message.
type AddressesReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressesReq) Reset()         { *m = AddressesReq{} }
func (m *AddressesReq) String() string { return proto.CompactTextString(m) }
func (*AddressesReq) ProtoMessage()    {}
func (*AddressesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{1}
}
func (m *AddressesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddressesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressesReq.Merge(dst, src)
}
func (m *AddressesReq) XXX_Size() int {
	return m.Size()
}
func (m *AddressesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressesReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddressesReq proto.InternalMessageInfo

// The peer addresses request message.
type PeerAddressesReq struct {
	PeerId               []byte   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerAddressesReq) Reset()         { *m = PeerAddressesReq{} }
func (m *PeerAddressesReq) String() string { return proto.CompactTextString(m) }
func (*PeerAddressesReq) ProtoMessage()    {}
func (*PeerAddressesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{2}
}
func (m *PeerAddressesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerAddressesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerAddressesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PeerAddressesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerAddressesReq.Merge(dst, src)
}
func (m *PeerAddressesReq) XXX_Size() int {
	return m.Size()
}
func (m *PeerAddressesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerAddressesReq.DiscardUnknown(m)
}

var xxx_messageInfo_PeerAddressesReq proto.InternalMessageInfo

func (m *PeerAddressesReq) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

// The add peer address request message.
type AddPeerAddressReq struct {
	PeerId               []byte   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPeerAddressReq) Reset()         { *m = AddPeerAddressReq{} }
func (m *AddPeerAddressReq) String() string { return proto.CompactTextString(m) }
func (*AddPeerAddressReq) ProtoMessage()    {}
func (*AddPeerAddressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{3}
}
func (m *AddPeerAddressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPeerAddressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPeerAddressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddPeerAddressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPeerAddressReq.Merge(dst, src)
}
func (m *AddPeerAddressReq) XXX_Size() int {
	return m.Size()
}
func (m *AddPeerAddressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPeerAddressReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddPeerAddressReq proto.InternalMessageInfo

func (m *AddPeerAddressReq) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *AddPeerAddressReq) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// The connect request message.
type ConnectReq struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectReq) Reset()         { *m = ConnectReq{} }
func (m *ConnectReq) String() string { return proto.CompactTextString(m) }
func (*ConnectReq) ProtoMessage()    {}
func (*ConnectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{4}
}
func (m *ConnectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConnectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectReq.Merge(dst, src)
}
func (m *ConnectReq) XXX_Size() int {
	return m.Size()
}
func (m *ConnectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectReq proto.InternalMessageInfo

func (m *ConnectReq) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// The peer ID message containing the ID of a peer.
type PeerId struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerId) Reset()         { *m = PeerId{} }
func (m *PeerId) String() string { return proto.CompactTextString(m) }
func (*PeerId) ProtoMessage()    {}
func (*PeerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{5}
}
func (m *PeerId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PeerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerId.Merge(dst, src)
}
func (m *PeerId) XXX_Size() int {
	return m.Size()
}
func (m *PeerId) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerId.DiscardUnknown(m)
}

var xxx_messageInfo_PeerId proto.InternalMessageInfo

func (m *PeerId) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// The address message containing a multiaddress.
type Address struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{6}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(dst, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// The connection message containing the peer ID and addresses.
type Connection struct {
	PeerId               []byte   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	LocalAddress         []byte   `protobuf:"bytes,2,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	RemoteAddress        []byte   `protobuf:"bytes,3,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_host_c6200bd5105cbeea, []int{7}
}
func (m *Connection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(dst, src)
}
func (m *Connection) XXX_Size() int {
	return m.Size()
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *Connection) GetLocalAddress() []byte {
	if m != nil {
		return m.LocalAddress
	}
	return nil
}

func (m *Connection) GetRemoteAddress() []byte {
	if m != nil {
		return m.RemoteAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*IdReq)(nil), "stratumn.node.core.app.host.grpc.IdReq")
	proto.RegisterType((*AddressesReq)(nil), "stratumn.node.core.app.host.grpc.AddressesReq")
	proto.RegisterType((*PeerAddressesReq)(nil), "stratumn.node.core.app.host.grpc.PeerAddressesReq")
	proto.RegisterType((*AddPeerAddressReq)(nil), "stratumn.node.core.app.host.grpc.AddPeerAddressReq")
	proto.RegisterType((*ConnectReq)(nil), "stratumn.node.core.app.host.grpc.ConnectReq")
	proto.RegisterType((*PeerId)(nil), "stratumn.node.core.app.host.grpc.PeerId")
	proto.RegisterType((*Address)(nil), "stratumn.node.core.app.host.grpc.Address")
	proto.RegisterType((*Connection)(nil), "stratumn.node.core.app.host.grpc.Connection")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Host service

type HostClient interface {
	// Returns the host ID.
	ID(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PeerId, error)
	// Streams the host addresses.
	Addresses(ctx context.Context, in *AddressesReq, opts ...grpc.CallOption) (Host_AddressesClient, error)
	// Streams a peer's known addresses.
	PeerAddresses(ctx context.Context, in *PeerAddressesReq, opts ...grpc.CallOption) (Host_PeerAddressesClient, error)
	// Clears a peer's known addresses.
	ClearPeerAddresses(ctx context.Context, in *PeerAddressesReq, opts ...grpc.CallOption) (Host_ClearPeerAddressesClient, error)
	// Add a new peer address to the node's Peer Store.
	AddPeerAddress(ctx context.Context, in *AddPeerAddressReq, opts ...grpc.CallOption) (*PeerId, error)
	// Connects to a multiaddress.
	Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (Host_ConnectClient, error)
}

type hostClient struct {
	cc *grpc.ClientConn
}

func NewHostClient(cc *grpc.ClientConn) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) ID(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*PeerId, error) {
	out := new(PeerId)
	err := c.cc.Invoke(ctx, "/stratumn.node.core.app.host.grpc.Host/ID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) Addresses(ctx context.Context, in *AddressesReq, opts ...grpc.CallOption) (Host_AddressesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[0], "/stratumn.node.core.app.host.grpc.Host/Addresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_AddressesClient interface {
	Recv() (*Address, error)
	grpc.ClientStream
}

type hostAddressesClient struct {
	grpc.ClientStream
}

func (x *hostAddressesClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) PeerAddresses(ctx context.Context, in *PeerAddressesReq, opts ...grpc.CallOption) (Host_PeerAddressesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[1], "/stratumn.node.core.app.host.grpc.Host/PeerAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostPeerAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_PeerAddressesClient interface {
	Recv() (*Address, error)
	grpc.ClientStream
}

type hostPeerAddressesClient struct {
	grpc.ClientStream
}

func (x *hostPeerAddressesClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) ClearPeerAddresses(ctx context.Context, in *PeerAddressesReq, opts ...grpc.CallOption) (Host_ClearPeerAddressesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[2], "/stratumn.node.core.app.host.grpc.Host/ClearPeerAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostClearPeerAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ClearPeerAddressesClient interface {
	Recv() (*Address, error)
	grpc.ClientStream
}

type hostClearPeerAddressesClient struct {
	grpc.ClientStream
}

func (x *hostClearPeerAddressesClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) AddPeerAddress(ctx context.Context, in *AddPeerAddressReq, opts ...grpc.CallOption) (*PeerId, error) {
	out := new(PeerId)
	err := c.cc.Invoke(ctx, "/stratumn.node.core.app.host.grpc.Host/AddPeerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (Host_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[3], "/stratumn.node.core.app.host.grpc.Host/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_ConnectClient interface {
	Recv() (*Connection, error)
	grpc.ClientStream
}

type hostConnectClient struct {
	grpc.ClientStream
}

func (x *hostConnectClient) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Host service

type HostServer interface {
	// Returns the host ID.
	ID(context.Context, *IdReq) (*PeerId, error)
	// Streams the host addresses.
	Addresses(*AddressesReq, Host_AddressesServer) error
	// Streams a peer's known addresses.
	PeerAddresses(*PeerAddressesReq, Host_PeerAddressesServer) error
	// Clears a peer's known addresses.
	ClearPeerAddresses(*PeerAddressesReq, Host_ClearPeerAddressesServer) error
	// Add a new peer address to the node's Peer Store.
	AddPeerAddress(context.Context, *AddPeerAddressReq) (*PeerId, error)
	// Connects to a multiaddress.
	Connect(*ConnectReq, Host_ConnectServer) error
}

func RegisterHostServer(s *grpc.Server, srv HostServer) {
	s.RegisterService(&_Host_serviceDesc, srv)
}

func _Host_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.node.core.app.host.grpc.Host/ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).ID(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_Addresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddressesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).Addresses(m, &hostAddressesServer{stream})
}

type Host_AddressesServer interface {
	Send(*Address) error
	grpc.ServerStream
}

type hostAddressesServer struct {
	grpc.ServerStream
}

func (x *hostAddressesServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_PeerAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PeerAddressesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).PeerAddresses(m, &hostPeerAddressesServer{stream})
}

type Host_PeerAddressesServer interface {
	Send(*Address) error
	grpc.ServerStream
}

type hostPeerAddressesServer struct {
	grpc.ServerStream
}

func (x *hostPeerAddressesServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_ClearPeerAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PeerAddressesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).ClearPeerAddresses(m, &hostClearPeerAddressesServer{stream})
}

type Host_ClearPeerAddressesServer interface {
	Send(*Address) error
	grpc.ServerStream
}

type hostClearPeerAddressesServer struct {
	grpc.ServerStream
}

func (x *hostClearPeerAddressesServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_AddPeerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).AddPeerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.node.core.app.host.grpc.Host/AddPeerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).AddPeerAddress(ctx, req.(*AddPeerAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).Connect(m, &hostConnectServer{stream})
}

type Host_ConnectServer interface {
	Send(*Connection) error
	grpc.ServerStream
}

type hostConnectServer struct {
	grpc.ServerStream
}

func (x *hostConnectServer) Send(m *Connection) error {
	return x.ServerStream.SendMsg(m)
}

var _Host_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.node.core.app.host.grpc.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _Host_ID_Handler,
		},
		{
			MethodName: "AddPeerAddress",
			Handler:    _Host_AddPeerAddress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Addresses",
			Handler:       _Host_Addresses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PeerAddresses",
			Handler:       _Host_PeerAddresses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClearPeerAddresses",
			Handler:       _Host_ClearPeerAddresses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Connect",
			Handler:       _Host_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/go-node/core/app/host/grpc/host.proto",
}

func (m *IdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddressesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PeerAddressesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerAddressesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.PeerId)))
		i += copy(dAtA[i:], m.PeerId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddPeerAddressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPeerAddressReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.PeerId)))
		i += copy(dAtA[i:], m.PeerId)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConnectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PeerId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Connection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Connection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.PeerId)))
		i += copy(dAtA[i:], m.PeerId)
	}
	if len(m.LocalAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.LocalAddress)))
		i += copy(dAtA[i:], m.LocalAddress)
	}
	if len(m.RemoteAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHost(dAtA, i, uint64(len(m.RemoteAddress)))
		i += copy(dAtA[i:], m.RemoteAddress)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintHost(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IdReq) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddressesReq) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerAddressesReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPeerAddressReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerId) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Connection) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	l = len(m.LocalAddress)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	l = len(m.RemoteAddress)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHost(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHost(x uint64) (n int) {
	return sovHost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerAddressesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerAddressesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerAddressesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = append(m.PeerId[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerId == nil {
				m.PeerId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPeerAddressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPeerAddressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPeerAddressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = append(m.PeerId[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerId == nil {
				m.PeerId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Connection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Connection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Connection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = append(m.PeerId[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerId == nil {
				m.PeerId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAddress = append(m.LocalAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.LocalAddress == nil {
				m.LocalAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddress = append(m.RemoteAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteAddress == nil {
				m.RemoteAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHost
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHost
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHost(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHost = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHost   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/go-node/core/app/host/grpc/host.proto", fileDescriptor_host_c6200bd5105cbeea)
}

var fileDescriptor_host_c6200bd5105cbeea = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xc7, 0x7f, 0x97, 0x5f, 0x48, 0xc4, 0x29, 0xad, 0xe8, 0xf1, 0xef, 0x88, 0x54, 0x73, 0x58,
	0x48, 0x6d, 0x54, 0x6a, 0x57, 0xe9, 0x80, 0x10, 0x0b, 0x6d, 0x53, 0x41, 0x24, 0x40, 0x55, 0xd9,
	0x60, 0xa8, 0x5c, 0xfb, 0x9a, 0x58, 0x38, 0x3e, 0x73, 0x77, 0x21, 0xb0, 0x9a, 0x09, 0xb1, 0x31,
	0x20, 0x36, 0xa4, 0x4c, 0xbc, 0x01, 0x4f, 0x7e, 0x03, 0x8c, 0xbc, 0x01, 0x24, 0x14, 0xde, 0x00,
	0x23, 0x23, 0x3a, 0x3b, 0x71, 0xec, 0x20, 0x35, 0x29, 0x03, 0x43, 0xa2, 0xf8, 0xfc, 0x79, 0xbe,
	0xcf, 0xf7, 0xb9, 0x7b, 0xee, 0x09, 0xbc, 0xd3, 0x71, 0x65, 0xb7, 0x7f, 0x6c, 0xd8, 0xac, 0x67,
	0x0a, 0xc9, 0x2d, 0xd9, 0xef, 0xf9, 0x66, 0x87, 0x6d, 0xfa, 0xcc, 0xa1, 0xa6, 0xcd, 0x38, 0x35,
	0xad, 0x20, 0x30, 0xbb, 0x4c, 0x48, 0xb3, 0xc3, 0x03, 0x3b, 0xf9, 0x65, 0x04, 0x9c, 0x49, 0x86,
	0xc8, 0x84, 0x37, 0x14, 0x6c, 0x28, 0xd8, 0xb0, 0x82, 0xc0, 0x48, 0x10, 0x05, 0xd7, 0x9b, 0xa7,
	0x8a, 0x7b, 0x6e, 0x2a, 0x49, 0x5f, 0x49, 0xf5, 0x49, 0x55, 0xf5, 0x2a, 0x3c, 0xd7, 0x76, 0x0e,
	0xe9, 0x0b, 0x7d, 0x19, 0xd6, 0x76, 0x1c, 0x87, 0x53, 0x21, 0xa8, 0x50, 0xcf, 0xcf, 0xe0, 0x85,
	0x03, 0x4a, 0x79, 0x7e, 0x0d, 0xdd, 0x87, 0xd5, 0x80, 0x52, 0x7e, 0xe4, 0x3a, 0x18, 0x10, 0xb0,
	0x5e, 0xdb, 0x35, 0x86, 0x31, 0xd6, 0x9f, 0x74, 0xd9, 0x80, 0x3c, 0xf7, 0xd9, 0xc0, 0x27, 0xd6,
	0x84, 0x26, 0x27, 0x8c, 0x13, 0xd9, 0x75, 0x05, 0x51, 0x01, 0x9f, 0x63, 0x0c, 0x7e, 0xc6, 0x18,
	0x1c, 0x56, 0xd4, 0x53, 0xdb, 0xd1, 0xdf, 0x03, 0xb8, 0xb2, 0xe3, 0x38, 0xb9, 0x04, 0x4a, 0xbe,
	0x35, 0x2b, 0xbf, 0x31, 0x8c, 0xf1, 0xf5, 0x1d, 0xc7, 0x21, 0x16, 0xf1, 0xe9, 0x60, 0xa2, 0x7e,
	0xba, 0x36, 0xba, 0x0d, 0xab, 0x63, 0x10, 0x97, 0x12, 0x95, 0xd5, 0x61, 0x8c, 0x57, 0x1e, 0xe7,
	0xe2, 0x5f, 0x5a, 0x5e, 0x9f, 0xaa, 0xb8, 0x5f, 0x2a, 0x6e, 0x42, 0xeb, 0xf7, 0x20, 0xdc, 0x63,
	0xbe, 0x4f, 0x6d, 0xa9, 0xcc, 0x34, 0xa7, 0x32, 0xa9, 0x19, 0x3c, 0x8c, 0x71, 0xed, 0x51, 0xdf,
	0x93, 0xee, 0x78, 0xfd, 0x4f, 0x05, 0x0d, 0x56, 0x0e, 0x52, 0x13, 0x97, 0x60, 0x29, 0xab, 0xa2,
	0x9c, 0xd8, 0x2b, 0xb9, 0x8e, 0xde, 0x80, 0xd5, 0x71, 0xb9, 0x48, 0x9b, 0x95, 0x2f, 0x17, 0xa5,
	0xde, 0x80, 0xcc, 0x8d, 0xcb, 0x7c, 0xb4, 0x3a, 0xbb, 0x35, 0xe5, 0x42, 0xcd, 0x0d, 0xb8, 0xe4,
	0x31, 0xdb, 0xf2, 0x8e, 0x8a, 0x95, 0xa7, 0x9a, 0xb5, 0xe4, 0xd5, 0x24, 0xf1, 0x06, 0x5c, 0xe6,
	0xb4, 0xc7, 0x24, 0xcd, 0xd8, 0xff, 0x73, 0xec, 0x52, 0xfa, 0x6e, 0x0c, 0x37, 0xbf, 0x55, 0x60,
	0xf9, 0x01, 0x13, 0x12, 0x71, 0x58, 0x6a, 0xb7, 0xd0, 0x9a, 0x31, 0xaf, 0x07, 0x8d, 0xa4, 0x99,
	0xea, 0xeb, 0xf3, 0xc1, 0x74, 0xa3, 0xf4, 0x6b, 0x61, 0x84, 0x2f, 0xb7, 0x5c, 0x11, 0x78, 0xd6,
	0x6b, 0x22, 0xbb, 0x94, 0x28, 0x62, 0x4d, 0x90, 0x76, 0x0b, 0xbd, 0x03, 0xf0, 0x7c, 0xd6, 0x7e,
	0xc8, 0x98, 0x2f, 0x99, 0xef, 0xd5, 0x7a, 0x63, 0x61, 0x5e, 0xbf, 0x11, 0x46, 0x78, 0xf5, 0xa1,
	0x2b, 0x24, 0xb1, 0x3c, 0x2f, 0x6f, 0x22, 0x6b, 0xe7, 0x2d, 0x80, 0xde, 0x02, 0xb8, 0x54, 0xb8,
	0x10, 0xa8, 0xb9, 0x58, 0x91, 0x7f, 0xeb, 0xea, 0x6a, 0x18, 0xe1, 0x8b, 0x89, 0x2b, 0x75, 0xc8,
	0x05, 0x2f, 0x9f, 0x00, 0x44, 0x7b, 0x1e, 0xb5, 0xf8, 0x3f, 0x35, 0xb4, 0x1e, 0x46, 0xf8, 0x66,
	0x92, 0x76, 0xc6, 0x11, 0x39, 0xe1, 0xac, 0x97, 0xae, 0x09, 0xc9, 0x38, 0xdd, 0x02, 0xea, 0xec,
	0x96, 0x8b, 0x17, 0x1c, 0x6d, 0x2f, 0x94, 0xa9, 0x38, 0x12, 0xce, 0xd0, 0x48, 0xf5, 0x30, 0xc2,
	0x57, 0xa6, 0xb3, 0x22, 0xef, 0x10, 0x7d, 0x00, 0xb0, 0x3a, 0xbe, 0x4c, 0xe8, 0xd6, 0x7c, 0xc5,
	0xe9, 0x14, 0xa8, 0x2f, 0x4e, 0xbb, 0xcc, 0xd7, 0x37, 0xc3, 0x08, 0x37, 0xf6, 0x7d, 0xd1, 0xe7,
	0x54, 0xb5, 0x11, 0xa7, 0xc4, 0x15, 0xc4, 0x22, 0x76, 0x46, 0x10, 0xc9, 0xa6, 0x93, 0x6b, 0x0b,
	0xec, 0xee, 0x7f, 0x19, 0x69, 0xe0, 0xeb, 0x48, 0x03, 0xdf, 0x47, 0x1a, 0xf8, 0xf8, 0x43, 0xfb,
	0xef, 0xe9, 0xf6, 0xd9, 0xfe, 0x20, 0xee, 0xaa, 0xaf, 0xe3, 0x4a, 0x32, 0xcb, 0xb7, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x72, 0xe8, 0xdf, 0x4c, 0x5e, 0x06, 0x00, 0x00,
}
