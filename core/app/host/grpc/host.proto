// Copyright Â© 2017-2018 Stratumn SAS
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

import "github.com/stratumn/go-node/cli/grpc/ext/ext.proto";

package stratumn.node.core.app.host.grpc;

option go_package = "github.com/stratumn/go-node/core/app/host/grpc;grpc";

// The host service definition.
service Host {
  // Returns the host ID.
  rpc ID (IdReq) returns (PeerId) {
    option (stratumn.node.cli.ext.method_desc) = "Display the host's ID";
  }

  // Streams the host addresses.
  rpc Addresses (AddressesReq) returns (stream Address) {
    option (stratumn.node.cli.ext.method_desc) = "List all the host's addresses";
  }

  // Streams a peer's known addresses.
  rpc PeerAddresses (PeerAddressesReq) returns (stream Address) {
    option (stratumn.node.cli.ext.method_desc) = "List peer addresses";
  }

  // Clears a peer's known addresses.
  rpc ClearPeerAddresses (PeerAddressesReq) returns (stream Address) {
    option (stratumn.node.cli.ext.method_desc) = "Clear peer addresses from peer store";
  }

  // Add a new peer address to the node's Peer Store.
  rpc AddPeerAddress (AddPeerAddressReq) returns (PeerId) {
    option (stratumn.node.cli.ext.method_desc) = "Add a new peer address";
  }

  // Connects to a multiaddress.
  rpc Connect (ConnectReq) returns (stream Connection) {
    option (stratumn.node.cli.ext.method_desc) = "Ensure there is a connection to this peer";
  }
}

// The ID request message.
message IdReq {
}

// The address request message.
message AddressesReq {
}

// The peer addresses request message.
message PeerAddressesReq {
  bytes peer_id = 1 [
    (stratumn.node.cli.ext.field_desc) = "Show known addresses for this peer",
    (stratumn.node.cli.ext.field_required) = true,
    (stratumn.node.cli.ext.field_base58) = true
  ];
}

// The add peer address request message.
message AddPeerAddressReq {
  bytes peer_id = 1 [
    (stratumn.node.cli.ext.field_desc) = "Add a new address for this peer",
    (stratumn.node.cli.ext.field_required) = true,
    (stratumn.node.cli.ext.field_base58) = true
  ];
  bytes address = 2 [
    (stratumn.node.cli.ext.field_desc) = "New address value",
    (stratumn.node.cli.ext.field_required) = true,
    (stratumn.node.cli.ext.field_multiaddr) = true
  ];
}

// The connect request message.
message ConnectReq {
  bytes address = 1 [
    (stratumn.node.cli.ext.field_desc) = "Multiaddress",
    (stratumn.node.cli.ext.field_required) = true,
    (stratumn.node.cli.ext.field_multiaddr) = true
  ];
}

// The peer ID message containing the ID of a peer.
message PeerId {
  bytes id = 1 [(stratumn.node.cli.ext.field_base58) = true];
}

// The address message containing a multiaddress.
message Address {
    bytes address = 1 [(stratumn.node.cli.ext.field_multiaddr) = true];
}

// The connection message containing the peer ID and addresses.
message Connection {
    bytes peer_id = 1 [(stratumn.node.cli.ext.field_base58) = true];
    bytes local_address = 2 [(stratumn.node.cli.ext.field_multiaddr) = true];
    bytes remote_address = 3 [(stratumn.node.cli.ext.field_multiaddr) = true];
}
