// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/go-indigonode/core/app/ping/grpc/ping.proto

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/go-indigonode/core/app/ping/grpc/ping.proto

	It has these top-level messages:
		PingReq
		Response
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/go-indigonode/cli/grpc/ext"

import context "context"
import grpc1 "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The ping request message.
type PingReq struct {
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Times  uint32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptorPing, []int{0} }

func (m *PingReq) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *PingReq) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// The response message containing the latenty.
type Response struct {
	Latency int64 `protobuf:"varint,1,opt,name=latency,proto3" json:"latency,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorPing, []int{1} }

func (m *Response) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func init() {
	proto.RegisterType((*PingReq)(nil), "stratumn.indigonode.core.app.ping.grpc.PingReq")
	proto.RegisterType((*Response)(nil), "stratumn.indigonode.core.app.ping.grpc.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Ping service

type PingClient interface {
	// Pings an address and streams responses.
	Ping(ctx context.Context, in *PingReq, opts ...grpc1.CallOption) (Ping_PingClient, error)
}

type pingClient struct {
	cc *grpc1.ClientConn
}

func NewPingClient(cc *grpc1.ClientConn) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) Ping(ctx context.Context, in *PingReq, opts ...grpc1.CallOption) (Ping_PingClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Ping_serviceDesc.Streams[0], c.cc, "/stratumn.indigonode.core.app.ping.grpc.Ping/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ping_PingClient interface {
	Recv() (*Response, error)
	grpc1.ClientStream
}

type pingPingClient struct {
	grpc1.ClientStream
}

func (x *pingPingClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ping service

type PingServer interface {
	// Pings an address and streams responses.
	Ping(*PingReq, Ping_PingServer) error
}

func RegisterPingServer(s *grpc1.Server, srv PingServer) {
	s.RegisterService(&_Ping_serviceDesc, srv)
}

func _Ping_Ping_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(PingReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServer).Ping(m, &pingPingServer{stream})
}

type Ping_PingServer interface {
	Send(*Response) error
	grpc1.ServerStream
}

type pingPingServer struct {
	grpc1.ServerStream
}

func (x *pingPingServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Ping_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "stratumn.indigonode.core.app.ping.grpc.Ping",
	HandlerType: (*PingServer)(nil),
	Methods:     []grpc1.MethodDesc{},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Ping_Ping_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/go-indigonode/core/app/ping/grpc/ping.proto",
}

func (m *PingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPing(dAtA, i, uint64(len(m.PeerId)))
		i += copy(dAtA[i:], m.PeerId)
	}
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPing(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Latency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPing(dAtA, i, uint64(m.Latency))
	}
	return i, nil
}

func encodeVarintPing(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PingReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovPing(uint64(l))
	}
	if m.Times != 0 {
		n += 1 + sovPing(uint64(m.Times))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Latency != 0 {
		n += 1 + sovPing(uint64(m.Latency))
	}
	return n
}

func sovPing(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPing(x uint64) (n int) {
	return sovPing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPing
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = append(m.PeerId[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerId == nil {
				m.PeerId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			m.Latency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latency |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPing
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPing
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPing(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPing = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPing   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/go-indigonode/core/app/ping/grpc/ping.proto", fileDescriptorPing)
}

var fileDescriptorPing = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4f, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x29, 0xcd, 0xcd, 0xd3,
	0x4f, 0xcf, 0xd7, 0xcd, 0xcc, 0x4b, 0xc9, 0x4c, 0xcf, 0xcf, 0xcb, 0x4f, 0x49, 0xd5, 0x4f, 0xce,
	0x2f, 0x4a, 0xd5, 0x4f, 0x2c, 0x28, 0xd0, 0x2f, 0xc8, 0xcc, 0x4b, 0xd7, 0x4f, 0x2f, 0x2a, 0x48,
	0x06, 0xb3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd4, 0x60, 0xba, 0xf4, 0x10, 0x5a, 0xf4,
	0x40, 0x5a, 0xf4, 0x12, 0x0b, 0x0a, 0xf4, 0xc0, 0x0a, 0x41, 0x5a, 0xa4, 0x2c, 0x88, 0xb0, 0x28,
	0x27, 0x13, 0x62, 0x7c, 0x6a, 0x45, 0x09, 0x08, 0x43, 0x6c, 0x50, 0x4a, 0xe3, 0x62, 0x0f, 0xc8,
	0xcc, 0x4b, 0x0f, 0x4a, 0x2d, 0x14, 0xd2, 0xe1, 0x62, 0x2f, 0x48, 0x4d, 0x2d, 0x8a, 0xcf, 0x4c,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x71, 0x12, 0x5e, 0xb4, 0x5b, 0x82, 0x3d, 0x20, 0x35, 0xb5,
	0x48, 0xc1, 0xd3, 0x65, 0xc5, 0x6e, 0x09, 0xc6, 0x0f, 0xbb, 0x25, 0x18, 0x83, 0xd8, 0x40, 0x6a,
	0x3c, 0x53, 0x84, 0x74, 0xb9, 0x58, 0x4b, 0x32, 0x73, 0x53, 0x8b, 0x25, 0x98, 0x14, 0x18, 0x35,
	0x78, 0x9d, 0xc4, 0x17, 0xed, 0x96, 0x10, 0x0e, 0xc9, 0x48, 0x55, 0xc8, 0x2b, 0xcd, 0x4d, 0x4a,
	0x2d, 0x52, 0xc8, 0x4f, 0x53, 0x00, 0x39, 0xaf, 0x38, 0x08, 0xa2, 0x4a, 0x49, 0x8b, 0x8b, 0x23,
	0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8e, 0x8b, 0x3d, 0x27, 0xb1, 0x24, 0x35,
	0x2f, 0xb9, 0x12, 0x6c, 0x11, 0xb3, 0x13, 0xcb, 0x89, 0x3d, 0x12, 0x8c, 0x41, 0x30, 0x41, 0xa3,
	0x16, 0x46, 0x2e, 0x16, 0x90, 0xa3, 0x84, 0x6a, 0xa0, 0xb4, 0xbe, 0x1e, 0x71, 0xe1, 0xa0, 0x07,
	0xf5, 0x8a, 0x94, 0x01, 0xb1, 0x1a, 0x60, 0x6e, 0x52, 0xe2, 0x6f, 0xda, 0x2a, 0xc1, 0x0d, 0xd2,
	0xae, 0x90, 0xa8, 0x00, 0xf2, 0xa1, 0x01, 0xa3, 0x93, 0xf7, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x25, 0x39, 0xf1, 0x69,
	0x0d, 0x22, 0x92, 0xd8, 0xc0, 0xc1, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x37, 0x87, 0x3b,
	0x22, 0x13, 0x02, 0x00, 0x00,
}
