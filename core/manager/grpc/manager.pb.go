// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/core/manager/grpc/manager.proto

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/core/manager/grpc/manager.proto

	It has these top-level messages:
		ListReq
		InfoReq
		StartReq
		StopReq
		PruneReq
		Service
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/cli/grpc/ext"

import context "context"
import grpc1 "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Service_Status int32

const (
	Service_STOPPED  Service_Status = 0
	Service_STARTING Service_Status = 1
	Service_RUNNING  Service_Status = 2
	Service_STOPPING Service_Status = 3
	Service_ERRORED  Service_Status = 4
)

var Service_Status_name = map[int32]string{
	0: "STOPPED",
	1: "STARTING",
	2: "RUNNING",
	3: "STOPPING",
	4: "ERRORED",
}
var Service_Status_value = map[string]int32{
	"STOPPED":  0,
	"STARTING": 1,
	"RUNNING":  2,
	"STOPPING": 3,
	"ERRORED":  4,
}

func (x Service_Status) String() string {
	return proto.EnumName(Service_Status_name, int32(x))
}
func (Service_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorManager, []int{5, 0} }

// The list request message.
type ListReq struct {
}

func (m *ListReq) Reset()                    { *m = ListReq{} }
func (m *ListReq) String() string            { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()               {}
func (*ListReq) Descriptor() ([]byte, []int) { return fileDescriptorManager, []int{0} }

// The info request message.
type InfoReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *InfoReq) Reset()                    { *m = InfoReq{} }
func (m *InfoReq) String() string            { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()               {}
func (*InfoReq) Descriptor() ([]byte, []int) { return fileDescriptorManager, []int{1} }

func (m *InfoReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// The start request message.
type StartReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *StartReq) Reset()                    { *m = StartReq{} }
func (m *StartReq) String() string            { return proto.CompactTextString(m) }
func (*StartReq) ProtoMessage()               {}
func (*StartReq) Descriptor() ([]byte, []int) { return fileDescriptorManager, []int{2} }

func (m *StartReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// The stop request message.
type StopReq struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Prune bool   `protobuf:"varint,2,opt,name=prune,proto3" json:"prune,omitempty"`
}

func (m *StopReq) Reset()                    { *m = StopReq{} }
func (m *StopReq) String() string            { return proto.CompactTextString(m) }
func (*StopReq) ProtoMessage()               {}
func (*StopReq) Descriptor() ([]byte, []int) { return fileDescriptorManager, []int{3} }

func (m *StopReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StopReq) GetPrune() bool {
	if m != nil {
		return m.Prune
	}
	return false
}

// The prune request message.
type PruneReq struct {
}

func (m *PruneReq) Reset()                    { *m = PruneReq{} }
func (m *PruneReq) String() string            { return proto.CompactTextString(m) }
func (*PruneReq) ProtoMessage()               {}
func (*PruneReq) Descriptor() ([]byte, []int) { return fileDescriptorManager, []int{4} }

// The service message containing information about a service.
type Service struct {
	Id        string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status    Service_Status `protobuf:"varint,2,opt,name=status,proto3,enum=stratumn.alice.core.manager.Service_Status" json:"status,omitempty"`
	Needs     []string       `protobuf:"bytes,3,rep,name=needs" json:"needs,omitempty"`
	Stoppable bool           `protobuf:"varint,4,opt,name=stoppable,proto3" json:"stoppable,omitempty"`
	Prunable  bool           `protobuf:"varint,5,opt,name=prunable,proto3" json:"prunable,omitempty"`
	Name      string         `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string         `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorManager, []int{5} }

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetStatus() Service_Status {
	if m != nil {
		return m.Status
	}
	return Service_STOPPED
}

func (m *Service) GetNeeds() []string {
	if m != nil {
		return m.Needs
	}
	return nil
}

func (m *Service) GetStoppable() bool {
	if m != nil {
		return m.Stoppable
	}
	return false
}

func (m *Service) GetPrunable() bool {
	if m != nil {
		return m.Prunable
	}
	return false
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*ListReq)(nil), "stratumn.alice.core.manager.ListReq")
	proto.RegisterType((*InfoReq)(nil), "stratumn.alice.core.manager.InfoReq")
	proto.RegisterType((*StartReq)(nil), "stratumn.alice.core.manager.StartReq")
	proto.RegisterType((*StopReq)(nil), "stratumn.alice.core.manager.StopReq")
	proto.RegisterType((*PruneReq)(nil), "stratumn.alice.core.manager.PruneReq")
	proto.RegisterType((*Service)(nil), "stratumn.alice.core.manager.Service")
	proto.RegisterEnum("stratumn.alice.core.manager.Service_Status", Service_Status_name, Service_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	// Streams the registered services.
	List(ctx context.Context, in *ListReq, opts ...grpc1.CallOption) (Manager_ListClient, error)
	// Returns information about a service.
	Info(ctx context.Context, in *InfoReq, opts ...grpc1.CallOption) (*Service, error)
	// Starts a service.
	Start(ctx context.Context, in *StartReq, opts ...grpc1.CallOption) (*Service, error)
	// Stops a service.
	Stop(ctx context.Context, in *StopReq, opts ...grpc1.CallOption) (*Service, error)
	// Prunes services.
	Prune(ctx context.Context, in *PruneReq, opts ...grpc1.CallOption) (Manager_PruneClient, error)
}

type managerClient struct {
	cc *grpc1.ClientConn
}

func NewManagerClient(cc *grpc1.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) List(ctx context.Context, in *ListReq, opts ...grpc1.CallOption) (Manager_ListClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Manager_serviceDesc.Streams[0], c.cc, "/stratumn.alice.core.manager.Manager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_ListClient interface {
	Recv() (*Service, error)
	grpc1.ClientStream
}

type managerListClient struct {
	grpc1.ClientStream
}

func (x *managerListClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerClient) Info(ctx context.Context, in *InfoReq, opts ...grpc1.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc1.Invoke(ctx, "/stratumn.alice.core.manager.Manager/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Start(ctx context.Context, in *StartReq, opts ...grpc1.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc1.Invoke(ctx, "/stratumn.alice.core.manager.Manager/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Stop(ctx context.Context, in *StopReq, opts ...grpc1.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc1.Invoke(ctx, "/stratumn.alice.core.manager.Manager/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Prune(ctx context.Context, in *PruneReq, opts ...grpc1.CallOption) (Manager_PruneClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Manager_serviceDesc.Streams[1], c.cc, "/stratumn.alice.core.manager.Manager/Prune", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerPruneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_PruneClient interface {
	Recv() (*Service, error)
	grpc1.ClientStream
}

type managerPruneClient struct {
	grpc1.ClientStream
}

func (x *managerPruneClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Manager service

type ManagerServer interface {
	// Streams the registered services.
	List(*ListReq, Manager_ListServer) error
	// Returns information about a service.
	Info(context.Context, *InfoReq) (*Service, error)
	// Starts a service.
	Start(context.Context, *StartReq) (*Service, error)
	// Stops a service.
	Stop(context.Context, *StopReq) (*Service, error)
	// Prunes services.
	Prune(*PruneReq, Manager_PruneServer) error
}

func RegisterManagerServer(s *grpc1.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_List_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(ListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).List(m, &managerListServer{stream})
}

type Manager_ListServer interface {
	Send(*Service) error
	grpc1.ServerStream
}

type managerListServer struct {
	grpc1.ServerStream
}

func (x *managerListServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func _Manager_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Info(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.core.manager.Manager/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Start(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.core.manager.Manager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Start(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Stop(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.core.manager.Manager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Stop(ctx, req.(*StopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Prune_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(PruneReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).Prune(m, &managerPruneServer{stream})
}

type Manager_PruneServer interface {
	Send(*Service) error
	grpc1.ServerStream
}

type managerPruneServer struct {
	grpc1.ServerStream
}

func (x *managerPruneServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

var _Manager_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "stratumn.alice.core.manager.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Manager_Info_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Manager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Manager_Stop_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Manager_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Prune",
			Handler:       _Manager_Prune_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/core/manager/grpc/manager.proto",
}

func (m *ListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *StartReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *StopReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Prune {
		dAtA[i] = 0x10
		i++
		if m.Prune {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PruneReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PruneReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManager(dAtA, i, uint64(m.Status))
	}
	if len(m.Needs) > 0 {
		for _, s := range m.Needs {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Stoppable {
		dAtA[i] = 0x20
		i++
		if m.Stoppable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Prunable {
		dAtA[i] = 0x28
		i++
		if m.Prunable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintManager(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func encodeVarintManager(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InfoReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	return n
}

func (m *StartReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	return n
}

func (m *StopReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.Prune {
		n += 2
	}
	return n
}

func (m *PruneReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Service) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovManager(uint64(m.Status))
	}
	if len(m.Needs) > 0 {
		for _, s := range m.Needs {
			l = len(s)
			n += 1 + l + sovManager(uint64(l))
		}
	}
	if m.Stoppable {
		n += 2
	}
	if m.Prunable {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	return n
}

func sovManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozManager(x uint64) (n int) {
	return sovManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prune", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prune = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PruneReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PruneReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PruneReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Service_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Needs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Needs = append(m.Needs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stoppable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stoppable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prunable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prunable = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipManager(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManager   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/alice/core/manager/grpc/manager.proto", fileDescriptorManager)
}

var fileDescriptorManager = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x8f, 0xd2, 0x4e,
	0x14, 0xdf, 0xb2, 0x85, 0xc2, 0xfb, 0xff, 0x83, 0x64, 0xd4, 0x64, 0xc4, 0x0d, 0x4e, 0xea, 0x9a,
	0x60, 0x74, 0xcb, 0x66, 0x3d, 0x19, 0x4f, 0x22, 0x64, 0x43, 0x54, 0x20, 0x53, 0xbc, 0x78, 0x1b,
	0xca, 0xc0, 0x36, 0x81, 0xb6, 0xb4, 0xd3, 0x8d, 0x5e, 0xf9, 0x14, 0x9e, 0xd7, 0x8b, 0x5f, 0x80,
	0x13, 0x17, 0x8f, 0x1e, 0xfd, 0x08, 0x06, 0xbf, 0x88, 0x99, 0x69, 0x61, 0xb9, 0x08, 0xf5, 0x00,
	0xe9, 0x7b, 0xef, 0xf7, 0x7b, 0xbf, 0xf7, 0x66, 0xde, 0x1b, 0x78, 0x39, 0x71, 0xc5, 0x55, 0x3c,
	0xb4, 0x1c, 0x7f, 0xd6, 0x88, 0x44, 0xc8, 0x44, 0x3c, 0xf3, 0x1a, 0x6c, 0xea, 0x3a, 0xbc, 0xe1,
	0xf8, 0x21, 0x6f, 0xcc, 0x98, 0xc7, 0x26, 0x3c, 0x6c, 0x4c, 0xc2, 0xc0, 0xd9, 0x18, 0x56, 0x10,
	0xfa, 0xc2, 0x47, 0x0f, 0x37, 0x78, 0x4b, 0xe1, 0x2d, 0x89, 0xb7, 0x52, 0x48, 0xf5, 0xf9, 0xdf,
	0xf3, 0xaa, 0x54, 0xfc, 0x93, 0x90, 0xbf, 0x24, 0x95, 0x59, 0x02, 0xe3, 0x9d, 0x1b, 0x09, 0xca,
	0xe7, 0xe6, 0x19, 0x18, 0x1d, 0x6f, 0xec, 0x53, 0x3e, 0x47, 0x26, 0xe4, 0xdc, 0x11, 0xd6, 0x88,
	0x56, 0x2f, 0x35, 0xd1, 0xcd, 0x0a, 0x83, 0xcd, 0xc3, 0x6b, 0xd7, 0xe1, 0xa4, 0xd3, 0xfa, 0xb6,
	0xc2, 0x1a, 0xcd, 0xb9, 0x23, 0xd3, 0x82, 0xa2, 0x2d, 0x58, 0x28, 0xb2, 0xe2, 0x43, 0x30, 0x6c,
	0xe1, 0x07, 0x19, 0xe1, 0xe8, 0x0d, 0xe4, 0x83, 0x30, 0xf6, 0x38, 0xce, 0x11, 0xad, 0x5e, 0x6c,
	0x9e, 0xdd, 0xac, 0xf0, 0xd3, 0xbe, 0x74, 0x90, 0x28, 0x01, 0x47, 0x84, 0x8d, 0x05, 0x0f, 0x49,
	0x24, 0xfc, 0x20, 0x70, 0xbd, 0x09, 0x11, 0x57, 0xdb, 0x18, 0x4d, 0xb8, 0x26, 0x40, 0x51, 0x71,
	0x64, 0x7b, 0x5f, 0x73, 0x60, 0xa4, 0x3a, 0xa8, 0x7c, 0x5b, 0x40, 0x2a, 0x56, 0x88, 0x04, 0x13,
	0x71, 0xa4, 0xd4, 0xca, 0x17, 0xcf, 0xac, 0x3d, 0x27, 0x6c, 0xa5, 0x59, 0x2c, 0x5b, 0x51, 0x68,
	0x4a, 0x45, 0xf7, 0x20, 0xef, 0x71, 0x3e, 0x8a, 0xf0, 0x31, 0x39, 0xae, 0x97, 0x68, 0x62, 0xa0,
	0x13, 0x28, 0xa9, 0x0a, 0xd9, 0x70, 0xca, 0xb1, 0x2e, 0x7b, 0xa1, 0xb7, 0x0e, 0x54, 0x85, 0xa2,
	0xac, 0x54, 0x05, 0xf3, 0x2a, 0xb8, 0xb5, 0x11, 0x02, 0xdd, 0x63, 0x33, 0x8e, 0x0b, 0xaa, 0x4c,
	0xf5, 0x2d, 0x7d, 0x23, 0x1e, 0x39, 0xd8, 0x48, 0x7c, 0xf2, 0xdb, 0x7c, 0x0b, 0x85, 0xa4, 0x12,
	0xf4, 0x1f, 0x18, 0xf6, 0xa0, 0xd7, 0xef, 0xb7, 0x5b, 0x95, 0x23, 0xf4, 0x3f, 0x14, 0xed, 0xc1,
	0x6b, 0x3a, 0xe8, 0x74, 0x2f, 0x2b, 0x9a, 0x0c, 0xd1, 0x0f, 0xdd, 0xae, 0x34, 0x72, 0x49, 0xa8,
	0xd7, 0xef, 0x4b, 0xeb, 0x58, 0x86, 0xda, 0x94, 0xf6, 0x68, 0xbb, 0x55, 0xd1, 0x2f, 0xbe, 0xeb,
	0x60, 0xbc, 0x4f, 0xfa, 0x44, 0x9f, 0x41, 0x97, 0xb3, 0x81, 0x4e, 0xf7, 0x9e, 0x46, 0x3a, 0x3e,
	0xd5, 0xd3, 0x2c, 0x67, 0x66, 0x3e, 0x5e, 0x2c, 0xf1, 0x23, 0x49, 0x21, 0x6c, 0x3a, 0x55, 0x57,
	0xc6, 0xae, 0x99, 0x3b, 0x95, 0x0d, 0x6f, 0x2f, 0xf6, 0x5c, 0x43, 0x02, 0x74, 0x39, 0x8b, 0x07,
	0xa4, 0xd3, 0x71, 0xcd, 0x28, 0x4d, 0x16, 0x4b, 0x7c, 0x72, 0xc9, 0x05, 0x71, 0xbd, 0xb1, 0x1f,
	0xce, 0x98, 0x70, 0x7d, 0x8f, 0xf8, 0x1e, 0x61, 0x1b, 0x61, 0xe4, 0x42, 0x5e, 0x8d, 0x34, 0x7a,
	0xb2, 0x3f, 0x61, 0x3a, 0xf6, 0x19, 0x75, 0xef, 0x2e, 0x96, 0xf8, 0x8e, 0xe2, 0xec, 0x48, 0x8d,
	0x41, 0x97, 0xdb, 0x70, 0xa0, 0xc1, 0x74, 0x61, 0x32, 0x0a, 0xa1, 0xc5, 0x12, 0x97, 0x25, 0x65,
	0x47, 0x67, 0x0e, 0x79, 0xb5, 0x01, 0x07, 0x5a, 0xda, 0x6c, 0x49, 0x46, 0xa5, 0x07, 0x8b, 0x25,
	0xbe, 0x9f, 0x6c, 0x63, 0xec, 0xc5, 0x11, 0x1f, 0xed, 0xdc, 0x5d, 0xb3, 0xf9, 0x63, 0x5d, 0xd3,
	0x7e, 0xae, 0x6b, 0xda, 0xaf, 0x75, 0x4d, 0xfb, 0xf2, 0xbb, 0x76, 0xf4, 0xf1, 0xfc, 0x1f, 0x9e,
	0xba, 0x57, 0xf2, 0x6f, 0x58, 0x50, 0xaf, 0xd3, 0x8b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x72,
	0x09, 0x4c, 0x27, 0x25, 0x05, 0x00, 0x00,
}
