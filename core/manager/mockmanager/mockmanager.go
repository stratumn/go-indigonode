// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-indigonode/core/manager (interfaces: Service,Needy,Pluggable,Friendly,Exposer,Runner,GRPCManager)

// Package mockmanager is a generated GoMock package.
package mockmanager

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "github.com/stratumn/go-indigonode/core/manager/grpc"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Desc mocks base method
func (m *MockService) Desc() string {
	ret := m.ctrl.Call(m, "Desc")
	ret0, _ := ret[0].(string)
	return ret0
}

// Desc indicates an expected call of Desc
func (mr *MockServiceMockRecorder) Desc() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desc", reflect.TypeOf((*MockService)(nil).Desc))
}

// ID mocks base method
func (m *MockService) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockServiceMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockService)(nil).ID))
}

// Name mocks base method
func (m *MockService) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockServiceMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
}

// MockNeedy is a mock of Needy interface
type MockNeedy struct {
	ctrl     *gomock.Controller
	recorder *MockNeedyMockRecorder
}

// MockNeedyMockRecorder is the mock recorder for MockNeedy
type MockNeedyMockRecorder struct {
	mock *MockNeedy
}

// NewMockNeedy creates a new mock instance
func NewMockNeedy(ctrl *gomock.Controller) *MockNeedy {
	mock := &MockNeedy{ctrl: ctrl}
	mock.recorder = &MockNeedyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNeedy) EXPECT() *MockNeedyMockRecorder {
	return m.recorder
}

// Needs mocks base method
func (m *MockNeedy) Needs() map[string]struct{} {
	ret := m.ctrl.Call(m, "Needs")
	ret0, _ := ret[0].(map[string]struct{})
	return ret0
}

// Needs indicates an expected call of Needs
func (mr *MockNeedyMockRecorder) Needs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Needs", reflect.TypeOf((*MockNeedy)(nil).Needs))
}

// MockPluggable is a mock of Pluggable interface
type MockPluggable struct {
	ctrl     *gomock.Controller
	recorder *MockPluggableMockRecorder
}

// MockPluggableMockRecorder is the mock recorder for MockPluggable
type MockPluggableMockRecorder struct {
	mock *MockPluggable
}

// NewMockPluggable creates a new mock instance
func NewMockPluggable(ctrl *gomock.Controller) *MockPluggable {
	mock := &MockPluggable{ctrl: ctrl}
	mock.recorder = &MockPluggableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluggable) EXPECT() *MockPluggableMockRecorder {
	return m.recorder
}

// Needs mocks base method
func (m *MockPluggable) Needs() map[string]struct{} {
	ret := m.ctrl.Call(m, "Needs")
	ret0, _ := ret[0].(map[string]struct{})
	return ret0
}

// Needs indicates an expected call of Needs
func (mr *MockPluggableMockRecorder) Needs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Needs", reflect.TypeOf((*MockPluggable)(nil).Needs))
}

// Plug mocks base method
func (m *MockPluggable) Plug(arg0 map[string]interface{}) error {
	ret := m.ctrl.Call(m, "Plug", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Plug indicates an expected call of Plug
func (mr *MockPluggableMockRecorder) Plug(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plug", reflect.TypeOf((*MockPluggable)(nil).Plug), arg0)
}

// MockFriendly is a mock of Friendly interface
type MockFriendly struct {
	ctrl     *gomock.Controller
	recorder *MockFriendlyMockRecorder
}

// MockFriendlyMockRecorder is the mock recorder for MockFriendly
type MockFriendlyMockRecorder struct {
	mock *MockFriendly
}

// NewMockFriendly creates a new mock instance
func NewMockFriendly(ctrl *gomock.Controller) *MockFriendly {
	mock := &MockFriendly{ctrl: ctrl}
	mock.recorder = &MockFriendlyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFriendly) EXPECT() *MockFriendlyMockRecorder {
	return m.recorder
}

// Befriend mocks base method
func (m *MockFriendly) Befriend(arg0 string, arg1 interface{}) {
	m.ctrl.Call(m, "Befriend", arg0, arg1)
}

// Befriend indicates an expected call of Befriend
func (mr *MockFriendlyMockRecorder) Befriend(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Befriend", reflect.TypeOf((*MockFriendly)(nil).Befriend), arg0, arg1)
}

// Likes mocks base method
func (m *MockFriendly) Likes() map[string]struct{} {
	ret := m.ctrl.Call(m, "Likes")
	ret0, _ := ret[0].(map[string]struct{})
	return ret0
}

// Likes indicates an expected call of Likes
func (mr *MockFriendlyMockRecorder) Likes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Likes", reflect.TypeOf((*MockFriendly)(nil).Likes))
}

// MockExposer is a mock of Exposer interface
type MockExposer struct {
	ctrl     *gomock.Controller
	recorder *MockExposerMockRecorder
}

// MockExposerMockRecorder is the mock recorder for MockExposer
type MockExposerMockRecorder struct {
	mock *MockExposer
}

// NewMockExposer creates a new mock instance
func NewMockExposer(ctrl *gomock.Controller) *MockExposer {
	mock := &MockExposer{ctrl: ctrl}
	mock.recorder = &MockExposerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExposer) EXPECT() *MockExposerMockRecorder {
	return m.recorder
}

// Expose mocks base method
func (m *MockExposer) Expose() interface{} {
	ret := m.ctrl.Call(m, "Expose")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Expose indicates an expected call of Expose
func (mr *MockExposerMockRecorder) Expose() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expose", reflect.TypeOf((*MockExposer)(nil).Expose))
}

// MockRunner is a mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRunner) Run(arg0 context.Context, arg1, arg2 func()) error {
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRunnerMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), arg0, arg1, arg2)
}

// MockGRPCManager is a mock of GRPCManager interface
type MockGRPCManager struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCManagerMockRecorder
}

// MockGRPCManagerMockRecorder is the mock recorder for MockGRPCManager
type MockGRPCManagerMockRecorder struct {
	mock *MockGRPCManager
}

// NewMockGRPCManager creates a new mock instance
func NewMockGRPCManager(ctrl *gomock.Controller) *MockGRPCManager {
	mock := &MockGRPCManager{ctrl: ctrl}
	mock.recorder = &MockGRPCManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGRPCManager) EXPECT() *MockGRPCManagerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockGRPCManager) List() []string {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List
func (mr *MockGRPCManagerMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGRPCManager)(nil).List))
}

// Proto mocks base method
func (m *MockGRPCManager) Proto(arg0 string) (*grpc.Service, error) {
	ret := m.ctrl.Call(m, "Proto", arg0)
	ret0, _ := ret[0].(*grpc.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proto indicates an expected call of Proto
func (mr *MockGRPCManagerMockRecorder) Proto(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proto", reflect.TypeOf((*MockGRPCManager)(nil).Proto), arg0)
}

// Prune mocks base method
func (m *MockGRPCManager) Prune() {
	m.ctrl.Call(m, "Prune")
}

// Prune indicates an expected call of Prune
func (mr *MockGRPCManagerMockRecorder) Prune() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockGRPCManager)(nil).Prune))
}

// Start mocks base method
func (m *MockGRPCManager) Start(arg0 string) error {
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockGRPCManagerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGRPCManager)(nil).Start), arg0)
}

// Stop mocks base method
func (m *MockGRPCManager) Stop(arg0 string) error {
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockGRPCManagerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGRPCManager)(nil).Stop), arg0)
}
