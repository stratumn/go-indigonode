// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-node/core/protector (interfaces: NetworkConfig)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pb "github.com/stratumn/go-node/core/protector/pb"
	go_libp2p_crypto "gx/ipfs/QmPvyPwuCgJ7pDmrKDxRtsScJgBaM5h4EpRL2qQJsmXf4n/go-libp2p-crypto"
	go_libp2p_peer "gx/ipfs/QmQsErDt8Qgw1XrsXf2BpEzDgGWtB1YLsTAARBup5b6B9W/go-libp2p-peer"
	go_multiaddr "gx/ipfs/QmYmsdtJ3HsodkePE3eU3TsCaP2YvPZJ4LoXnNkDE5Tpt7/go-multiaddr"
	reflect "reflect"
)

// MockNetworkConfig is a mock of NetworkConfig interface
type MockNetworkConfig struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkConfigMockRecorder
}

// MockNetworkConfigMockRecorder is the mock recorder for MockNetworkConfig
type MockNetworkConfigMockRecorder struct {
	mock *MockNetworkConfig
}

// NewMockNetworkConfig creates a new mock instance
func NewMockNetworkConfig(ctrl *gomock.Controller) *MockNetworkConfig {
	mock := &MockNetworkConfig{ctrl: ctrl}
	mock.recorder = &MockNetworkConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkConfig) EXPECT() *MockNetworkConfigMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockNetworkConfig) AddPeer(arg0 context.Context, arg1 go_libp2p_peer.ID, arg2 []go_multiaddr.Multiaddr) error {
	ret := m.ctrl.Call(m, "AddPeer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockNetworkConfigMockRecorder) AddPeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockNetworkConfig)(nil).AddPeer), arg0, arg1, arg2)
}

// AllowedAddrs mocks base method
func (m *MockNetworkConfig) AllowedAddrs(arg0 context.Context, arg1 go_libp2p_peer.ID) []go_multiaddr.Multiaddr {
	ret := m.ctrl.Call(m, "AllowedAddrs", arg0, arg1)
	ret0, _ := ret[0].([]go_multiaddr.Multiaddr)
	return ret0
}

// AllowedAddrs indicates an expected call of AllowedAddrs
func (mr *MockNetworkConfigMockRecorder) AllowedAddrs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowedAddrs", reflect.TypeOf((*MockNetworkConfig)(nil).AllowedAddrs), arg0, arg1)
}

// AllowedPeers mocks base method
func (m *MockNetworkConfig) AllowedPeers(arg0 context.Context) []go_libp2p_peer.ID {
	ret := m.ctrl.Call(m, "AllowedPeers", arg0)
	ret0, _ := ret[0].([]go_libp2p_peer.ID)
	return ret0
}

// AllowedPeers indicates an expected call of AllowedPeers
func (mr *MockNetworkConfigMockRecorder) AllowedPeers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowedPeers", reflect.TypeOf((*MockNetworkConfig)(nil).AllowedPeers), arg0)
}

// Copy mocks base method
func (m *MockNetworkConfig) Copy(arg0 context.Context) pb.NetworkConfig {
	ret := m.ctrl.Call(m, "Copy", arg0)
	ret0, _ := ret[0].(pb.NetworkConfig)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockNetworkConfigMockRecorder) Copy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockNetworkConfig)(nil).Copy), arg0)
}

// IsAllowed mocks base method
func (m *MockNetworkConfig) IsAllowed(arg0 context.Context, arg1 go_libp2p_peer.ID) bool {
	ret := m.ctrl.Call(m, "IsAllowed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockNetworkConfigMockRecorder) IsAllowed(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockNetworkConfig)(nil).IsAllowed), arg0, arg1)
}

// NetworkState mocks base method
func (m *MockNetworkConfig) NetworkState(arg0 context.Context) pb.NetworkState {
	ret := m.ctrl.Call(m, "NetworkState", arg0)
	ret0, _ := ret[0].(pb.NetworkState)
	return ret0
}

// NetworkState indicates an expected call of NetworkState
func (mr *MockNetworkConfigMockRecorder) NetworkState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkState", reflect.TypeOf((*MockNetworkConfig)(nil).NetworkState), arg0)
}

// RemovePeer mocks base method
func (m *MockNetworkConfig) RemovePeer(arg0 context.Context, arg1 go_libp2p_peer.ID) error {
	ret := m.ctrl.Call(m, "RemovePeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *MockNetworkConfigMockRecorder) RemovePeer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockNetworkConfig)(nil).RemovePeer), arg0, arg1)
}

// Reset mocks base method
func (m *MockNetworkConfig) Reset(arg0 context.Context, arg1 *pb.NetworkConfig) error {
	ret := m.ctrl.Call(m, "Reset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockNetworkConfigMockRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockNetworkConfig)(nil).Reset), arg0, arg1)
}

// SetNetworkState mocks base method
func (m *MockNetworkConfig) SetNetworkState(arg0 context.Context, arg1 pb.NetworkState) error {
	ret := m.ctrl.Call(m, "SetNetworkState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNetworkState indicates an expected call of SetNetworkState
func (mr *MockNetworkConfigMockRecorder) SetNetworkState(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNetworkState", reflect.TypeOf((*MockNetworkConfig)(nil).SetNetworkState), arg0, arg1)
}

// Sign mocks base method
func (m *MockNetworkConfig) Sign(arg0 context.Context, arg1 go_libp2p_crypto.PrivKey) error {
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sign indicates an expected call of Sign
func (mr *MockNetworkConfigMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockNetworkConfig)(nil).Sign), arg0, arg1)
}
