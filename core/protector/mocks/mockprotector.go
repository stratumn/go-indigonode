// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protector (interfaces: Protector,StateAwareProtector)

package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	protector "github.com/stratumn/alice/core/protector"
	go_libp2p_transport "gx/ipfs/QmPUHzTLPZFYqv8WqcBTuMFYTgeom4uHHEaxzk7bd5GYZB/go-libp2p-transport"
	go_multiaddr "gx/ipfs/QmWWQ2Txc2c6tqjsBpzg5Ar652cHPGNsQQp2SejkNmkUMb/go-multiaddr"
	go_libp2p_peer "gx/ipfs/QmcJukH2sAFjY3HdBKq35WDzWoL3UUu2gt9wdfqZTUyM74/go-libp2p-peer"
	reflect "reflect"
)

// MockProtector is a mock of Protector interface
type MockProtector struct {
	ctrl     *gomock.Controller
	recorder *MockProtectorMockRecorder
}

// MockProtectorMockRecorder is the mock recorder for MockProtector
type MockProtectorMockRecorder struct {
	mock *MockProtector
}

// NewMockProtector creates a new mock instance
func NewMockProtector(ctrl *gomock.Controller) *MockProtector {
	mock := &MockProtector{ctrl: ctrl}
	mock.recorder = &MockProtectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProtector) EXPECT() *MockProtectorMockRecorder {
	return _m.recorder
}

// AllowedAddrs mocks base method
func (_m *MockProtector) AllowedAddrs(_param0 context.Context) []go_multiaddr.Multiaddr {
	ret := _m.ctrl.Call(_m, "AllowedAddrs", _param0)
	ret0, _ := ret[0].([]go_multiaddr.Multiaddr)
	return ret0
}

// AllowedAddrs indicates an expected call of AllowedAddrs
func (_mr *MockProtectorMockRecorder) AllowedAddrs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AllowedAddrs", reflect.TypeOf((*MockProtector)(nil).AllowedAddrs), arg0)
}

// AllowedPeers mocks base method
func (_m *MockProtector) AllowedPeers(_param0 context.Context) []go_libp2p_peer.ID {
	ret := _m.ctrl.Call(_m, "AllowedPeers", _param0)
	ret0, _ := ret[0].([]go_libp2p_peer.ID)
	return ret0
}

// AllowedPeers indicates an expected call of AllowedPeers
func (_mr *MockProtectorMockRecorder) AllowedPeers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AllowedPeers", reflect.TypeOf((*MockProtector)(nil).AllowedPeers), arg0)
}

// Fingerprint mocks base method
func (_m *MockProtector) Fingerprint() []byte {
	ret := _m.ctrl.Call(_m, "Fingerprint")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Fingerprint indicates an expected call of Fingerprint
func (_mr *MockProtectorMockRecorder) Fingerprint() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Fingerprint", reflect.TypeOf((*MockProtector)(nil).Fingerprint))
}

// ListenForUpdates mocks base method
func (_m *MockProtector) ListenForUpdates(_param0 <-chan protector.NetworkUpdate) {
	_m.ctrl.Call(_m, "ListenForUpdates", _param0)
}

// ListenForUpdates indicates an expected call of ListenForUpdates
func (_mr *MockProtectorMockRecorder) ListenForUpdates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListenForUpdates", reflect.TypeOf((*MockProtector)(nil).ListenForUpdates), arg0)
}

// Protect mocks base method
func (_m *MockProtector) Protect(_param0 go_libp2p_transport.Conn) (go_libp2p_transport.Conn, error) {
	ret := _m.ctrl.Call(_m, "Protect", _param0)
	ret0, _ := ret[0].(go_libp2p_transport.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Protect indicates an expected call of Protect
func (_mr *MockProtectorMockRecorder) Protect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Protect", reflect.TypeOf((*MockProtector)(nil).Protect), arg0)
}

// MockStateAwareProtector is a mock of StateAwareProtector interface
type MockStateAwareProtector struct {
	ctrl     *gomock.Controller
	recorder *MockStateAwareProtectorMockRecorder
}

// MockStateAwareProtectorMockRecorder is the mock recorder for MockStateAwareProtector
type MockStateAwareProtectorMockRecorder struct {
	mock *MockStateAwareProtector
}

// NewMockStateAwareProtector creates a new mock instance
func NewMockStateAwareProtector(ctrl *gomock.Controller) *MockStateAwareProtector {
	mock := &MockStateAwareProtector{ctrl: ctrl}
	mock.recorder = &MockStateAwareProtectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStateAwareProtector) EXPECT() *MockStateAwareProtectorMockRecorder {
	return _m.recorder
}

// AllowedAddrs mocks base method
func (_m *MockStateAwareProtector) AllowedAddrs(_param0 context.Context) []go_multiaddr.Multiaddr {
	ret := _m.ctrl.Call(_m, "AllowedAddrs", _param0)
	ret0, _ := ret[0].([]go_multiaddr.Multiaddr)
	return ret0
}

// AllowedAddrs indicates an expected call of AllowedAddrs
func (_mr *MockStateAwareProtectorMockRecorder) AllowedAddrs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AllowedAddrs", reflect.TypeOf((*MockStateAwareProtector)(nil).AllowedAddrs), arg0)
}

// AllowedPeers mocks base method
func (_m *MockStateAwareProtector) AllowedPeers(_param0 context.Context) []go_libp2p_peer.ID {
	ret := _m.ctrl.Call(_m, "AllowedPeers", _param0)
	ret0, _ := ret[0].([]go_libp2p_peer.ID)
	return ret0
}

// AllowedPeers indicates an expected call of AllowedPeers
func (_mr *MockStateAwareProtectorMockRecorder) AllowedPeers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AllowedPeers", reflect.TypeOf((*MockStateAwareProtector)(nil).AllowedPeers), arg0)
}

// Fingerprint mocks base method
func (_m *MockStateAwareProtector) Fingerprint() []byte {
	ret := _m.ctrl.Call(_m, "Fingerprint")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Fingerprint indicates an expected call of Fingerprint
func (_mr *MockStateAwareProtectorMockRecorder) Fingerprint() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Fingerprint", reflect.TypeOf((*MockStateAwareProtector)(nil).Fingerprint))
}

// ListenForUpdates mocks base method
func (_m *MockStateAwareProtector) ListenForUpdates(_param0 <-chan protector.NetworkUpdate) {
	_m.ctrl.Call(_m, "ListenForUpdates", _param0)
}

// ListenForUpdates indicates an expected call of ListenForUpdates
func (_mr *MockStateAwareProtectorMockRecorder) ListenForUpdates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListenForUpdates", reflect.TypeOf((*MockStateAwareProtector)(nil).ListenForUpdates), arg0)
}

// Protect mocks base method
func (_m *MockStateAwareProtector) Protect(_param0 go_libp2p_transport.Conn) (go_libp2p_transport.Conn, error) {
	ret := _m.ctrl.Call(_m, "Protect", _param0)
	ret0, _ := ret[0].(go_libp2p_transport.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Protect indicates an expected call of Protect
func (_mr *MockStateAwareProtectorMockRecorder) Protect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Protect", reflect.TypeOf((*MockStateAwareProtector)(nil).Protect), arg0)
}

// SetNetworkState mocks base method
func (_m *MockStateAwareProtector) SetNetworkState(_param0 context.Context, _param1 protector.NetworkState) error {
	ret := _m.ctrl.Call(_m, "SetNetworkState", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNetworkState indicates an expected call of SetNetworkState
func (_mr *MockStateAwareProtectorMockRecorder) SetNetworkState(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetNetworkState", reflect.TypeOf((*MockStateAwareProtector)(nil).SetNetworkState), arg0, arg1)
}
