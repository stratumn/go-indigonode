// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/bootstrap/proposal (interfaces: Store)

package mockproposal

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proposal "github.com/stratumn/alice/core/protocol/bootstrap/proposal"
	go_libp2p_peer "gx/ipfs/QmcJukH2sAFjY3HdBKq35WDzWoL3UUu2gt9wdfqZTUyM74/go-libp2p-peer"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStore) EXPECT() *MockStoreMockRecorder {
	return _m.recorder
}

// Add mocks base method
func (_m *MockStore) Add(_param0 context.Context, _param1 *proposal.Request) error {
	ret := _m.ctrl.Call(_m, "Add", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (_mr *MockStoreMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockStore)(nil).Add), arg0, arg1)
}

// Get mocks base method
func (_m *MockStore) Get(_param0 context.Context, _param1 go_libp2p_peer.ID) (*proposal.Request, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1)
	ret0, _ := ret[0].(*proposal.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0, arg1)
}

// List mocks base method
func (_m *MockStore) List(_param0 context.Context) ([]*proposal.Request, error) {
	ret := _m.ctrl.Call(_m, "List", _param0)
	ret0, _ := ret[0].([]*proposal.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockStoreMockRecorder) List(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), arg0)
}

// Remove mocks base method
func (_m *MockStore) Remove(_param0 context.Context, _param1 go_libp2p_peer.ID) error {
	ret := _m.ctrl.Call(_m, "Remove", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (_mr *MockStoreMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Remove", reflect.TypeOf((*MockStore)(nil).Remove), arg0, arg1)
}
