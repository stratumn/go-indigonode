// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin/chain (interfaces: Chain)

package mockchain

import (
	gomock "github.com/golang/mock/gomock"
	chain "github.com/stratumn/alice/core/protocol/coin/chain"
	coin "github.com/stratumn/alice/pb/coin"
	reflect "reflect"
)

// MockChain is a mock of Chain interface
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockChain) EXPECT() *MockChainMockRecorder {
	return _m.recorder
}

// AddBlock mocks base method
func (_m *MockChain) AddBlock(_param0 *coin.Block) error {
	ret := _m.ctrl.Call(_m, "AddBlock", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlock indicates an expected call of AddBlock
func (_mr *MockChainMockRecorder) AddBlock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddBlock", reflect.TypeOf((*MockChain)(nil).AddBlock), arg0)
}

// Config mocks base method
func (_m *MockChain) Config() *chain.Config {
	ret := _m.ctrl.Call(_m, "Config")
	ret0, _ := ret[0].(*chain.Config)
	return ret0
}

// Config indicates an expected call of Config
func (_mr *MockChainMockRecorder) Config() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Config", reflect.TypeOf((*MockChain)(nil).Config))
}

// CurrentHeader mocks base method
func (_m *MockChain) CurrentHeader() *coin.Header {
	ret := _m.ctrl.Call(_m, "CurrentHeader")
	ret0, _ := ret[0].(*coin.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (_mr *MockChainMockRecorder) CurrentHeader() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CurrentHeader", reflect.TypeOf((*MockChain)(nil).CurrentHeader))
}

// GetBlock mocks base method
func (_m *MockChain) GetBlock(_param0 []byte, _param1 uint64) *coin.Block {
	ret := _m.ctrl.Call(_m, "GetBlock", _param0, _param1)
	ret0, _ := ret[0].(*coin.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (_mr *MockChainMockRecorder) GetBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetBlock", reflect.TypeOf((*MockChain)(nil).GetBlock), arg0, arg1)
}

// GetHeaderByHash mocks base method
func (_m *MockChain) GetHeaderByHash(_param0 []byte) *coin.Header {
	ret := _m.ctrl.Call(_m, "GetHeaderByHash", _param0)
	ret0, _ := ret[0].(*coin.Header)
	return ret0
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (_mr *MockChainMockRecorder) GetHeaderByHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockChain)(nil).GetHeaderByHash), arg0)
}

// GetHeaderByNumber mocks base method
func (_m *MockChain) GetHeaderByNumber(_param0 uint64) []*coin.Header {
	ret := _m.ctrl.Call(_m, "GetHeaderByNumber", _param0)
	ret0, _ := ret[0].([]*coin.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (_mr *MockChainMockRecorder) GetHeaderByNumber(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockChain)(nil).GetHeaderByNumber), arg0)
}
