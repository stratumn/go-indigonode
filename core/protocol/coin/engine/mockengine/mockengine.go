// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin/engine (interfaces: Engine)

package mockengine

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	chain "github.com/stratumn/alice/core/protocol/coin/chain"
	state "github.com/stratumn/alice/core/protocol/coin/state"
	coin "github.com/stratumn/alice/pb/coin"
	reflect "reflect"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return _m.recorder
}

// Finalize mocks base method
func (_m *MockEngine) Finalize(_param0 chain.Reader, _param1 *coin.Header, _param2 *state.State, _param3 []*coin.Transaction) (*coin.Block, error) {
	ret := _m.ctrl.Call(_m, "Finalize", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*coin.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finalize indicates an expected call of Finalize
func (_mr *MockEngineMockRecorder) Finalize(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Finalize", reflect.TypeOf((*MockEngine)(nil).Finalize), arg0, arg1, arg2, arg3)
}

// Prepare mocks base method
func (_m *MockEngine) Prepare(_param0 chain.Reader, _param1 *coin.Header) error {
	ret := _m.ctrl.Call(_m, "Prepare", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare
func (_mr *MockEngineMockRecorder) Prepare(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Prepare", reflect.TypeOf((*MockEngine)(nil).Prepare), arg0, arg1)
}

// VerifyHeader mocks base method
func (_m *MockEngine) VerifyHeader(_param0 chain.Reader, _param1 *coin.Header) error {
	ret := _m.ctrl.Call(_m, "VerifyHeader", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader
func (_mr *MockEngineMockRecorder) VerifyHeader(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VerifyHeader", reflect.TypeOf((*MockEngine)(nil).VerifyHeader), arg0, arg1)
}

// VerifyHeaders mocks base method
func (_m *MockEngine) VerifyHeaders(_param0 context.Context, _param1 chain.Reader, _param2 []*coin.Header) <-chan error {
	ret := _m.ctrl.Call(_m, "VerifyHeaders", _param0, _param1, _param2)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// VerifyHeaders indicates an expected call of VerifyHeaders
func (_mr *MockEngineMockRecorder) VerifyHeaders(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VerifyHeaders", reflect.TypeOf((*MockEngine)(nil).VerifyHeaders), arg0, arg1, arg2)
}
