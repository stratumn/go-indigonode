// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin/gossip (interfaces: Gossip)

package mockgossip

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	coin "github.com/stratumn/alice/pb/coin"
	reflect "reflect"
)

// MockGossip is a mock of Gossip interface
type MockGossip struct {
	ctrl     *gomock.Controller
	recorder *MockGossipMockRecorder
}

// MockGossipMockRecorder is the mock recorder for MockGossip
type MockGossipMockRecorder struct {
	mock *MockGossip
}

// NewMockGossip creates a new mock instance
func NewMockGossip(ctrl *gomock.Controller) *MockGossip {
	mock := &MockGossip{ctrl: ctrl}
	mock.recorder = &MockGossipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockGossip) EXPECT() *MockGossipMockRecorder {
	return _m.recorder
}

// AddBlockListener mocks base method
func (_m *MockGossip) AddBlockListener() chan *coin.Header {
	ret := _m.ctrl.Call(_m, "AddBlockListener")
	ret0, _ := ret[0].(chan *coin.Header)
	return ret0
}

// AddBlockListener indicates an expected call of AddBlockListener
func (_mr *MockGossipMockRecorder) AddBlockListener() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddBlockListener", reflect.TypeOf((*MockGossip)(nil).AddBlockListener))
}

// Close mocks base method
func (_m *MockGossip) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockGossipMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockGossip)(nil).Close))
}

// ListenBlock mocks base method
func (_m *MockGossip) ListenBlock(_param0 context.Context, _param1 func(*coin.Block) error) error {
	ret := _m.ctrl.Call(_m, "ListenBlock", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenBlock indicates an expected call of ListenBlock
func (_mr *MockGossipMockRecorder) ListenBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListenBlock", reflect.TypeOf((*MockGossip)(nil).ListenBlock), arg0, arg1)
}

// ListenTx mocks base method
func (_m *MockGossip) ListenTx(_param0 context.Context, _param1 func(*coin.Transaction) error) error {
	ret := _m.ctrl.Call(_m, "ListenTx", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenTx indicates an expected call of ListenTx
func (_mr *MockGossipMockRecorder) ListenTx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListenTx", reflect.TypeOf((*MockGossip)(nil).ListenTx), arg0, arg1)
}

// PublishBlock mocks base method
func (_m *MockGossip) PublishBlock(_param0 *coin.Block) error {
	ret := _m.ctrl.Call(_m, "PublishBlock", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBlock indicates an expected call of PublishBlock
func (_mr *MockGossipMockRecorder) PublishBlock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PublishBlock", reflect.TypeOf((*MockGossip)(nil).PublishBlock), arg0)
}

// PublishTx mocks base method
func (_m *MockGossip) PublishTx(_param0 *coin.Transaction) error {
	ret := _m.ctrl.Call(_m, "PublishTx", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTx indicates an expected call of PublishTx
func (_mr *MockGossipMockRecorder) PublishTx(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PublishTx", reflect.TypeOf((*MockGossip)(nil).PublishTx), arg0)
}
