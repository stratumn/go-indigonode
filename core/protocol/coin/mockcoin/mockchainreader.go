// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin (interfaces: ChainReader)

package mockcoin

import (
	gomock "github.com/golang/mock/gomock"
	coin "github.com/stratumn/alice/core/protocol/coin"
	coin0 "github.com/stratumn/alice/pb/coin"
	reflect "reflect"
)

// MockChainReader is a mock of ChainReader interface
type MockChainReader struct {
	ctrl     *gomock.Controller
	recorder *MockChainReaderMockRecorder
}

// MockChainReaderMockRecorder is the mock recorder for MockChainReader
type MockChainReaderMockRecorder struct {
	mock *MockChainReader
}

// NewMockChainReader creates a new mock instance
func NewMockChainReader(ctrl *gomock.Controller) *MockChainReader {
	mock := &MockChainReader{ctrl: ctrl}
	mock.recorder = &MockChainReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockChainReader) EXPECT() *MockChainReaderMockRecorder {
	return _m.recorder
}

// Config mocks base method
func (_m *MockChainReader) Config() *coin.ChainConfig {
	ret := _m.ctrl.Call(_m, "Config")
	ret0, _ := ret[0].(*coin.ChainConfig)
	return ret0
}

// Config indicates an expected call of Config
func (_mr *MockChainReaderMockRecorder) Config() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Config", reflect.TypeOf((*MockChainReader)(nil).Config))
}

// CurrentHeader mocks base method
func (_m *MockChainReader) CurrentHeader() *coin0.Header {
	ret := _m.ctrl.Call(_m, "CurrentHeader")
	ret0, _ := ret[0].(*coin0.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (_mr *MockChainReaderMockRecorder) CurrentHeader() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CurrentHeader", reflect.TypeOf((*MockChainReader)(nil).CurrentHeader))
}

// GetBlock mocks base method
func (_m *MockChainReader) GetBlock(_param0 []byte, _param1 uint64) *coin0.Block {
	ret := _m.ctrl.Call(_m, "GetBlock", _param0, _param1)
	ret0, _ := ret[0].(*coin0.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (_mr *MockChainReaderMockRecorder) GetBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetBlock", reflect.TypeOf((*MockChainReader)(nil).GetBlock), arg0, arg1)
}

// GetHeaderByHash mocks base method
func (_m *MockChainReader) GetHeaderByHash(_param0 []byte) *coin0.Header {
	ret := _m.ctrl.Call(_m, "GetHeaderByHash", _param0)
	ret0, _ := ret[0].(*coin0.Header)
	return ret0
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (_mr *MockChainReaderMockRecorder) GetHeaderByHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockChainReader)(nil).GetHeaderByHash), arg0)
}

// GetHeaderByNumber mocks base method
func (_m *MockChainReader) GetHeaderByNumber(_param0 uint64) []*coin0.Header {
	ret := _m.ctrl.Call(_m, "GetHeaderByNumber", _param0)
	ret0, _ := ret[0].([]*coin0.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (_mr *MockChainReaderMockRecorder) GetHeaderByNumber(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockChainReader)(nil).GetHeaderByNumber), arg0)
}
