// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin/processor (interfaces: Processor)

// Package mockprocessor is a generated GoMock package.
package mockprocessor

import (
	gomock "github.com/golang/mock/gomock"
	chain "github.com/stratumn/alice/core/protocol/coin/chain"
	state "github.com/stratumn/alice/core/protocol/coin/state"
	coin "github.com/stratumn/alice/pb/coin"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockProcessor) Process(arg0 *coin.Block, arg1 state.State, arg2 chain.Writer) error {
	ret := m.ctrl.Call(m, "Process", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockProcessorMockRecorder) Process(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessor)(nil).Process), arg0, arg1, arg2)
}

// Rollback mocks base method
func (m *MockProcessor) Rollback(arg0 *coin.Block, arg1 state.State, arg2 chain.Chain) error {
	ret := m.ctrl.Call(m, "Rollback", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockProcessorMockRecorder) Rollback(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockProcessor)(nil).Rollback), arg0, arg1, arg2)
}

// RollbackTo mocks base method
func (m *MockProcessor) RollbackTo(arg0 []byte, arg1 state.State, arg2 chain.Chain) error {
	ret := m.ctrl.Call(m, "RollbackTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo
func (mr *MockProcessorMockRecorder) RollbackTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockProcessor)(nil).RollbackTo), arg0, arg1, arg2)
}
