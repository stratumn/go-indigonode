// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin/processor (interfaces: Processor)

package mockprocessor

import (
	gomock "github.com/golang/mock/gomock"
	chain "github.com/stratumn/alice/core/protocol/coin/chain"
	state "github.com/stratumn/alice/core/protocol/coin/state"
	coin "github.com/stratumn/alice/pb/coin"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return _m.recorder
}

// Process mocks base method
func (_m *MockProcessor) Process(_param0 *coin.Block, _param1 state.Writer, _param2 chain.Writer) error {
	ret := _m.ctrl.Call(_m, "Process", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (_mr *MockProcessorMockRecorder) Process(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Process", reflect.TypeOf((*MockProcessor)(nil).Process), arg0, arg1, arg2)
}
