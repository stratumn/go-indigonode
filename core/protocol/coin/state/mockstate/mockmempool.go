// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin/state (interfaces: Mempool)

// Package mockstate is a generated GoMock package.
package mockstate

import (
	gomock "github.com/golang/mock/gomock"
	coin "github.com/stratumn/alice/pb/coin"
	reflect "reflect"
)

// MockMempool is a mock of Mempool interface
type MockMempool struct {
	ctrl     *gomock.Controller
	recorder *MockMempoolMockRecorder
}

// MockMempoolMockRecorder is the mock recorder for MockMempool
type MockMempoolMockRecorder struct {
	mock *MockMempool
}

// NewMockMempool creates a new mock instance
func NewMockMempool(ctrl *gomock.Controller) *MockMempool {
	mock := &MockMempool{ctrl: ctrl}
	mock.recorder = &MockMempoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMempool) EXPECT() *MockMempoolMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method
func (m *MockMempool) AddTransaction(arg0 *coin.Transaction) error {
	ret := m.ctrl.Call(m, "AddTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction
func (mr *MockMempoolMockRecorder) AddTransaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockMempool)(nil).AddTransaction), arg0)
}

// PopTransaction mocks base method
func (m *MockMempool) PopTransaction() *coin.Transaction {
	ret := m.ctrl.Call(m, "PopTransaction")
	ret0, _ := ret[0].(*coin.Transaction)
	return ret0
}

// PopTransaction indicates an expected call of PopTransaction
func (mr *MockMempoolMockRecorder) PopTransaction() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopTransaction", reflect.TypeOf((*MockMempool)(nil).PopTransaction))
}
