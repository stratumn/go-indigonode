// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/coin/synchronizer (interfaces: Synchronizer)

// Package mocksynchronizer is a generated GoMock package.
package mocksynchronizer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chain "github.com/stratumn/alice/core/protocol/coin/chain"
	coin "github.com/stratumn/alice/pb/coin"
)

// MockSynchronizer is a mock of Synchronizer interface
type MockSynchronizer struct {
	ctrl     *gomock.Controller
	recorder *MockSynchronizerMockRecorder
}

// MockSynchronizerMockRecorder is the mock recorder for MockSynchronizer
type MockSynchronizerMockRecorder struct {
	mock *MockSynchronizer
}

// NewMockSynchronizer creates a new mock instance
func NewMockSynchronizer(ctrl *gomock.Controller) *MockSynchronizer {
	mock := &MockSynchronizer{ctrl: ctrl}
	mock.recorder = &MockSynchronizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSynchronizer) EXPECT() *MockSynchronizerMockRecorder {
	return m.recorder
}

// Synchronize mocks base method
func (m *MockSynchronizer) Synchronize(arg0 context.Context, arg1 []byte, arg2 chain.Reader) (<-chan *coin.Block, <-chan error) {
	ret := m.ctrl.Call(m, "Synchronize", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan *coin.Block)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Synchronize indicates an expected call of Synchronize
func (mr *MockSynchronizerMockRecorder) Synchronize(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synchronize", reflect.TypeOf((*MockSynchronizer)(nil).Synchronize), arg0, arg1, arg2)
}
