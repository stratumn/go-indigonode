// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/indigo/store (interfaces: NetworkManager)

// Package mocknetworkmanager is a generated GoMock package.
package mocknetworkmanager

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cs "github.com/stratumn/go-indigocore/cs"
	go_libp2p_peer "gx/ipfs/QmcJukH2sAFjY3HdBKq35WDzWoL3UUu2gt9wdfqZTUyM74/go-libp2p-peer"
	go_libp2p_host "gx/ipfs/QmfZTdmunzKzAGJrSvXXQbQ5kLLUiEMX5vdwux7iXkdk7D/go-libp2p-host"
	reflect "reflect"
)

// MockNetworkManager is a mock of NetworkManager interface
type MockNetworkManager struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkManagerMockRecorder
}

// MockNetworkManagerMockRecorder is the mock recorder for MockNetworkManager
type MockNetworkManagerMockRecorder struct {
	mock *MockNetworkManager
}

// NewMockNetworkManager creates a new mock instance
func NewMockNetworkManager(ctrl *gomock.Controller) *MockNetworkManager {
	mock := &MockNetworkManager{ctrl: ctrl}
	mock.recorder = &MockNetworkManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkManager) EXPECT() *MockNetworkManagerMockRecorder {
	return m.recorder
}

// AddListener mocks base method
func (m *MockNetworkManager) AddListener() <-chan *cs.Segment {
	ret := m.ctrl.Call(m, "AddListener")
	ret0, _ := ret[0].(<-chan *cs.Segment)
	return ret0
}

// AddListener indicates an expected call of AddListener
func (mr *MockNetworkManagerMockRecorder) AddListener() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockNetworkManager)(nil).AddListener))
}

// Join mocks base method
func (m *MockNetworkManager) Join(arg0 context.Context, arg1 string, arg2 go_libp2p_host.Host) error {
	ret := m.ctrl.Call(m, "Join", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockNetworkManagerMockRecorder) Join(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockNetworkManager)(nil).Join), arg0, arg1, arg2)
}

// Leave mocks base method
func (m *MockNetworkManager) Leave(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "Leave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave
func (mr *MockNetworkManagerMockRecorder) Leave(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockNetworkManager)(nil).Leave), arg0, arg1)
}

// Listen mocks base method
func (m *MockNetworkManager) Listen(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "Listen", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockNetworkManagerMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockNetworkManager)(nil).Listen), arg0)
}

// NodeID mocks base method
func (m *MockNetworkManager) NodeID() go_libp2p_peer.ID {
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(go_libp2p_peer.ID)
	return ret0
}

// NodeID indicates an expected call of NodeID
func (mr *MockNetworkManagerMockRecorder) NodeID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockNetworkManager)(nil).NodeID))
}

// Publish mocks base method
func (m *MockNetworkManager) Publish(arg0 context.Context, arg1 *cs.Link) error {
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockNetworkManagerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNetworkManager)(nil).Publish), arg0, arg1)
}

// RemoveListener mocks base method
func (m *MockNetworkManager) RemoveListener(arg0 <-chan *cs.Segment) {
	m.ctrl.Call(m, "RemoveListener", arg0)
}

// RemoveListener indicates an expected call of RemoveListener
func (mr *MockNetworkManagerMockRecorder) RemoveListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockNetworkManager)(nil).RemoveListener), arg0)
}
