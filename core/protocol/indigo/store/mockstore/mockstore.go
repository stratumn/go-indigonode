// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-indigocore/store (interfaces: Adapter)

package mockstore

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cs "github.com/stratumn/go-indigocore/cs"
	store "github.com/stratumn/go-indigocore/store"
	types "github.com/stratumn/go-indigocore/types"
	reflect "reflect"
)

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return _m.recorder
}

// AddEvidence mocks base method
func (_m *MockAdapter) AddEvidence(_param0 context.Context, _param1 *types.Bytes32, _param2 *cs.Evidence) error {
	ret := _m.ctrl.Call(_m, "AddEvidence", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvidence indicates an expected call of AddEvidence
func (_mr *MockAdapterMockRecorder) AddEvidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddEvidence", reflect.TypeOf((*MockAdapter)(nil).AddEvidence), arg0, arg1, arg2)
}

// AddStoreEventChannel mocks base method
func (_m *MockAdapter) AddStoreEventChannel(_param0 chan *store.Event) {
	_m.ctrl.Call(_m, "AddStoreEventChannel", _param0)
}

// AddStoreEventChannel indicates an expected call of AddStoreEventChannel
func (_mr *MockAdapterMockRecorder) AddStoreEventChannel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddStoreEventChannel", reflect.TypeOf((*MockAdapter)(nil).AddStoreEventChannel), arg0)
}

// CreateLink mocks base method
func (_m *MockAdapter) CreateLink(_param0 context.Context, _param1 *cs.Link) (*types.Bytes32, error) {
	ret := _m.ctrl.Call(_m, "CreateLink", _param0, _param1)
	ret0, _ := ret[0].(*types.Bytes32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink
func (_mr *MockAdapterMockRecorder) CreateLink(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateLink", reflect.TypeOf((*MockAdapter)(nil).CreateLink), arg0, arg1)
}

// FindSegments mocks base method
func (_m *MockAdapter) FindSegments(_param0 context.Context, _param1 *store.SegmentFilter) (cs.SegmentSlice, error) {
	ret := _m.ctrl.Call(_m, "FindSegments", _param0, _param1)
	ret0, _ := ret[0].(cs.SegmentSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegments indicates an expected call of FindSegments
func (_mr *MockAdapterMockRecorder) FindSegments(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindSegments", reflect.TypeOf((*MockAdapter)(nil).FindSegments), arg0, arg1)
}

// GetEvidences mocks base method
func (_m *MockAdapter) GetEvidences(_param0 context.Context, _param1 *types.Bytes32) (*cs.Evidences, error) {
	ret := _m.ctrl.Call(_m, "GetEvidences", _param0, _param1)
	ret0, _ := ret[0].(*cs.Evidences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidences indicates an expected call of GetEvidences
func (_mr *MockAdapterMockRecorder) GetEvidences(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetEvidences", reflect.TypeOf((*MockAdapter)(nil).GetEvidences), arg0, arg1)
}

// GetInfo mocks base method
func (_m *MockAdapter) GetInfo(_param0 context.Context) (interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetInfo", _param0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo
func (_mr *MockAdapterMockRecorder) GetInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetInfo", reflect.TypeOf((*MockAdapter)(nil).GetInfo), arg0)
}

// GetMapIDs mocks base method
func (_m *MockAdapter) GetMapIDs(_param0 context.Context, _param1 *store.MapFilter) ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetMapIDs", _param0, _param1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapIDs indicates an expected call of GetMapIDs
func (_mr *MockAdapterMockRecorder) GetMapIDs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetMapIDs", reflect.TypeOf((*MockAdapter)(nil).GetMapIDs), arg0, arg1)
}

// GetSegment mocks base method
func (_m *MockAdapter) GetSegment(_param0 context.Context, _param1 *types.Bytes32) (*cs.Segment, error) {
	ret := _m.ctrl.Call(_m, "GetSegment", _param0, _param1)
	ret0, _ := ret[0].(*cs.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegment indicates an expected call of GetSegment
func (_mr *MockAdapterMockRecorder) GetSegment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetSegment", reflect.TypeOf((*MockAdapter)(nil).GetSegment), arg0, arg1)
}

// NewBatch mocks base method
func (_m *MockAdapter) NewBatch(_param0 context.Context) (store.Batch, error) {
	ret := _m.ctrl.Call(_m, "NewBatch", _param0)
	ret0, _ := ret[0].(store.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBatch indicates an expected call of NewBatch
func (_mr *MockAdapterMockRecorder) NewBatch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewBatch", reflect.TypeOf((*MockAdapter)(nil).NewBatch), arg0)
}
