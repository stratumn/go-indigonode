// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/indigo/store (interfaces: SyncEngine)

package mocksync

import (
	context "context"
	go_libp2p_peer "gx/ipfs/QmZoWKhxUmZ2seW4BzX6fJkNR8hh9PsGModr7q171yq2SS/go-libp2p-peer"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cs "github.com/stratumn/go-indigocore/cs"
	store "github.com/stratumn/go-indigocore/store"
)

// MockSyncEngine is a mock of SyncEngine interface
type MockSyncEngine struct {
	ctrl     *gomock.Controller
	recorder *MockSyncEngineMockRecorder
}

// MockSyncEngineMockRecorder is the mock recorder for MockSyncEngine
type MockSyncEngineMockRecorder struct {
	mock *MockSyncEngine
}

// NewMockSyncEngine creates a new mock instance
func NewMockSyncEngine(ctrl *gomock.Controller) *MockSyncEngine {
	mock := &MockSyncEngine{ctrl: ctrl}
	mock.recorder = &MockSyncEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSyncEngine) EXPECT() *MockSyncEngineMockRecorder {
	return _m.recorder
}

// GetMissingLinks mocks base method
func (_m *MockSyncEngine) GetMissingLinks(_param0 context.Context, _param1 go_libp2p_peer.ID, _param2 *cs.Link, _param3 store.SegmentReader) ([]*cs.Link, error) {
	ret := _m.ctrl.Call(_m, "GetMissingLinks", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].([]*cs.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMissingLinks indicates an expected call of GetMissingLinks
func (_mr *MockSyncEngineMockRecorder) GetMissingLinks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetMissingLinks", reflect.TypeOf((*MockSyncEngine)(nil).GetMissingLinks), arg0, arg1, arg2, arg3)
}
