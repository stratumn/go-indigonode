// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/go-indigocore/validator (interfaces: GovernanceManager)

// Package mockvalidator is a generated GoMock package.
package mockvalidator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	validator "github.com/stratumn/go-indigocore/validator"
)

// MockGovernanceManager is a mock of GovernanceManager interface
type MockGovernanceManager struct {
	ctrl     *gomock.Controller
	recorder *MockGovernanceManagerMockRecorder
}

// MockGovernanceManagerMockRecorder is the mock recorder for MockGovernanceManager
type MockGovernanceManagerMockRecorder struct {
	mock *MockGovernanceManager
}

// NewMockGovernanceManager creates a new mock instance
func NewMockGovernanceManager(ctrl *gomock.Controller) *MockGovernanceManager {
	mock := &MockGovernanceManager{ctrl: ctrl}
	mock.recorder = &MockGovernanceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGovernanceManager) EXPECT() *MockGovernanceManagerMockRecorder {
	return m.recorder
}

// AddListener mocks base method
func (m *MockGovernanceManager) AddListener() <-chan validator.Validator {
	ret := m.ctrl.Call(m, "AddListener")
	ret0, _ := ret[0].(<-chan validator.Validator)
	return ret0
}

// AddListener indicates an expected call of AddListener
func (mr *MockGovernanceManagerMockRecorder) AddListener() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockGovernanceManager)(nil).AddListener))
}

// Current mocks base method
func (m *MockGovernanceManager) Current() validator.Validator {
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(validator.Validator)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockGovernanceManagerMockRecorder) Current() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockGovernanceManager)(nil).Current))
}

// ListenAndUpdate mocks base method
func (m *MockGovernanceManager) ListenAndUpdate(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "ListenAndUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndUpdate indicates an expected call of ListenAndUpdate
func (mr *MockGovernanceManagerMockRecorder) ListenAndUpdate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndUpdate", reflect.TypeOf((*MockGovernanceManager)(nil).ListenAndUpdate), arg0)
}

// RemoveListener mocks base method
func (m *MockGovernanceManager) RemoveListener(arg0 <-chan validator.Validator) {
	m.ctrl.Call(m, "RemoveListener", arg0)
}

// RemoveListener indicates an expected call of RemoveListener
func (mr *MockGovernanceManagerMockRecorder) RemoveListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockGovernanceManager)(nil).RemoveListener), arg0)
}
