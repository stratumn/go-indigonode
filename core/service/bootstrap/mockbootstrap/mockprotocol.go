// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/protocol/bootstrap (interfaces: Handler)

// Package mockbootstrap is a generated GoMock package.
package mockbootstrap

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	go_multiaddr "gx/ipfs/QmWWQ2Txc2c6tqjsBpzg5Ar652cHPGNsQQp2SejkNmkUMb/go-multiaddr"
	go_libp2p_peer "gx/ipfs/QmcJukH2sAFjY3HdBKq35WDzWoL3UUu2gt9wdfqZTUyM74/go-libp2p-peer"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockHandler) Accept(arg0 context.Context, arg1 go_libp2p_peer.ID) error {
	ret := m.ctrl.Call(m, "Accept", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockHandlerMockRecorder) Accept(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockHandler)(nil).Accept), arg0, arg1)
}

// AddNode mocks base method
func (m *MockHandler) AddNode(arg0 context.Context, arg1 go_libp2p_peer.ID, arg2 go_multiaddr.Multiaddr, arg3 []byte) error {
	ret := m.ctrl.Call(m, "AddNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNode indicates an expected call of AddNode
func (mr *MockHandlerMockRecorder) AddNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockHandler)(nil).AddNode), arg0, arg1, arg2, arg3)
}

// Close mocks base method
func (m *MockHandler) Close(arg0 context.Context) {
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close
func (mr *MockHandlerMockRecorder) Close(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHandler)(nil).Close), arg0)
}

// Reject mocks base method
func (m *MockHandler) Reject(arg0 context.Context, arg1 go_libp2p_peer.ID) error {
	ret := m.ctrl.Call(m, "Reject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject
func (mr *MockHandlerMockRecorder) Reject(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockHandler)(nil).Reject), arg0, arg1)
}
