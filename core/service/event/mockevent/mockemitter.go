// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/service/event (interfaces: Emitter)

// Package mockevent is a generated GoMock package.
package mockevent

import (
	gomock "github.com/golang/mock/gomock"
	event "github.com/stratumn/alice/grpc/event"
	reflect "reflect"
)

// MockEmitter is a mock of Emitter interface
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// AddListener mocks base method
func (m *MockEmitter) AddListener(arg0 string) (<-chan *event.Event, error) {
	ret := m.ctrl.Call(m, "AddListener", arg0)
	ret0, _ := ret[0].(<-chan *event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddListener indicates an expected call of AddListener
func (mr *MockEmitterMockRecorder) AddListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockEmitter)(nil).AddListener), arg0)
}

// Close mocks base method
func (m *MockEmitter) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockEmitterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEmitter)(nil).Close))
}

// Emit mocks base method
func (m *MockEmitter) Emit(arg0 *event.Event) {
	m.ctrl.Call(m, "Emit", arg0)
}

// Emit indicates an expected call of Emit
func (mr *MockEmitterMockRecorder) Emit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEmitter)(nil).Emit), arg0)
}

// GetListenersCount mocks base method
func (m *MockEmitter) GetListenersCount(arg0 string) int {
	ret := m.ctrl.Call(m, "GetListenersCount", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetListenersCount indicates an expected call of GetListenersCount
func (mr *MockEmitterMockRecorder) GetListenersCount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListenersCount", reflect.TypeOf((*MockEmitter)(nil).GetListenersCount), arg0)
}

// RemoveListener mocks base method
func (m *MockEmitter) RemoveListener(arg0 <-chan *event.Event) {
	m.ctrl.Call(m, "RemoveListener", arg0)
}

// RemoveListener indicates an expected call of RemoveListener
func (mr *MockEmitterMockRecorder) RemoveListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockEmitter)(nil).RemoveListener), arg0)
}
