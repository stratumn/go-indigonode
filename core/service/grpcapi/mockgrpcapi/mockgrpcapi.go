// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/service/grpcapi (interfaces: Manager,Registrable)

package mockgrpcapi

import (
	gomock "github.com/golang/mock/gomock"
	manager "github.com/stratumn/alice/core/manager"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager) EXPECT() *MockManagerMockRecorder {
	return _m.recorder
}

// Find mocks base method
func (_m *MockManager) Find(_param0 string) (manager.Service, error) {
	ret := _m.ctrl.Call(_m, "Find", _param0)
	ret0, _ := ret[0].(manager.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (_mr *MockManagerMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Find", reflect.TypeOf((*MockManager)(nil).Find), arg0)
}

// List mocks base method
func (_m *MockManager) List() []string {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List
func (_mr *MockManagerMockRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockManager)(nil).List))
}

// MockRegistrable is a mock of Registrable interface
type MockRegistrable struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrableMockRecorder
}

// MockRegistrableMockRecorder is the mock recorder for MockRegistrable
type MockRegistrableMockRecorder struct {
	mock *MockRegistrable
}

// NewMockRegistrable creates a new mock instance
func NewMockRegistrable(ctrl *gomock.Controller) *MockRegistrable {
	mock := &MockRegistrable{ctrl: ctrl}
	mock.recorder = &MockRegistrableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRegistrable) EXPECT() *MockRegistrableMockRecorder {
	return _m.recorder
}

// AddToGRPCServer mocks base method
func (_m *MockRegistrable) AddToGRPCServer(_param0 *grpc.Server) {
	_m.ctrl.Call(_m, "AddToGRPCServer", _param0)
}

// AddToGRPCServer indicates an expected call of AddToGRPCServer
func (_mr *MockRegistrableMockRecorder) AddToGRPCServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddToGRPCServer", reflect.TypeOf((*MockRegistrable)(nil).AddToGRPCServer), arg0)
}
