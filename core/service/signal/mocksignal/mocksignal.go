// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/core/service/signal (interfaces: Manager)

package mocksignal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager) EXPECT() *MockManagerMockRecorder {
	return _m.recorder
}

// StopAll mocks base method
func (_m *MockManager) StopAll() {
	_m.ctrl.Call(_m, "StopAll")
}

// StopAll indicates an expected call of StopAll
func (_mr *MockManagerMockRecorder) StopAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StopAll", reflect.TypeOf((*MockManager)(nil).StopAll))
}
