// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/bootstrap/bootstrap.proto

/*
	Package bootstrap is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/grpc/bootstrap/bootstrap.proto

	It has these top-level messages:
*/
package bootstrap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import stratumn_alice_pb_bootstrap "github.com/stratumn/alice/pb/bootstrap"

import context "context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bootstrap service

type BootstrapClient interface {
	// Propose adding a node to the network.
	AddNode(ctx context.Context, in *stratumn_alice_pb_bootstrap.NodeIdentity, opts ...grpc.CallOption) (*stratumn_alice_pb_bootstrap.Ack, error)
	// Accept a proposal to add or remove a network node.
	Accept(ctx context.Context, in *stratumn_alice_pb_bootstrap.PeerID, opts ...grpc.CallOption) (*stratumn_alice_pb_bootstrap.Ack, error)
}

type bootstrapClient struct {
	cc *grpc.ClientConn
}

func NewBootstrapClient(cc *grpc.ClientConn) BootstrapClient {
	return &bootstrapClient{cc}
}

func (c *bootstrapClient) AddNode(ctx context.Context, in *stratumn_alice_pb_bootstrap.NodeIdentity, opts ...grpc.CallOption) (*stratumn_alice_pb_bootstrap.Ack, error) {
	out := new(stratumn_alice_pb_bootstrap.Ack)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.bootstrap.Bootstrap/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) Accept(ctx context.Context, in *stratumn_alice_pb_bootstrap.PeerID, opts ...grpc.CallOption) (*stratumn_alice_pb_bootstrap.Ack, error) {
	out := new(stratumn_alice_pb_bootstrap.Ack)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.bootstrap.Bootstrap/Accept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bootstrap service

type BootstrapServer interface {
	// Propose adding a node to the network.
	AddNode(context.Context, *stratumn_alice_pb_bootstrap.NodeIdentity) (*stratumn_alice_pb_bootstrap.Ack, error)
	// Accept a proposal to add or remove a network node.
	Accept(context.Context, *stratumn_alice_pb_bootstrap.PeerID) (*stratumn_alice_pb_bootstrap.Ack, error)
}

func RegisterBootstrapServer(s *grpc.Server, srv BootstrapServer) {
	s.RegisterService(&_Bootstrap_serviceDesc, srv)
}

func _Bootstrap_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stratumn_alice_pb_bootstrap.NodeIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.bootstrap.Bootstrap/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).AddNode(ctx, req.(*stratumn_alice_pb_bootstrap.NodeIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stratumn_alice_pb_bootstrap.PeerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.bootstrap.Bootstrap/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).Accept(ctx, req.(*stratumn_alice_pb_bootstrap.PeerID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bootstrap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.bootstrap.Bootstrap",
	HandlerType: (*BootstrapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _Bootstrap_AddNode_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Bootstrap_Accept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/stratumn/alice/grpc/bootstrap/bootstrap.proto",
}

func init() {
	proto.RegisterFile("github.com/stratumn/alice/grpc/bootstrap/bootstrap.proto", fileDescriptorBootstrap)
}

var fileDescriptorBootstrap = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0xc6, 0x3d, 0x8b, 0x88, 0x57, 0x5e, 0x15, 0x02, 0x1e, 0x83, 0x5a, 0x28, 0xc8, 0x1e, 0x46,
	0x14, 0xc1, 0xea, 0x42, 0x9a, 0x34, 0x92, 0xda, 0x6e, 0x6f, 0x77, 0xb8, 0x1c, 0xc9, 0xed, 0x2c,
	0x9b, 0x89, 0x7f, 0x3a, 0x49, 0xe1, 0x2b, 0xe8, 0x8b, 0xe4, 0x1d, 0x2c, 0x7d, 0x04, 0x39, 0x5f,
	0x44, 0xf6, 0x8e, 0x24, 0x20, 0x24, 0xa6, 0x58, 0x18, 0x86, 0x1f, 0xdf, 0xf7, 0x63, 0x27, 0xbc,
	0xcd, 0x0b, 0x1e, 0xcd, 0x32, 0xa1, 0xa8, 0x4c, 0xa6, 0xec, 0x24, 0xcf, 0x4a, 0x93, 0xc8, 0x49,
	0xa1, 0x30, 0xc9, 0x9d, 0x55, 0x49, 0x46, 0xc4, 0x7e, 0x6f, 0xd7, 0x93, 0xb0, 0x8e, 0x98, 0xa2,
	0xa3, 0x25, 0x2e, 0x6a, 0x5c, 0x78, 0x5c, 0xac, 0xa0, 0xce, 0xc5, 0x3f, 0xc1, 0xf8, 0xcc, 0xfe,
	0x35, 0x61, 0x9d, 0x9b, 0xcd, 0xb4, 0xcd, 0x36, 0x4b, 0x74, 0xdf, 0xf7, 0xc3, 0xc3, 0xde, 0x72,
	0x17, 0xbd, 0x06, 0xe1, 0x41, 0xaa, 0xf5, 0x3d, 0x69, 0x8c, 0xce, 0xc5, 0x1f, 0x3f, 0x9b, 0xad,
	0xed, 0x84, 0x47, 0x06, 0x1a, 0x0d, 0x17, 0xfc, 0xd2, 0x81, 0xad, 0x68, 0xaa, 0xc6, 0xc7, 0x67,
	0xf3, 0x45, 0xfb, 0x74, 0xe8, 0xc8, 0xd2, 0x14, 0x41, 0x6a, 0x5d, 0x98, 0x1c, 0x24, 0x18, 0xd2,
	0x08, 0x4c, 0xc0, 0x23, 0x04, 0x83, 0xfc, 0x44, 0x6e, 0x1c, 0xbd, 0x05, 0x61, 0x2b, 0x55, 0x0a,
	0x2d, 0x47, 0x27, 0x5b, 0x63, 0x87, 0x88, 0x6e, 0xd0, 0xdf, 0xa1, 0xfb, 0x7a, 0xbe, 0x68, 0x5f,
	0x36, 0x91, 0x20, 0xc1, 0xd6, 0x12, 0x72, 0xe2, 0x7b, 0xa5, 0xd6, 0x40, 0x0e, 0x1c, 0x96, 0xf4,
	0x88, 0xde, 0xa7, 0x71, 0xa8, 0xbd, 0x7a, 0xfd, 0xcf, 0x2a, 0x0e, 0xbe, 0xaa, 0x38, 0xf8, 0xae,
	0xe2, 0xe0, 0xe3, 0x27, 0xde, 0x7b, 0xe8, 0xee, 0x7a, 0xea, 0xbb, 0xd5, 0x94, 0xb5, 0xea, 0x6f,
	0xbe, 0xfa, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xa2, 0x72, 0xe5, 0x27, 0x02, 0x00, 0x00,
}
