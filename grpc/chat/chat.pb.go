// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/chat/chat.proto

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/chat/chat.proto

It has these top-level messages:
	ChatMessage
	Ack
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import stratumn_alice_grpc_event "github.com/stratumn/alice/grpc/event"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A chat message.
type ChatMessage struct {
	PeerId  []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChatMessage) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *ChatMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// An empty ack.
type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ChatMessage)(nil), "stratumn.alice.grpc.chat.ChatMessage")
	proto.RegisterType((*Ack)(nil), "stratumn.alice.grpc.chat.Ack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	// Sends a message to a peer.
	Message(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Ack, error)
	// Listen listens for incoming chat messages from peers.
	Listen(ctx context.Context, in *stratumn_alice_grpc_event.ListenReq, opts ...grpc.CallOption) (Chat_ListenClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Message(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.chat.Chat/Message", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Listen(ctx context.Context, in *stratumn_alice_grpc_event.ListenReq, opts ...grpc.CallOption) (Chat_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.chat.Chat/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_ListenClient interface {
	Recv() (*stratumn_alice_grpc_event.Event, error)
	grpc.ClientStream
}

type chatListenClient struct {
	grpc.ClientStream
}

func (x *chatListenClient) Recv() (*stratumn_alice_grpc_event.Event, error) {
	m := new(stratumn_alice_grpc_event.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chat service

type ChatServer interface {
	// Sends a message to a peer.
	Message(context.Context, *ChatMessage) (*Ack, error)
	// Listen listens for incoming chat messages from peers.
	Listen(*stratumn_alice_grpc_event.ListenReq, Chat_ListenServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.chat.Chat/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Message(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(stratumn_alice_grpc_event.ListenReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Listen(m, &chatListenServer{stream})
}

type Chat_ListenServer interface {
	Send(*stratumn_alice_grpc_event.Event) error
	grpc.ServerStream
}

type chatListenServer struct {
	grpc.ServerStream
}

func (x *chatListenServer) Send(m *stratumn_alice_grpc_event.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Message",
			Handler:    _Chat_Message_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Chat_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/chat/chat.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/chat/chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x4b, 0x3b, 0x31,
	0x18, 0xc6, 0xc9, 0xff, 0xaf, 0x3d, 0x8c, 0x82, 0x70, 0x2e, 0xe1, 0x50, 0x78, 0x39, 0x15, 0x8a,
	0xd6, 0x5c, 0xd1, 0xd1, 0xa9, 0x55, 0x87, 0x82, 0x82, 0xd4, 0xcd, 0x45, 0xd2, 0xf4, 0x6d, 0x7b,
	0xd6, 0xbb, 0xd4, 0x24, 0x15, 0x37, 0xa1, 0x93, 0x9f, 0xc3, 0xc9, 0x2f, 0xd0, 0xa9, 0x5f, 0xca,
	0xc9, 0x59, 0x72, 0xe9, 0x81, 0x83, 0xb5, 0x0e, 0x79, 0x96, 0xfc, 0xde, 0xe7, 0x79, 0x78, 0x13,
	0xca, 0xfb, 0xa9, 0x1d, 0x8c, 0x3b, 0x5c, 0xaa, 0x2c, 0x31, 0x56, 0x0b, 0x3b, 0xce, 0xf2, 0x44,
	0x3c, 0xa4, 0x12, 0x93, 0xbe, 0x1e, 0xc9, 0x44, 0x0e, 0x84, 0x2d, 0x84, 0x8f, 0xb4, 0xb2, 0x2a,
	0x64, 0x25, 0xc4, 0x0b, 0x88, 0x3b, 0x88, 0xbb, 0xfb, 0xa8, 0xb6, 0xc4, 0x09, 0x9f, 0xad, 0x3b,
	0xde, 0x27, 0xaa, 0x2f, 0xa3, 0x9f, 0x30, 0xb7, 0x5e, 0xfd, 0x44, 0x7c, 0x4f, 0xd7, 0xcf, 0x06,
	0xc2, 0x5e, 0xa1, 0x31, 0xa2, 0x8f, 0x61, 0x8d, 0x06, 0x23, 0x44, 0x7d, 0x97, 0x76, 0x19, 0x01,
	0x52, 0xdd, 0x68, 0x6e, 0xbd, 0xcd, 0x58, 0x70, 0x8d, 0xa8, 0xa1, 0x75, 0xfe, 0x3e, 0x63, 0xe4,
	0x63, 0xc6, 0x48, 0xbb, 0xe2, 0x98, 0x56, 0x37, 0x3c, 0xa2, 0x41, 0xe6, 0x07, 0xd9, 0x3f, 0x20,
	0xd5, 0xb5, 0x82, 0xde, 0x9c, 0x7b, 0x81, 0x54, 0xb9, 0xc5, 0xdc, 0xb6, 0x4b, 0x26, 0x5e, 0xa5,
	0xff, 0x1b, 0x72, 0x78, 0xfc, 0x49, 0xe8, 0x8a, 0xcb, 0x0c, 0x33, 0x1a, 0x94, 0xb9, 0xfb, 0x7c,
	0xd1, 0x06, 0xf8, 0xb7, 0x7a, 0xd1, 0xce, 0x62, 0xac, 0x21, 0x87, 0xf1, 0xf6, 0x64, 0xca, 0xd8,
	0x0d, 0xe6, 0x5d, 0x10, 0x30, 0x0f, 0x05, 0xab, 0x40, 0x80, 0xeb, 0x1b, 0xbe, 0xd0, 0xca, 0x65,
	0x6a, 0x2c, 0xe6, 0xe1, 0xde, 0x8f, 0x36, 0x7e, 0x2d, 0x1e, 0x69, 0xe3, 0x63, 0x04, 0xbf, 0x50,
	0x17, 0x4e, 0xe3, 0xc3, 0xc9, 0x94, 0xed, 0xfa, 0x01, 0xe8, 0x29, 0x0d, 0xae, 0x48, 0x19, 0x6c,
	0xa0, 0xa7, 0x55, 0x56, 0x24, 0x9b, 0xd7, 0x29, 0x23, 0x75, 0xd2, 0x3c, 0xb8, 0xad, 0xfe, 0xe1,
	0x5f, 0x9c, 0x3a, 0xe9, 0x54, 0x8a, 0xe7, 0x39, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x49, 0xd1,
	0x5e, 0x2b, 0x4a, 0x02, 0x00, 0x00,
}
