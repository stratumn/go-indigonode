// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/coin/coin.proto

/*
Package coin is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/coin/coin.proto

It has these top-level messages:
	StartEngineReq
	StartEngineResp
	StopEngineReq
	StopEngineResp
	TransactionResp
*/
package coin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import stratumn_alice_pb_coin "github.com/stratumn/alice/pb/coin"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A request to start the consensus engine.
type StartEngineReq struct {
}

func (m *StartEngineReq) Reset()                    { *m = StartEngineReq{} }
func (m *StartEngineReq) String() string            { return proto.CompactTextString(m) }
func (*StartEngineReq) ProtoMessage()               {}
func (*StartEngineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response to a request to start the consensus engine.
type StartEngineResp struct {
}

func (m *StartEngineResp) Reset()                    { *m = StartEngineResp{} }
func (m *StartEngineResp) String() string            { return proto.CompactTextString(m) }
func (*StartEngineResp) ProtoMessage()               {}
func (*StartEngineResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// A request to stop the consensus engine.
type StopEngineReq struct {
}

func (m *StopEngineReq) Reset()                    { *m = StopEngineReq{} }
func (m *StopEngineReq) String() string            { return proto.CompactTextString(m) }
func (*StopEngineReq) ProtoMessage()               {}
func (*StopEngineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// The response to a request to stop the consensus engine.
type StopEngineResp struct {
}

func (m *StopEngineResp) Reset()                    { *m = StopEngineResp{} }
func (m *StopEngineResp) String() string            { return proto.CompactTextString(m) }
func (*StopEngineResp) ProtoMessage()               {}
func (*StopEngineResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// The response to a request to do a coin transaction.
type TransactionResp struct {
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *TransactionResp) Reset()                    { *m = TransactionResp{} }
func (m *TransactionResp) String() string            { return proto.CompactTextString(m) }
func (*TransactionResp) ProtoMessage()               {}
func (*TransactionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactionResp) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func init() {
	proto.RegisterType((*StartEngineReq)(nil), "stratumn.alice.grpc.coin.StartEngineReq")
	proto.RegisterType((*StartEngineResp)(nil), "stratumn.alice.grpc.coin.StartEngineResp")
	proto.RegisterType((*StopEngineReq)(nil), "stratumn.alice.grpc.coin.StopEngineReq")
	proto.RegisterType((*StopEngineResp)(nil), "stratumn.alice.grpc.coin.StopEngineResp")
	proto.RegisterType((*TransactionResp)(nil), "stratumn.alice.grpc.coin.TransactionResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Coin service

type CoinClient interface {
	// Start the consensus engine on the node.
	StartEngine(ctx context.Context, in *StartEngineReq, opts ...grpc.CallOption) (*StartEngineResp, error)
	// Stop the consensus engine on the node.
	StopEngine(ctx context.Context, in *StopEngineReq, opts ...grpc.CallOption) (*StopEngineResp, error)
	// Send a coin transaction to the consensus engine.
	Transaction(ctx context.Context, in *stratumn_alice_pb_coin.Transaction, opts ...grpc.CallOption) (*TransactionResp, error)
}

type coinClient struct {
	cc *grpc.ClientConn
}

func NewCoinClient(cc *grpc.ClientConn) CoinClient {
	return &coinClient{cc}
}

func (c *coinClient) StartEngine(ctx context.Context, in *StartEngineReq, opts ...grpc.CallOption) (*StartEngineResp, error) {
	out := new(StartEngineResp)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.coin.Coin/StartEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) StopEngine(ctx context.Context, in *StopEngineReq, opts ...grpc.CallOption) (*StopEngineResp, error) {
	out := new(StopEngineResp)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.coin.Coin/StopEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinClient) Transaction(ctx context.Context, in *stratumn_alice_pb_coin.Transaction, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.coin.Coin/Transaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Coin service

type CoinServer interface {
	// Start the consensus engine on the node.
	StartEngine(context.Context, *StartEngineReq) (*StartEngineResp, error)
	// Stop the consensus engine on the node.
	StopEngine(context.Context, *StopEngineReq) (*StopEngineResp, error)
	// Send a coin transaction to the consensus engine.
	Transaction(context.Context, *stratumn_alice_pb_coin.Transaction) (*TransactionResp, error)
}

func RegisterCoinServer(s *grpc.Server, srv CoinServer) {
	s.RegisterService(&_Coin_serviceDesc, srv)
}

func _Coin_StartEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEngineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).StartEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.coin.Coin/StartEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).StartEngine(ctx, req.(*StartEngineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_StopEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEngineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).StopEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.coin.Coin/StopEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).StopEngine(ctx, req.(*StopEngineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coin_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stratumn_alice_pb_coin.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.coin.Coin/Transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServer).Transaction(ctx, req.(*stratumn_alice_pb_coin.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.coin.Coin",
	HandlerType: (*CoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartEngine",
			Handler:    _Coin_StartEngine_Handler,
		},
		{
			MethodName: "StopEngine",
			Handler:    _Coin_StopEngine_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _Coin_Transaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/stratumn/alice/grpc/coin/coin.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/coin/coin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x09, 0x4a, 0x85, 0xab, 0x5a, 0xbd, 0x41, 0x42, 0xa7, 0x23, 0xa2, 0x4d, 0x8b, 0x5c,
	0x40, 0x47, 0xb7, 0x16, 0x41, 0x07, 0x11, 0xda, 0x0a, 0xe2, 0x22, 0x97, 0xf4, 0xb5, 0x09, 0xd8,
	0xbb, 0x33, 0xf7, 0x02, 0x75, 0xed, 0xe8, 0xe0, 0x17, 0x70, 0xf3, 0x3b, 0x74, 0xf2, 0xcb, 0x49,
	0xae, 0x48, 0xd2, 0x80, 0x6d, 0x87, 0xdc, 0xf0, 0xcf, 0xef, 0xbd, 0xff, 0xcb, 0xff, 0xe5, 0x08,
	0x9f, 0x24, 0x18, 0x67, 0x21, 0x8f, 0xd4, 0x34, 0x30, 0x98, 0x0a, 0xcc, 0xa6, 0x32, 0x10, 0xaf,
	0x49, 0x04, 0xc1, 0x24, 0xd5, 0x51, 0x10, 0xa9, 0x44, 0xda, 0x83, 0xeb, 0x54, 0xa1, 0xa2, 0xee,
	0x1f, 0xc4, 0x2d, 0xc4, 0x73, 0x88, 0xe7, 0xef, 0x9b, 0x17, 0x1b, 0x3a, 0xc1, 0x0c, 0xf3, 0x67,
	0xd9, 0x67, 0x1d, 0xad, 0xc3, 0xaa, 0xab, 0x77, 0x44, 0x0e, 0x07, 0x28, 0x52, 0xbc, 0x91, 0x93,
	0x44, 0x42, 0x1f, 0xde, 0xbc, 0x63, 0xd2, 0x58, 0x51, 0x8c, 0xf6, 0x1a, 0xe4, 0x60, 0x80, 0x4a,
	0x17, 0x8c, 0xad, 0x2a, 0x04, 0xa3, 0xbd, 0x77, 0xd2, 0x18, 0xa6, 0x42, 0x1a, 0x11, 0x61, 0xa2,
	0x64, 0x2e, 0xd1, 0x31, 0xd9, 0xc3, 0xd9, 0x4b, 0x2c, 0x4c, 0xec, 0x3a, 0xcc, 0xf1, 0xf7, 0xbb,
	0xf7, 0xdf, 0x3f, 0xee, 0xdd, 0xad, 0x30, 0x31, 0x53, 0x63, 0x86, 0x31, 0x30, 0x2c, 0x2a, 0x38,
	0xeb, 0x09, 0xc9, 0x42, 0x60, 0x99, 0x81, 0x11, 0x43, 0xc5, 0x52, 0x18, 0x43, 0x0a, 0x32, 0x82,
	0x2a, 0xd9, 0x32, 0xec, 0x71, 0xf8, 0xf4, 0xc0, 0xfb, 0x35, 0x9c, 0xe5, 0xcd, 0x2e, 0xbf, 0x76,
	0xc8, 0x6e, 0x4f, 0x25, 0x92, 0x7e, 0x3a, 0xa4, 0x5e, 0x1a, 0x9d, 0xfa, 0xfc, 0xbf, 0x48, 0xf9,
	0xea, 0x37, 0x37, 0xdb, 0x5b, 0x92, 0x46, 0x7b, 0x9d, 0xf9, 0xc2, 0x3d, 0xb7, 0xa2, 0x1d, 0x2c,
	0x52, 0xd2, 0x80, 0x34, 0x99, 0x61, 0x60, 0x19, 0xa6, 0xa4, 0xd5, 0xa5, 0x1a, 0x01, 0xfd, 0x70,
	0x08, 0x29, 0x72, 0xa2, 0xad, 0x75, 0x2e, 0xa5, 0x78, 0x9b, 0xfe, 0x76, 0xa0, 0xd1, 0x5e, 0x7b,
	0xbe, 0x70, 0xcf, 0x72, 0x6d, 0xf3, 0x30, 0x19, 0xa9, 0x97, 0x36, 0x44, 0x4f, 0xab, 0x1e, 0x3a,
	0x5c, 0x3a, 0x94, 0xa0, 0x75, 0xb9, 0x54, 0xb6, 0xed, 0x9d, 0xcc, 0x17, 0x2e, 0x1d, 0x80, 0x1c,
	0x31, 0x51, 0xde, 0x56, 0xb7, 0xf3, 0xec, 0x6f, 0x71, 0x11, 0xae, 0xf3, 0x23, 0xac, 0xd9, 0x7f,
	0xf2, 0xea, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xb6, 0x8c, 0x20, 0x3b, 0x03, 0x00, 0x00,
}
