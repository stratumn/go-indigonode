// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/contacts/contacts.proto

/*
Package contacts is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/contacts/contacts.proto

It has these top-level messages:
	Contact
	ListReq
	GetReq
	SetReq
	DeleteReq
*/
package contacts

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The contact message containing the name and peer ID.
type Contact struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PeerId []byte `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contact) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

// The list request message.
type ListReq struct {
}

func (m *ListReq) Reset()                    { *m = ListReq{} }
func (m *ListReq) String() string            { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()               {}
func (*ListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The get request message.
type GetReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The set request message.
type SetReq struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PeerId []byte `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *SetReq) Reset()                    { *m = SetReq{} }
func (m *SetReq) String() string            { return proto.CompactTextString(m) }
func (*SetReq) ProtoMessage()               {}
func (*SetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetReq) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

// The delete request message.
type DeleteReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteReq) Reset()                    { *m = DeleteReq{} }
func (m *DeleteReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteReq) ProtoMessage()               {}
func (*DeleteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Contact)(nil), "stratumn.alice.grpc.contacts.Contact")
	proto.RegisterType((*ListReq)(nil), "stratumn.alice.grpc.contacts.ListReq")
	proto.RegisterType((*GetReq)(nil), "stratumn.alice.grpc.contacts.GetReq")
	proto.RegisterType((*SetReq)(nil), "stratumn.alice.grpc.contacts.SetReq")
	proto.RegisterType((*DeleteReq)(nil), "stratumn.alice.grpc.contacts.DeleteReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Contacts service

type ContactsClient interface {
	// Streams all the contacts.
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (Contacts_ListClient, error)
	// Returns a contact.
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Contact, error)
	// Sets a contact.
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*Contact, error)
	// Delete a contact.
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Contact, error)
}

type contactsClient struct {
	cc *grpc.ClientConn
}

func NewContactsClient(cc *grpc.ClientConn) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (Contacts_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Contacts_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.contacts.Contacts/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &contactsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Contacts_ListClient interface {
	Recv() (*Contact, error)
	grpc.ClientStream
}

type contactsListClient struct {
	grpc.ClientStream
}

func (x *contactsListClient) Recv() (*Contact, error) {
	m := new(Contact)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactsClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.contacts.Contacts/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.contacts.Contacts/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.contacts.Contacts/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contacts service

type ContactsServer interface {
	// Streams all the contacts.
	List(*ListReq, Contacts_ListServer) error
	// Returns a contact.
	Get(context.Context, *GetReq) (*Contact, error)
	// Sets a contact.
	Set(context.Context, *SetReq) (*Contact, error)
	// Delete a contact.
	Delete(context.Context, *DeleteReq) (*Contact, error)
}

func RegisterContactsServer(s *grpc.Server, srv ContactsServer) {
	s.RegisterService(&_Contacts_serviceDesc, srv)
}

func _Contacts_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactsServer).List(m, &contactsListServer{stream})
}

type Contacts_ListServer interface {
	Send(*Contact) error
	grpc.ServerStream
}

type contactsListServer struct {
	grpc.ServerStream
}

func (x *contactsListServer) Send(m *Contact) error {
	return x.ServerStream.SendMsg(m)
}

func _Contacts_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.contacts.Contacts/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.contacts.Contacts/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.contacts.Contacts/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.contacts.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Contacts_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Contacts_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Contacts_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Contacts_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/contacts/contacts.proto",
}

func init() {
	proto.RegisterFile("github.com/stratumn/alice/grpc/contacts/contacts.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0x87, 0xc9, 0x55, 0x92, 0xeb, 0x60, 0xa1, 0x4e, 0x15, 0xa6, 0xd2, 0xc2, 0x10, 0x5a, 0xea,
	0x42, 0x26, 0x62, 0x69, 0x37, 0xed, 0xca, 0x0a, 0x22, 0x74, 0x51, 0xcc, 0xae, 0x9b, 0x76, 0x8c,
	0x07, 0x0d, 0xc4, 0x24, 0x26, 0x23, 0xb4, 0xdb, 0x3c, 0x8a, 0xab, 0xbe, 0x40, 0x56, 0x2e, 0xfa,
	0x4a, 0x7d, 0x84, 0x32, 0xf9, 0x63, 0x6d, 0x17, 0x6a, 0x16, 0x81, 0xc3, 0xe4, 0x3b, 0xbf, 0x6f,
	0xe6, 0x0c, 0x83, 0x6e, 0xa7, 0xb6, 0x98, 0x2d, 0xc7, 0xcc, 0xf2, 0xe6, 0x46, 0x28, 0x02, 0x2e,
	0x96, 0x73, 0xd7, 0xe0, 0x8e, 0x6d, 0x81, 0x31, 0x0d, 0x7c, 0xcb, 0xb0, 0x3c, 0x57, 0x70, 0x4b,
	0x84, 0x9b, 0x82, 0xf9, 0x81, 0x27, 0x3c, 0x7c, 0x96, 0xc3, 0x2c, 0x81, 0x99, 0x84, 0x59, 0xce,
	0x34, 0xdb, 0x7b, 0x52, 0xe1, 0x4d, 0xc8, 0x2f, 0xcd, 0xd2, 0xef, 0x91, 0xf6, 0x90, 0x76, 0x62,
	0x8c, 0xca, 0x2e, 0x9f, 0x03, 0x51, 0xa8, 0xd2, 0xaa, 0x8c, 0x92, 0x1a, 0x9f, 0x23, 0xcd, 0x07,
	0x08, 0x5e, 0xec, 0x09, 0xf9, 0x47, 0x95, 0x56, 0xb5, 0x57, 0xfe, 0x5a, 0x13, 0x65, 0xa4, 0xca,
	0xc5, 0xe1, 0x44, 0xaf, 0x20, 0xed, 0xd1, 0x0e, 0xc5, 0x08, 0x16, 0x7a, 0x17, 0xa9, 0x03, 0x90,
	0x15, 0x6e, 0x6d, 0xe7, 0xf4, 0xea, 0xab, 0x35, 0xa9, 0x66, 0x0a, 0x2a, 0xd7, 0x3f, 0x64, 0x40,
	0x42, 0xe8, 0xaf, 0x48, 0x35, 0x0b, 0xf6, 0xe0, 0xf6, 0xdf, 0x1d, 0x9d, 0xac, 0xd6, 0x44, 0x7b,
	0x02, 0x08, 0xe8, 0xb0, 0x2f, 0xb9, 0x5f, 0x1b, 0xbc, 0x41, 0x95, 0x3e, 0x38, 0x20, 0xa0, 0x90,
	0xa4, 0xfb, 0x59, 0x42, 0xff, 0xb3, 0x5f, 0x21, 0x5e, 0xa0, 0xb2, 0x3c, 0x24, 0xbe, 0x64, 0xbb,
	0xe6, 0xce, 0xb2, 0x41, 0x34, 0xf7, 0x60, 0x59, 0xac, 0x7e, 0x1a, 0xc5, 0xa4, 0x21, 0x7b, 0x28,
	0x77, 0x1c, 0x2a, 0x66, 0x40, 0x73, 0xa4, 0xa3, 0x60, 0x1b, 0x95, 0x06, 0x20, 0xf0, 0xc5, 0xee,
	0xa8, 0x74, 0xde, 0x87, 0x0a, 0x1b, 0x51, 0x4c, 0x6a, 0x7d, 0x3b, 0xf4, 0x1d, 0xfe, 0x4e, 0x79,
	0x6e, 0xc3, 0x80, 0x4a, 0xe6, 0x7e, 0x95, 0x59, 0x48, 0x55, 0x8b, 0x62, 0x72, 0x64, 0x82, 0xd8,
	0xd2, 0xb8, 0x48, 0x4d, 0x2f, 0x02, 0x5f, 0xed, 0xce, 0xd8, 0x5c, 0xd7, 0xa1, 0xb2, 0x7a, 0x14,
	0x93, 0xe3, 0xb4, 0xeb, 0xc7, 0xd7, 0xeb, 0x3e, 0x77, 0x0e, 0x7c, 0x5d, 0x77, 0x79, 0x31, 0x56,
	0x93, 0x27, 0x71, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x96, 0x52, 0x22, 0x98, 0x03, 0x00,
	0x00,
}
