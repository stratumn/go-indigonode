// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/event/event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/event/event.proto

It has these top-level messages:
	ListenReq
	Event
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_Level int32

const (
	Event_INFO    Event_Level = 0
	Event_DEBUG   Event_Level = 1
	Event_WARNING Event_Level = 2
	Event_ERROR   Event_Level = 3
)

var Event_Level_name = map[int32]string{
	0: "INFO",
	1: "DEBUG",
	2: "WARNING",
	3: "ERROR",
}
var Event_Level_value = map[string]int32{
	"INFO":    0,
	"DEBUG":   1,
	"WARNING": 2,
	"ERROR":   3,
}

func (x Event_Level) String() string {
	return proto.EnumName(Event_Level_name, int32(x))
}
func (Event_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// The Listen request message.
type ListenReq struct {
}

func (m *ListenReq) Reset()                    { *m = ListenReq{} }
func (m *ListenReq) String() string            { return proto.CompactTextString(m) }
func (*ListenReq) ProtoMessage()               {}
func (*ListenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The Event message containing what should be displayed, with optional
// display customization (if supported by the listener).
type Event struct {
	Message string      `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Level   Event_Level `protobuf:"varint,2,opt,name=level,enum=stratumn.alice.grpc.event.Event_Level" json:"level,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Event) GetLevel() Event_Level {
	if m != nil {
		return m.Level
	}
	return Event_INFO
}

func init() {
	proto.RegisterType((*ListenReq)(nil), "stratumn.alice.grpc.event.ListenReq")
	proto.RegisterType((*Event)(nil), "stratumn.alice.grpc.event.Event")
	proto.RegisterEnum("stratumn.alice.grpc.event.Event_Level", Event_Level_name, Event_Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyEventService service

type MyEventServiceClient interface {
	// Listen starts listening to events from MyEventService.
	Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (MyEventService_ListenClient, error)
}

type myEventServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyEventServiceClient(cc *grpc.ClientConn) MyEventServiceClient {
	return &myEventServiceClient{cc}
}

func (c *myEventServiceClient) Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (MyEventService_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MyEventService_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.event.MyEventService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &myEventServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyEventService_ListenClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type myEventServiceListenClient struct {
	grpc.ClientStream
}

func (x *myEventServiceListenClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MyEventService service

type MyEventServiceServer interface {
	// Listen starts listening to events from MyEventService.
	Listen(*ListenReq, MyEventService_ListenServer) error
}

func RegisterMyEventServiceServer(s *grpc.Server, srv MyEventServiceServer) {
	s.RegisterService(&_MyEventService_serviceDesc, srv)
}

func _MyEventService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyEventServiceServer).Listen(m, &myEventServiceListenServer{stream})
}

type MyEventService_ListenServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type myEventServiceListenServer struct {
	grpc.ServerStream
}

func (x *myEventServiceListenServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _MyEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.event.MyEventService",
	HandlerType: (*MyEventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _MyEventService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/event/event.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/event/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0xeb, 0xd3, 0x40,
	0x10, 0x35, 0xd5, 0xb4, 0x76, 0x0b, 0x25, 0xee, 0x29, 0xed, 0x69, 0x08, 0xa2, 0x45, 0xca, 0xa6,
	0x54, 0x4f, 0x0a, 0x82, 0xc1, 0x5a, 0x0a, 0xb5, 0x85, 0x88, 0x08, 0xde, 0xf2, 0x67, 0x9a, 0x06,
	0x92, 0x6c, 0xdc, 0xdd, 0x14, 0x0b, 0x82, 0xe0, 0x41, 0xfc, 0x1c, 0x3d, 0xf9, 0x05, 0x7a, 0xea,
	0x97, 0x93, 0x6c, 0xda, 0xde, 0xfc, 0xf5, 0x77, 0xd8, 0x81, 0x99, 0x79, 0xf3, 0xde, 0xbe, 0xd9,
	0x25, 0x93, 0x24, 0x55, 0xdb, 0x2a, 0x64, 0x11, 0xcf, 0x5d, 0xa9, 0x44, 0xa0, 0xaa, 0xbc, 0x70,
	0x83, 0x2c, 0x8d, 0xd0, 0x4d, 0x44, 0x19, 0xb9, 0xb8, 0xc3, 0x42, 0x35, 0x91, 0x95, 0x82, 0x2b,
	0x4e, 0x07, 0x17, 0x18, 0xd3, 0x30, 0x56, 0xc3, 0x98, 0x06, 0x0c, 0xc7, 0xb7, 0xc8, 0xbe, 0xab,
	0xfa, 0x34, 0x44, 0x43, 0x48, 0x38, 0x4f, 0x32, 0x74, 0x75, 0x16, 0x56, 0x1b, 0x37, 0x46, 0x19,
	0x89, 0xb4, 0x54, 0x5c, 0x34, 0x08, 0xa7, 0x47, 0xba, 0xcb, 0x54, 0x2a, 0x2c, 0x7c, 0xfc, 0xe6,
	0xfc, 0x6e, 0x11, 0x73, 0x56, 0xcb, 0xd0, 0x05, 0xe9, 0xe4, 0x28, 0x65, 0x90, 0xa0, 0x6d, 0x80,
	0x31, 0xea, 0x7a, 0xee, 0xe1, 0x64, 0x3f, 0xd7, 0x3d, 0x38, 0x37, 0x40, 0x71, 0x08, 0x11, 0xe2,
	0x54, 0x96, 0x59, 0xb0, 0xc7, 0x18, 0xb8, 0x80, 0x8c, 0x27, 0x09, 0xc6, 0x7f, 0x4f, 0xb6, 0xe1,
	0x5f, 0xe6, 0xe9, 0x0f, 0x62, 0x66, 0xb8, 0xc3, 0xcc, 0x6e, 0x81, 0x31, 0xea, 0x4f, 0x9f, 0xb1,
	0xff, 0x9a, 0x63, 0x9a, 0x9f, 0x2d, 0x6b, 0xb4, 0xf7, 0xf6, 0x70, 0xb2, 0x5f, 0x37, 0x82, 0x7a,
	0x1c, 0xd4, 0x36, 0x50, 0x20, 0xb7, 0xbc, 0xca, 0x62, 0x88, 0x78, 0xa1, 0x04, 0xaf, 0x6b, 0xd7,
	0x0b, 0x00, 0xdf, 0xe8, 0xf4, 0x2c, 0xeb, 0x37, 0xa2, 0xce, 0x2b, 0x62, 0x6a, 0x3e, 0xfa, 0x98,
	0x3c, 0x5a, 0xac, 0x3e, 0xac, 0xad, 0x07, 0xb4, 0x4b, 0xcc, 0xf7, 0x33, 0xef, 0xf3, 0xdc, 0x32,
	0x68, 0x8f, 0x74, 0xbe, 0xbc, 0xf3, 0x57, 0x8b, 0xd5, 0xdc, 0x6a, 0xd5, 0xf5, 0x99, 0xef, 0xaf,
	0x7d, 0xeb, 0xe1, 0xf4, 0x27, 0xe9, 0x7f, 0xdc, 0x6b, 0xf1, 0x4f, 0x28, 0x76, 0x69, 0x84, 0x34,
	0x27, 0xed, 0x66, 0x4f, 0xf4, 0xe9, 0x1d, 0x06, 0xae, 0xab, 0x1c, 0xc2, 0x2d, 0x9b, 0xce, 0xe0,
	0xd7, 0xd1, 0x7e, 0xd2, 0x0c, 0xc0, 0x86, 0x0b, 0xd0, 0x3d, 0xf9, 0xe7, 0x68, 0x1b, 0x13, 0xc3,
	0x1b, 0x7f, 0x7d, 0x71, 0x9f, 0x5f, 0xf3, 0x46, 0xc7, 0xb0, 0xad, 0xdf, 0xf2, 0xe5, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x86, 0x43, 0xaa, 0x6a, 0x02, 0x00, 0x00,
}
