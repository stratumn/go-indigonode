// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/event/event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/event/event.proto

It has these top-level messages:
	ListenReq
	Event
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Level int32

const (
	Level_INFO    Level = 0
	Level_DEBUG   Level = 1
	Level_WARNING Level = 2
	Level_ERROR   Level = 3
)

var Level_name = map[int32]string{
	0: "INFO",
	1: "DEBUG",
	2: "WARNING",
	3: "ERROR",
}
var Level_value = map[string]int32{
	"INFO":    0,
	"DEBUG":   1,
	"WARNING": 2,
	"ERROR":   3,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}
func (Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The Listen request message.
type ListenReq struct {
}

func (m *ListenReq) Reset()                    { *m = ListenReq{} }
func (m *ListenReq) String() string            { return proto.CompactTextString(m) }
func (*ListenReq) ProtoMessage()               {}
func (*ListenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The Event message containing what should be displayed, with optional
// display customization (if supported by the listener).
type Event struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Level   Level  `protobuf:"varint,2,opt,name=level,enum=stratumn.alice.grpc.event.Level" json:"level,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Event) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_INFO
}

func init() {
	proto.RegisterType((*ListenReq)(nil), "stratumn.alice.grpc.event.ListenReq")
	proto.RegisterType((*Event)(nil), "stratumn.alice.grpc.event.Event")
	proto.RegisterEnum("stratumn.alice.grpc.event.Level", Level_name, Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Emitter service

type EmitterClient interface {
	// Listen starts listening to events.
	Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (Emitter_ListenClient, error)
}

type emitterClient struct {
	cc *grpc.ClientConn
}

func NewEmitterClient(cc *grpc.ClientConn) EmitterClient {
	return &emitterClient{cc}
}

func (c *emitterClient) Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (Emitter_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Emitter_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.event.Emitter/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &emitterListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Emitter_ListenClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type emitterListenClient struct {
	grpc.ClientStream
}

func (x *emitterListenClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Emitter service

type EmitterServer interface {
	// Listen starts listening to events.
	Listen(*ListenReq, Emitter_ListenServer) error
}

func RegisterEmitterServer(s *grpc.Server, srv EmitterServer) {
	s.RegisterService(&_Emitter_serviceDesc, srv)
}

func _Emitter_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmitterServer).Listen(m, &emitterListenServer{stream})
}

type Emitter_ListenServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type emitterListenServer struct {
	grpc.ServerStream
}

func (x *emitterListenServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Emitter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.event.Emitter",
	HandlerType: (*EmitterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Emitter_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/event/event.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/event/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6b, 0xc2, 0x30,
	0x14, 0x5f, 0xdc, 0xaa, 0x33, 0xc2, 0xe8, 0x72, 0xaa, 0x9e, 0x1e, 0x32, 0x98, 0x88, 0xb4, 0xe2,
	0x76, 0xda, 0x60, 0xb0, 0xb2, 0x4e, 0x04, 0x51, 0x08, 0x8c, 0xc1, 0x6e, 0xb5, 0x8d, 0xb5, 0xd0,
	0x36, 0x2e, 0x89, 0xe2, 0xae, 0x3b, 0xed, 0x73, 0x78, 0xda, 0x17, 0xf0, 0xe4, 0x37, 0xd8, 0xa7,
	0x1a, 0x4d, 0x75, 0xb7, 0xb9, 0x1d, 0xf2, 0x20, 0xef, 0xfd, 0xfe, 0xbc, 0xf7, 0x12, 0xdc, 0x8d,
	0x62, 0x35, 0x5b, 0x4c, 0xec, 0x80, 0xa7, 0x8e, 0x54, 0xc2, 0x57, 0x8b, 0x34, 0x73, 0xfc, 0x24,
	0x0e, 0x98, 0x13, 0x89, 0x79, 0xe0, 0xb0, 0x25, 0xcb, 0x54, 0x11, 0xed, 0xb9, 0xe0, 0x8a, 0x93,
	0xfa, 0x1e, 0x66, 0x6b, 0x98, 0x9d, 0xc3, 0x6c, 0x0d, 0x68, 0x74, 0xfe, 0x12, 0x5b, 0xa9, 0xfc,
	0x14, 0x42, 0xcd, 0x1a, 0xae, 0x0e, 0x63, 0xa9, 0x58, 0x46, 0xd9, 0x6b, 0xf3, 0x0b, 0x61, 0xc3,
	0xcb, 0x45, 0xc8, 0x00, 0x57, 0x52, 0x26, 0xa5, 0x1f, 0x31, 0x0b, 0x01, 0x6a, 0x55, 0x5d, 0x67,
	0xbd, 0xb5, 0x2e, 0x75, 0x0d, 0x76, 0x05, 0x50, 0x1c, 0x26, 0x0c, 0xc2, 0x58, 0xce, 0x13, 0xff,
	0x8d, 0x85, 0xc0, 0x05, 0x24, 0x3c, 0x8a, 0x58, 0xf8, 0xb9, 0xb5, 0x10, 0xdd, 0xf3, 0xc9, 0x12,
	0x1b, 0x09, 0x5b, 0xb2, 0xc4, 0x2a, 0x01, 0x6a, 0x9d, 0xf5, 0xc0, 0xfe, 0xb5, 0x75, 0x7b, 0x98,
	0xe3, 0xdc, 0xbb, 0xf5, 0xd6, 0xba, 0x29, 0xac, 0x34, 0x11, 0xd4, 0xcc, 0x57, 0x20, 0x67, 0x7c,
	0x91, 0x84, 0x10, 0xf0, 0x4c, 0x09, 0x9e, 0xe7, 0x7e, 0xac, 0x81, 0x4f, 0xf5, 0x75, 0x67, 0x48,
	0x0b, 0xbb, 0xf6, 0x35, 0x36, 0xb4, 0x1e, 0x39, 0xc5, 0x27, 0x83, 0xd1, 0xe3, 0xd8, 0x3c, 0x22,
	0x55, 0x6c, 0x3c, 0x78, 0xee, 0x53, 0xdf, 0x44, 0xa4, 0x86, 0x2b, 0xcf, 0xf7, 0x74, 0x34, 0x18,
	0xf5, 0xcd, 0x52, 0x9e, 0xf7, 0x28, 0x1d, 0x53, 0xf3, 0xb8, 0xb7, 0xc2, 0x15, 0x2f, 0x8d, 0x95,
	0x62, 0x82, 0xa4, 0xb8, 0x5c, 0xac, 0x86, 0x5c, 0x1c, 0xea, 0x79, 0xbf, 0xbd, 0xc6, 0xa1, 0xc9,
	0xf4, 0x38, 0xcd, 0xfa, 0xfb, 0xc6, 0x3a, 0x2f, 0x08, 0x30, 0xe5, 0x02, 0x74, 0x4d, 0x7e, 0x6c,
	0x2c, 0xd4, 0x45, 0x6e, 0xe7, 0xa5, 0xfd, 0x9f, 0x6f, 0x70, 0xab, 0xe3, 0xa4, 0xac, 0x9f, 0xef,
	0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xa0, 0x4d, 0x69, 0x3b, 0x02, 0x00, 0x00,
}
