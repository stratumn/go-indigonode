// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/grpc/event (interfaces: Emitter_ListenServer,EmitterClient,Emitter_ListenClient)

// Package mockevent is a generated GoMock package.
package mockevent

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	event "github.com/stratumn/alice/grpc/event"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockEmitter_ListenServer is a mock of Emitter_ListenServer interface
type MockEmitter_ListenServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmitter_ListenServerMockRecorder
}

// MockEmitter_ListenServerMockRecorder is the mock recorder for MockEmitter_ListenServer
type MockEmitter_ListenServerMockRecorder struct {
	mock *MockEmitter_ListenServer
}

// NewMockEmitter_ListenServer creates a new mock instance
func NewMockEmitter_ListenServer(ctrl *gomock.Controller) *MockEmitter_ListenServer {
	mock := &MockEmitter_ListenServer{ctrl: ctrl}
	mock.recorder = &MockEmitter_ListenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmitter_ListenServer) EXPECT() *MockEmitter_ListenServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockEmitter_ListenServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockEmitter_ListenServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEmitter_ListenServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockEmitter_ListenServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockEmitter_ListenServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEmitter_ListenServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockEmitter_ListenServer) Send(arg0 *event.Event) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockEmitter_ListenServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmitter_ListenServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockEmitter_ListenServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockEmitter_ListenServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockEmitter_ListenServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockEmitter_ListenServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockEmitter_ListenServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEmitter_ListenServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockEmitter_ListenServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockEmitter_ListenServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockEmitter_ListenServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockEmitter_ListenServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockEmitter_ListenServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockEmitter_ListenServer)(nil).SetTrailer), arg0)
}

// MockEmitterClient is a mock of EmitterClient interface
type MockEmitterClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterClientMockRecorder
}

// MockEmitterClientMockRecorder is the mock recorder for MockEmitterClient
type MockEmitterClientMockRecorder struct {
	mock *MockEmitterClient
}

// NewMockEmitterClient creates a new mock instance
func NewMockEmitterClient(ctrl *gomock.Controller) *MockEmitterClient {
	mock := &MockEmitterClient{ctrl: ctrl}
	mock.recorder = &MockEmitterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmitterClient) EXPECT() *MockEmitterClientMockRecorder {
	return m.recorder
}

// Listen mocks base method
func (m *MockEmitterClient) Listen(arg0 context.Context, arg1 *event.ListenReq, arg2 ...grpc.CallOption) (event.Emitter_ListenClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Listen", varargs...)
	ret0, _ := ret[0].(event.Emitter_ListenClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen
func (mr *MockEmitterClientMockRecorder) Listen(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockEmitterClient)(nil).Listen), varargs...)
}

// MockEmitter_ListenClient is a mock of Emitter_ListenClient interface
type MockEmitter_ListenClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmitter_ListenClientMockRecorder
}

// MockEmitter_ListenClientMockRecorder is the mock recorder for MockEmitter_ListenClient
type MockEmitter_ListenClientMockRecorder struct {
	mock *MockEmitter_ListenClient
}

// NewMockEmitter_ListenClient creates a new mock instance
func NewMockEmitter_ListenClient(ctrl *gomock.Controller) *MockEmitter_ListenClient {
	mock := &MockEmitter_ListenClient{ctrl: ctrl}
	mock.recorder = &MockEmitter_ListenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmitter_ListenClient) EXPECT() *MockEmitter_ListenClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockEmitter_ListenClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockEmitter_ListenClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockEmitter_ListenClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockEmitter_ListenClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockEmitter_ListenClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEmitter_ListenClient)(nil).Context))
}

// Header mocks base method
func (m *MockEmitter_ListenClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockEmitter_ListenClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockEmitter_ListenClient)(nil).Header))
}

// Recv mocks base method
func (m *MockEmitter_ListenClient) Recv() (*event.Event, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockEmitter_ListenClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEmitter_ListenClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockEmitter_ListenClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockEmitter_ListenClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEmitter_ListenClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockEmitter_ListenClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockEmitter_ListenClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEmitter_ListenClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockEmitter_ListenClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockEmitter_ListenClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockEmitter_ListenClient)(nil).Trailer))
}
