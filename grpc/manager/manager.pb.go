// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/manager/manager.proto

/*
Package manager is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/manager/manager.proto

It has these top-level messages:
	ListReq
	StartReq
	StopReq
	PruneReq
	Service
*/
package manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Service_Status int32

const (
	Service_STOPPED  Service_Status = 0
	Service_STARTING Service_Status = 1
	Service_RUNNING  Service_Status = 2
	Service_STOPPING Service_Status = 3
	Service_ERRORED  Service_Status = 4
)

var Service_Status_name = map[int32]string{
	0: "STOPPED",
	1: "STARTING",
	2: "RUNNING",
	3: "STOPPING",
	4: "ERRORED",
}
var Service_Status_value = map[string]int32{
	"STOPPED":  0,
	"STARTING": 1,
	"RUNNING":  2,
	"STOPPING": 3,
	"ERRORED":  4,
}

func (x Service_Status) String() string {
	return proto.EnumName(Service_Status_name, int32(x))
}
func (Service_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

// The list request message.
type ListReq struct {
}

func (m *ListReq) Reset()                    { *m = ListReq{} }
func (m *ListReq) String() string            { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()               {}
func (*ListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The start request message.
type StartReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StartReq) Reset()                    { *m = StartReq{} }
func (m *StartReq) String() string            { return proto.CompactTextString(m) }
func (*StartReq) ProtoMessage()               {}
func (*StartReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// The stop request message.
type StopReq struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Prune bool   `protobuf:"varint,2,opt,name=prune" json:"prune,omitempty"`
}

func (m *StopReq) Reset()                    { *m = StopReq{} }
func (m *StopReq) String() string            { return proto.CompactTextString(m) }
func (*StopReq) ProtoMessage()               {}
func (*StopReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StopReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StopReq) GetPrune() bool {
	if m != nil {
		return m.Prune
	}
	return false
}

// The prune request message.
type PruneReq struct {
}

func (m *PruneReq) Reset()                    { *m = PruneReq{} }
func (m *PruneReq) String() string            { return proto.CompactTextString(m) }
func (*PruneReq) ProtoMessage()               {}
func (*PruneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// The service message containing information about a service.
type Service struct {
	Id        string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status    Service_Status `protobuf:"varint,2,opt,name=status,enum=stratumn.alice.grpc.manager.Service_Status" json:"status,omitempty"`
	Needs     []string       `protobuf:"bytes,3,rep,name=needs" json:"needs,omitempty"`
	Stoppable bool           `protobuf:"varint,4,opt,name=stoppable" json:"stoppable,omitempty"`
	Prunable  bool           `protobuf:"varint,5,opt,name=prunable" json:"prunable,omitempty"`
	Name      string         `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Desc      string         `protobuf:"bytes,7,opt,name=desc" json:"desc,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetStatus() Service_Status {
	if m != nil {
		return m.Status
	}
	return Service_STOPPED
}

func (m *Service) GetNeeds() []string {
	if m != nil {
		return m.Needs
	}
	return nil
}

func (m *Service) GetStoppable() bool {
	if m != nil {
		return m.Stoppable
	}
	return false
}

func (m *Service) GetPrunable() bool {
	if m != nil {
		return m.Prunable
	}
	return false
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*ListReq)(nil), "stratumn.alice.grpc.manager.ListReq")
	proto.RegisterType((*StartReq)(nil), "stratumn.alice.grpc.manager.StartReq")
	proto.RegisterType((*StopReq)(nil), "stratumn.alice.grpc.manager.StopReq")
	proto.RegisterType((*PruneReq)(nil), "stratumn.alice.grpc.manager.PruneReq")
	proto.RegisterType((*Service)(nil), "stratumn.alice.grpc.manager.Service")
	proto.RegisterEnum("stratumn.alice.grpc.manager.Service_Status", Service_Status_name, Service_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	// Streams the registered services.
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (Manager_ListClient, error)
	// Starts a service.
	Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*Service, error)
	// Stops a service.
	Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*Service, error)
	// Prunes services.
	Prune(ctx context.Context, in *PruneReq, opts ...grpc.CallOption) (Manager_PruneClient, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (Manager_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Manager_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.manager.Manager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_ListClient interface {
	Recv() (*Service, error)
	grpc.ClientStream
}

type managerListClient struct {
	grpc.ClientStream
}

func (x *managerListClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managerClient) Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.manager.Manager/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.manager.Manager/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Prune(ctx context.Context, in *PruneReq, opts ...grpc.CallOption) (Manager_PruneClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Manager_serviceDesc.Streams[1], c.cc, "/stratumn.alice.grpc.manager.Manager/Prune", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerPruneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_PruneClient interface {
	Recv() (*Service, error)
	grpc.ClientStream
}

type managerPruneClient struct {
	grpc.ClientStream
}

func (x *managerPruneClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Manager service

type ManagerServer interface {
	// Streams the registered services.
	List(*ListReq, Manager_ListServer) error
	// Starts a service.
	Start(context.Context, *StartReq) (*Service, error)
	// Stops a service.
	Stop(context.Context, *StopReq) (*Service, error)
	// Prunes services.
	Prune(*PruneReq, Manager_PruneServer) error
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).List(m, &managerListServer{stream})
}

type Manager_ListServer interface {
	Send(*Service) error
	grpc.ServerStream
}

type managerListServer struct {
	grpc.ServerStream
}

func (x *managerListServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func _Manager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.manager.Manager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Start(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.manager.Manager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Stop(ctx, req.(*StopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Prune_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PruneReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).Prune(m, &managerPruneServer{stream})
}

type Manager_PruneServer interface {
	Send(*Service) error
	grpc.ServerStream
}

type managerPruneServer struct {
	grpc.ServerStream
}

func (x *managerPruneServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.manager.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Manager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Manager_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Manager_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Prune",
			Handler:       _Manager_Prune_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/manager/manager.proto",
}

func init() {
	proto.RegisterFile("github.com/stratumn/alice/grpc/manager/manager.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x26, 0xfd, 0x4b, 0x3b, 0xa0, 0x52, 0x19, 0x90, 0x4c, 0x41, 0xc2, 0x0a, 0x8b, 0x54, 0x04,
	0xb8, 0xab, 0x85, 0x1b, 0x27, 0x4a, 0x2b, 0xb4, 0x02, 0xda, 0xc8, 0x29, 0x17, 0x6e, 0x6e, 0xe2,
	0xed, 0x46, 0x4a, 0x93, 0x6c, 0xec, 0xac, 0xe0, 0xda, 0x47, 0x59, 0x2e, 0xbc, 0x40, 0x4f, 0x7d,
	0x03, 0x9e, 0x0a, 0xd9, 0x49, 0xbb, 0x7b, 0x6a, 0x73, 0xa8, 0xe2, 0xf9, 0xf9, 0xe6, 0x9b, 0x19,
	0x7f, 0x2e, 0x7c, 0x58, 0x86, 0xea, 0x32, 0x5f, 0x50, 0x3f, 0x59, 0x0d, 0xa5, 0xca, 0xb8, 0xca,
	0x57, 0xf1, 0x90, 0x47, 0xa1, 0x2f, 0x86, 0xcb, 0x2c, 0xf5, 0x87, 0x2b, 0x1e, 0xf3, 0xa5, 0xc8,
	0x76, 0x5f, 0x9a, 0x66, 0x89, 0x4a, 0xd0, 0xb3, 0x5d, 0x2a, 0x35, 0xa9, 0x54, 0xa7, 0xd2, 0x32,
	0xa5, 0xff, 0xf6, 0x48, 0x49, 0xf1, 0x4b, 0xe9, 0x5f, 0x51, 0xca, 0xe9, 0x80, 0xfd, 0x2d, 0x94,
	0x8a, 0x89, 0x2b, 0x87, 0x42, 0xdb, 0x53, 0x3c, 0xd3, 0x67, 0xe4, 0x40, 0x2d, 0x0c, 0xb0, 0x45,
	0xac, 0x41, 0x67, 0x84, 0x6e, 0xb6, 0x18, 0x3c, 0x91, 0x5d, 0x87, 0xbe, 0x20, 0xe7, 0xe3, 0xbf,
	0x5b, 0x6c, 0xb1, 0x5a, 0x18, 0x38, 0x19, 0xd8, 0x9e, 0x4a, 0xd2, 0x8a, 0xe9, 0xe8, 0x33, 0x34,
	0xd3, 0x2c, 0x8f, 0x05, 0xae, 0x11, 0x6b, 0xd0, 0x1e, 0xbd, 0xbb, 0xd9, 0xe2, 0xd7, 0xae, 0x76,
	0x10, 0x59, 0x24, 0x4b, 0xc2, 0x2f, 0x94, 0xc8, 0x88, 0x54, 0x49, 0x9a, 0x86, 0xf1, 0x92, 0xa8,
	0xcb, 0x7d, 0x8c, 0x15, 0x58, 0x07, 0xa0, 0x6d, 0x30, 0xba, 0xdf, 0x3f, 0x35, 0xb0, 0x4b, 0x1e,
	0xd4, 0xbd, 0x6d, 0xa0, 0x24, 0x6b, 0x49, 0xc5, 0x55, 0x2e, 0x0d, 0x5b, 0xf7, 0xec, 0x0d, 0x3d,
	0xb0, 0x32, 0x5a, 0x56, 0xa1, 0x9e, 0x81, 0xb0, 0x12, 0x8a, 0x1e, 0x43, 0x33, 0x16, 0x22, 0x90,
	0xb8, 0x4e, 0xea, 0x83, 0x0e, 0x2b, 0x0c, 0xf4, 0x1c, 0x3a, 0xa6, 0x43, 0xbe, 0x88, 0x04, 0x6e,
	0xe8, 0x59, 0xd8, 0xad, 0x03, 0xf5, 0xa1, 0xad, 0x3b, 0x35, 0xc1, 0xa6, 0x09, 0xee, 0x6d, 0x84,
	0xa0, 0x11, 0xf3, 0x95, 0xc0, 0x2d, 0xd3, 0xa6, 0x39, 0x6b, 0x5f, 0x20, 0xa4, 0x8f, 0xed, 0xc2,
	0xa7, 0xcf, 0xce, 0x57, 0x68, 0x15, 0x9d, 0xa0, 0xfb, 0x60, 0x7b, 0xf3, 0x99, 0xeb, 0x4e, 0xc6,
	0xbd, 0x7b, 0xe8, 0x01, 0xb4, 0xbd, 0xf9, 0x27, 0x36, 0x3f, 0x9f, 0x7e, 0xe9, 0x59, 0x3a, 0xc4,
	0x7e, 0x4c, 0xa7, 0xda, 0xa8, 0x15, 0xa1, 0x99, 0xeb, 0x6a, 0xab, 0xae, 0x43, 0x13, 0xc6, 0x66,
	0x6c, 0x32, 0xee, 0x35, 0xce, 0xfe, 0xd5, 0xc1, 0xfe, 0x5e, 0xcc, 0x89, 0x7e, 0x43, 0x43, 0x5f,
	0x36, 0x3a, 0x39, 0xb8, 0x8d, 0x52, 0x0f, 0xfd, 0x93, 0x2a, 0x3b, 0x73, 0x5e, 0xae, 0x37, 0xf8,
	0x85, 0x86, 0x10, 0x1e, 0x45, 0xe6, 0xca, 0xf8, 0x35, 0x0f, 0x23, 0x3d, 0xf0, 0xfe, 0x62, 0x4f,
	0x2d, 0x14, 0x42, 0xd3, 0x88, 0x0b, 0xbd, 0x3a, 0x5c, 0xb5, 0x14, 0x60, 0x45, 0xf2, 0x47, 0xeb,
	0x0d, 0x7e, 0x68, 0x30, 0x84, 0xef, 0xd8, 0xd0, 0x05, 0x34, 0xb4, 0x2e, 0x8f, 0x4c, 0x59, 0x4a,
	0xb7, 0x22, 0x11, 0x5a, 0x6f, 0x70, 0x57, 0x43, 0xee, 0xf0, 0x5c, 0x41, 0xd3, 0x68, 0xf1, 0xc8,
	0x48, 0x3b, 0xbd, 0x56, 0x64, 0x7a, 0xba, 0xde, 0xe0, 0x27, 0xc5, 0xbb, 0xc8, 0xe3, 0x5c, 0x8a,
	0xe0, 0xce, 0x16, 0x47, 0xa7, 0x3f, 0x69, 0xb5, 0x3f, 0x8c, 0x8f, 0xe5, 0x77, 0xd1, 0x32, 0xcf,
	0xfc, 0xfd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x1e, 0x58, 0x54, 0x69, 0x04, 0x00, 0x00,
}
