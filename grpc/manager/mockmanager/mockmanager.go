// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/grpc/manager (interfaces: Manager_ListServer,Manager_PruneServer)

package mockmanager

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	manager "github.com/stratumn/alice/grpc/manager"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockManager_ListServer is a mock of Manager_ListServer interface
type MockManager_ListServer struct {
	ctrl     *gomock.Controller
	recorder *MockManager_ListServerMockRecorder
}

// MockManager_ListServerMockRecorder is the mock recorder for MockManager_ListServer
type MockManager_ListServerMockRecorder struct {
	mock *MockManager_ListServer
}

// NewMockManager_ListServer creates a new mock instance
func NewMockManager_ListServer(ctrl *gomock.Controller) *MockManager_ListServer {
	mock := &MockManager_ListServer{ctrl: ctrl}
	mock.recorder = &MockManager_ListServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager_ListServer) EXPECT() *MockManager_ListServerMockRecorder {
	return _m.recorder
}

// Context mocks base method
func (_m *MockManager_ListServer) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockManager_ListServerMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockManager_ListServer)(nil).Context))
}

// RecvMsg mocks base method
func (_m *MockManager_ListServer) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockManager_ListServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecvMsg", reflect.TypeOf((*MockManager_ListServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (_m *MockManager_ListServer) Send(_param0 *manager.Service) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockManager_ListServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Send", reflect.TypeOf((*MockManager_ListServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (_m *MockManager_ListServer) SendHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SendHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (_mr *MockManager_ListServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendHeader", reflect.TypeOf((*MockManager_ListServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (_m *MockManager_ListServer) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockManager_ListServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMsg", reflect.TypeOf((*MockManager_ListServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (_m *MockManager_ListServer) SetHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SetHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (_mr *MockManager_ListServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetHeader", reflect.TypeOf((*MockManager_ListServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (_m *MockManager_ListServer) SetTrailer(_param0 metadata.MD) {
	_m.ctrl.Call(_m, "SetTrailer", _param0)
}

// SetTrailer indicates an expected call of SetTrailer
func (_mr *MockManager_ListServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetTrailer", reflect.TypeOf((*MockManager_ListServer)(nil).SetTrailer), arg0)
}

// MockManager_PruneServer is a mock of Manager_PruneServer interface
type MockManager_PruneServer struct {
	ctrl     *gomock.Controller
	recorder *MockManager_PruneServerMockRecorder
}

// MockManager_PruneServerMockRecorder is the mock recorder for MockManager_PruneServer
type MockManager_PruneServerMockRecorder struct {
	mock *MockManager_PruneServer
}

// NewMockManager_PruneServer creates a new mock instance
func NewMockManager_PruneServer(ctrl *gomock.Controller) *MockManager_PruneServer {
	mock := &MockManager_PruneServer{ctrl: ctrl}
	mock.recorder = &MockManager_PruneServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockManager_PruneServer) EXPECT() *MockManager_PruneServerMockRecorder {
	return _m.recorder
}

// Context mocks base method
func (_m *MockManager_PruneServer) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockManager_PruneServerMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockManager_PruneServer)(nil).Context))
}

// RecvMsg mocks base method
func (_m *MockManager_PruneServer) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockManager_PruneServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecvMsg", reflect.TypeOf((*MockManager_PruneServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (_m *MockManager_PruneServer) Send(_param0 *manager.Service) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockManager_PruneServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Send", reflect.TypeOf((*MockManager_PruneServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (_m *MockManager_PruneServer) SendHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SendHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (_mr *MockManager_PruneServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendHeader", reflect.TypeOf((*MockManager_PruneServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (_m *MockManager_PruneServer) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockManager_PruneServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMsg", reflect.TypeOf((*MockManager_PruneServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (_m *MockManager_PruneServer) SetHeader(_param0 metadata.MD) error {
	ret := _m.ctrl.Call(_m, "SetHeader", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (_mr *MockManager_PruneServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetHeader", reflect.TypeOf((*MockManager_PruneServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (_m *MockManager_PruneServer) SetTrailer(_param0 metadata.MD) {
	_m.ctrl.Call(_m, "SetTrailer", _param0)
}

// SetTrailer indicates an expected call of SetTrailer
func (_mr *MockManager_PruneServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetTrailer", reflect.TypeOf((*MockManager_PruneServer)(nil).SetTrailer), arg0)
}
