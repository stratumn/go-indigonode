// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/raft/raft.proto

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/grpc/raft/raft.proto

It has these top-level messages:
	Empty
	Peer
	PeerID
	StatusInfo
	Proposal
	Entry
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Peer struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Peer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Peer) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type PeerID struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PeerID) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type StatusInfo struct {
	Running bool   `protobuf:"varint,1,opt,name=running" json:"running,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *StatusInfo) Reset()                    { *m = StatusInfo{} }
func (m *StatusInfo) String() string            { return proto.CompactTextString(m) }
func (*StatusInfo) ProtoMessage()               {}
func (*StatusInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusInfo) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *StatusInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Proposal struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Proposal) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Entry struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Entry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "stratumn.alice.grpc.raft.Empty")
	proto.RegisterType((*Peer)(nil), "stratumn.alice.grpc.raft.Peer")
	proto.RegisterType((*PeerID)(nil), "stratumn.alice.grpc.raft.PeerID")
	proto.RegisterType((*StatusInfo)(nil), "stratumn.alice.grpc.raft.StatusInfo")
	proto.RegisterType((*Proposal)(nil), "stratumn.alice.grpc.raft.Proposal")
	proto.RegisterType((*Entry)(nil), "stratumn.alice.grpc.raft.Entry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusInfo, error)
	Peers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Raft_PeersClient, error)
	Discover(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (Raft_DiscoverClient, error)
	Invite(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Empty, error)
	Join(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Empty, error)
	Expel(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Empty, error)
	Propose(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error)
	Log(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Raft_LogClient, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.raft.Raft/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.raft.Raft/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusInfo, error) {
	out := new(StatusInfo)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.raft.Raft/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Peers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Raft_PeersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Raft_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.raft.Raft/Peers", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Raft_PeersClient interface {
	Recv() (*Peer, error)
	grpc.ClientStream
}

type raftPeersClient struct {
	grpc.ClientStream
}

func (x *raftPeersClient) Recv() (*Peer, error) {
	m := new(Peer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftClient) Discover(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (Raft_DiscoverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Raft_serviceDesc.Streams[1], c.cc, "/stratumn.alice.grpc.raft.Raft/Discover", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftDiscoverClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Raft_DiscoverClient interface {
	Recv() (*Peer, error)
	grpc.ClientStream
}

type raftDiscoverClient struct {
	grpc.ClientStream
}

func (x *raftDiscoverClient) Recv() (*Peer, error) {
	m := new(Peer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftClient) Invite(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.raft.Raft/Invite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Join(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.raft.Raft/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Expel(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.raft.Raft/Expel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Propose(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.raft.Raft/Propose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Log(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Raft_LogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Raft_serviceDesc.Streams[2], c.cc, "/stratumn.alice.grpc.raft.Raft/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Raft_LogClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type raftLogClient struct {
	grpc.ClientStream
}

func (x *raftLogClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Raft service

type RaftServer interface {
	Start(context.Context, *Empty) (*Empty, error)
	Stop(context.Context, *Empty) (*Empty, error)
	Status(context.Context, *Empty) (*StatusInfo, error)
	Peers(*Empty, Raft_PeersServer) error
	Discover(*PeerID, Raft_DiscoverServer) error
	Invite(context.Context, *PeerID) (*Empty, error)
	Join(context.Context, *PeerID) (*Empty, error)
	Expel(context.Context, *PeerID) (*Empty, error)
	Propose(context.Context, *Proposal) (*Empty, error)
	Log(*Empty, Raft_LogServer) error
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.raft.Raft/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Start(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.raft.Raft/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.raft.Raft/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Peers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaftServer).Peers(m, &raftPeersServer{stream})
}

type Raft_PeersServer interface {
	Send(*Peer) error
	grpc.ServerStream
}

type raftPeersServer struct {
	grpc.ServerStream
}

func (x *raftPeersServer) Send(m *Peer) error {
	return x.ServerStream.SendMsg(m)
}

func _Raft_Discover_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PeerID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaftServer).Discover(m, &raftDiscoverServer{stream})
}

type Raft_DiscoverServer interface {
	Send(*Peer) error
	grpc.ServerStream
}

type raftDiscoverServer struct {
	grpc.ServerStream
}

func (x *raftDiscoverServer) Send(m *Peer) error {
	return x.ServerStream.SendMsg(m)
}

func _Raft_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.raft.Raft/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Invite(ctx, req.(*PeerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.raft.Raft/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Join(ctx, req.(*PeerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Expel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Expel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.raft.Raft/Expel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Expel(ctx, req.(*PeerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.raft.Raft/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Propose(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaftServer).Log(m, &raftLogServer{stream})
}

type Raft_LogServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type raftLogServer struct {
	grpc.ServerStream
}

func (x *raftLogServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Raft_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Raft_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Raft_Status_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _Raft_Invite_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Raft_Join_Handler,
		},
		{
			MethodName: "Expel",
			Handler:    _Raft_Expel_Handler,
		},
		{
			MethodName: "Propose",
			Handler:    _Raft_Propose_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Peers",
			Handler:       _Raft_Peers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Discover",
			Handler:       _Raft_Discover_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Log",
			Handler:       _Raft_Log_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/raft/raft.proto",
}

func init() { proto.RegisterFile("github.com/stratumn/alice/grpc/raft/raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x95, 0x25, 0xd9, 0x5d, 0x86, 0x4a, 0x08, 0xa3, 0x56, 0x6e, 0x69, 0xa9, 0x09, 0x20,
	0x0a, 0x2a, 0xd9, 0x0a, 0x0e, 0x1c, 0x38, 0x51, 0x6d, 0x41, 0x41, 0x08, 0xad, 0xd2, 0x1b, 0xe2,
	0xe2, 0x6e, 0xbc, 0xa9, 0x51, 0xd6, 0x0e, 0xb6, 0x53, 0x6d, 0xaf, 0x79, 0x11, 0xa4, 0x9e, 0x78,
	0x81, 0x9c, 0xf6, 0xa5, 0x78, 0x04, 0xe4, 0xfc, 0xa1, 0x54, 0xa2, 0x4d, 0x25, 0x7a, 0x48, 0x0e,
	0xe3, 0x6f, 0x7e, 0xdf, 0xd8, 0x33, 0x36, 0x04, 0x09, 0x37, 0xc7, 0xf9, 0x51, 0x30, 0x95, 0xf3,
	0x91, 0x36, 0x8a, 0x9a, 0x7c, 0x2e, 0x46, 0x34, 0xe5, 0x53, 0x36, 0x4a, 0x54, 0x36, 0x1d, 0x29,
	0x3a, 0x33, 0xd5, 0x2f, 0xc8, 0x94, 0x34, 0x12, 0xe1, 0x56, 0x14, 0x54, 0xa2, 0xc0, 0x8a, 0x02,
	0xbb, 0xbe, 0xb1, 0xdb, 0x41, 0x62, 0x0b, 0x63, 0xbf, 0x9a, 0xe3, 0x0f, 0xc0, 0x3b, 0x98, 0x67,
	0xe6, 0xd4, 0xff, 0x0c, 0xee, 0x84, 0x31, 0x85, 0x1e, 0x40, 0x8f, 0xc7, 0xd8, 0x21, 0xce, 0x8e,
	0xbb, 0x7f, 0xe7, 0x6c, 0x89, 0x07, 0x11, 0x9d, 0x19, 0x12, 0x8e, 0xa3, 0x1e, 0x8f, 0xd1, 0x73,
	0x18, 0xd0, 0x38, 0x56, 0x4c, 0x6b, 0xdc, 0x23, 0xce, 0xce, 0xca, 0xfe, 0x5d, 0xab, 0xb0, 0x79,
	0x24, 0x1c, 0xff, 0x5a, 0x62, 0x27, 0x6a, 0xd7, 0xfd, 0x37, 0xd0, 0xb7, 0xf1, 0x70, 0x8c, 0x5e,
	0x9e, 0x27, 0x39, 0x55, 0xd2, 0xfd, 0xbf, 0x92, 0x7e, 0x2e, 0xb1, 0x73, 0x31, 0x71, 0x02, 0x70,
	0x68, 0xa8, 0xc9, 0x75, 0x28, 0x66, 0x12, 0x3d, 0x85, 0x81, 0xca, 0x85, 0xe0, 0x22, 0xa9, 0x92,
	0x87, 0x4d, 0x4d, 0x75, 0x28, 0x6a, 0xd7, 0x9a, 0xaa, 0x7b, 0xff, 0xac, 0xda, 0xdf, 0x85, 0xe1,
	0x44, 0xc9, 0x4c, 0x6a, 0x9a, 0x22, 0x02, 0x6e, 0x4c, 0x0d, 0x6d, 0x2a, 0x59, 0x39, 0x5b, 0x62,
	0x77, 0x4c, 0x0d, 0xb5, 0x65, 0x44, 0xd5, 0x8a, 0xff, 0x1e, 0xbc, 0x03, 0x61, 0xd4, 0x29, 0xda,
	0x06, 0x8f, 0x8b, 0x98, 0x2d, 0x9a, 0xc3, 0xb8, 0x7d, 0xb6, 0xc4, 0x5e, 0x68, 0x03, 0x51, 0x1d,
	0x47, 0x9b, 0x0d, 0xab, 0x3e, 0x8a, 0x61, 0xcb, 0xaa, 0x39, 0xaf, 0x7e, 0x0c, 0xc1, 0xb5, 0x55,
	0xa0, 0x14, 0xbc, 0x43, 0x43, 0x95, 0x41, 0xdb, 0xc1, 0x65, 0x4d, 0x0b, 0xaa, 0x1e, 0x6c, 0x74,
	0x09, 0xfc, 0x47, 0x45, 0x89, 0xb7, 0x2a, 0x18, 0xd1, 0x5c, 0x24, 0x29, 0x23, 0x42, 0xc6, 0x8c,
	0x58, 0x05, 0xd1, 0x4c, 0x9d, 0x30, 0x85, 0xbe, 0x83, 0x7b, 0x68, 0x64, 0x76, 0x03, 0x66, 0xcf,
	0x8a, 0x12, 0x3f, 0xb6, 0x2c, 0x62, 0x8e, 0x59, 0x83, 0x27, 0x54, 0xc4, 0x44, 0xb1, 0xb9, 0x3c,
	0x61, 0x55, 0xd4, 0xee, 0x14, 0xcd, 0xa0, 0x5f, 0x77, 0xac, 0xdb, 0xf4, 0xc9, 0xe5, 0x82, 0xf3,
	0xa6, 0xfb, 0xab, 0x45, 0x89, 0xef, 0x7d, 0x60, 0xed, 0x9e, 0x88, 0xae, 0xe9, 0x14, 0x3c, 0x3b,
	0x35, 0xd7, 0xb0, 0x79, 0x78, 0xb9, 0xc0, 0x12, 0xce, 0x0d, 0xa6, 0x69, 0xae, 0x0d, 0x53, 0x24,
	0xb3, 0xdc, 0x3d, 0x07, 0x71, 0x18, 0x8e, 0xb9, 0x9e, 0x4a, 0x7b, 0x92, 0xe4, 0x6a, 0x48, 0x38,
	0xee, 0xb4, 0x59, 0x2f, 0x4a, 0xbc, 0xda, 0xf2, 0x48, 0x35, 0x92, 0x8d, 0xe1, 0x9e, 0x83, 0xbe,
	0x41, 0x3f, 0x14, 0x27, 0xdc, 0xb0, 0x6b, 0x18, 0x75, 0xf6, 0x6a, 0xab, 0x28, 0xf1, 0xfa, 0xbb,
	0x38, 0x26, 0xb4, 0x9e, 0x08, 0x23, 0xab, 0xf6, 0x34, 0x6e, 0x88, 0x81, 0xfb, 0x51, 0x72, 0x71,
	0x13, 0x4e, 0x1b, 0x45, 0x89, 0xd7, 0x2c, 0x8c, 0xb0, 0x05, 0xd7, 0xdc, 0x70, 0x91, 0xfc, 0xb1,
	0x49, 0xc1, 0x3b, 0x58, 0x64, 0x2c, 0xbd, 0x09, 0x1f, 0x52, 0x94, 0x78, 0x33, 0xaa, 0x27, 0xcd,
	0x76, 0x87, 0xcc, 0x94, 0x9c, 0x5f, 0xd8, 0xd4, 0x57, 0x18, 0xd4, 0xd7, 0x9a, 0x21, 0xff, 0x0a,
	0xbf, 0xe6, 0xe6, 0x77, 0x3b, 0xae, 0x14, 0x25, 0x1e, 0x4e, 0x72, 0x53, 0x0f, 0x35, 0x85, 0x5b,
	0x9f, 0x64, 0xf2, 0x7f, 0xd7, 0xc8, 0x3e, 0x23, 0xfe, 0x5a, 0x51, 0x62, 0x64, 0x67, 0x2d, 0x95,
	0x09, 0x91, 0x33, 0xc2, 0x84, 0x51, 0x9c, 0xe9, 0x3d, 0x67, 0xff, 0xc5, 0x97, 0x9d, 0x6b, 0xbc,
	0xfa, 0x6f, 0xed, 0xef, 0xa8, 0x5f, 0x3d, 0xd7, 0xaf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xca,
	0x74, 0x9b, 0x62, 0x28, 0x06, 0x00, 0x00,
}
