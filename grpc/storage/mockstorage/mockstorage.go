// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stratumn/alice/grpc/storage (interfaces: Storage_UploadServer)

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/stratumn/alice/grpc/storage"
	metadata "google.golang.org/grpc/metadata"
)

// MockStorage_UploadServer is a mock of Storage_UploadServer interface
type MockStorage_UploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorage_UploadServerMockRecorder
}

// MockStorage_UploadServerMockRecorder is the mock recorder for MockStorage_UploadServer
type MockStorage_UploadServerMockRecorder struct {
	mock *MockStorage_UploadServer
}

// NewMockStorage_UploadServer creates a new mock instance
func NewMockStorage_UploadServer(ctrl *gomock.Controller) *MockStorage_UploadServer {
	mock := &MockStorage_UploadServer{ctrl: ctrl}
	mock.recorder = &MockStorage_UploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage_UploadServer) EXPECT() *MockStorage_UploadServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockStorage_UploadServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockStorage_UploadServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStorage_UploadServer)(nil).Context))
}

// Recv mocks base method
func (m *MockStorage_UploadServer) Recv() (*storage.FileChunk, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*storage.FileChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockStorage_UploadServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStorage_UploadServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockStorage_UploadServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockStorage_UploadServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStorage_UploadServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockStorage_UploadServer) SendAndClose(arg0 *storage.Ack) error {
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockStorage_UploadServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockStorage_UploadServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockStorage_UploadServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockStorage_UploadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStorage_UploadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockStorage_UploadServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockStorage_UploadServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStorage_UploadServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockStorage_UploadServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockStorage_UploadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStorage_UploadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockStorage_UploadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockStorage_UploadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStorage_UploadServer)(nil).SetTrailer), arg0)
}
