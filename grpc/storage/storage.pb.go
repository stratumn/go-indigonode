// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/grpc/storage/storage.proto

/*
	Package storage is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/grpc/storage/storage.proto

	It has these top-level messages:
		SessionFileChunk
		UploadReq
		UploadSession
		AuthRequest
		DownloadRequest
		Ack
		UploadAck
*/
package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import stratumn_alice_pb_storage "github.com/stratumn/alice/pb/storage"

import context "context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionFileChunk struct {
	// file name is required only on first message.
	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SessionFileChunk) Reset()                    { *m = SessionFileChunk{} }
func (m *SessionFileChunk) String() string            { return proto.CompactTextString(m) }
func (*SessionFileChunk) ProtoMessage()               {}
func (*SessionFileChunk) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{0} }

func (m *SessionFileChunk) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SessionFileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UploadReq struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (m *UploadReq) Reset()                    { *m = UploadReq{} }
func (m *UploadReq) String() string            { return proto.CompactTextString(m) }
func (*UploadReq) ProtoMessage()               {}
func (*UploadReq) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{1} }

func (m *UploadReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type UploadSession struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UploadSession) Reset()                    { *m = UploadSession{} }
func (m *UploadSession) String() string            { return proto.CompactTextString(m) }
func (*UploadSession) ProtoMessage()               {}
func (*UploadSession) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{2} }

func (m *UploadSession) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type AuthRequest struct {
	PeerIds  [][]byte `protobuf:"bytes,1,rep,name=peer_ids,json=peerIds" json:"peer_ids,omitempty"`
	FileHash []byte   `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{3} }

func (m *AuthRequest) GetPeerIds() [][]byte {
	if m != nil {
		return m.PeerIds
	}
	return nil
}

func (m *AuthRequest) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

type DownloadRequest struct {
	PeerId   []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	FileHash []byte `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (m *DownloadRequest) Reset()                    { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()               {}
func (*DownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{4} }

func (m *DownloadRequest) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *DownloadRequest) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

// An empty ack.
type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{5} }

type UploadAck struct {
	FileHash []byte `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (m *UploadAck) Reset()                    { *m = UploadAck{} }
func (m *UploadAck) String() string            { return proto.CompactTextString(m) }
func (*UploadAck) ProtoMessage()               {}
func (*UploadAck) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{6} }

func (m *UploadAck) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionFileChunk)(nil), "stratumn.alice.grpc.storage.SessionFileChunk")
	proto.RegisterType((*UploadReq)(nil), "stratumn.alice.grpc.storage.UploadReq")
	proto.RegisterType((*UploadSession)(nil), "stratumn.alice.grpc.storage.UploadSession")
	proto.RegisterType((*AuthRequest)(nil), "stratumn.alice.grpc.storage.AuthRequest")
	proto.RegisterType((*DownloadRequest)(nil), "stratumn.alice.grpc.storage.DownloadRequest")
	proto.RegisterType((*Ack)(nil), "stratumn.alice.grpc.storage.Ack")
	proto.RegisterType((*UploadAck)(nil), "stratumn.alice.grpc.storage.UploadAck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Storage service

type StorageClient interface {
	// Upload a file to the alice node.
	Upload(ctx context.Context, opts ...grpc.CallOption) (Storage_UploadClient, error)
	// Sends a request to the server to start a new upload.
	StartUpload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadSession, error)
	// Upload a single chunk of a file to the server.
	UploadChunk(ctx context.Context, in *SessionFileChunk, opts ...grpc.CallOption) (*Ack, error)
	// Notifies the server that the session's file has been entirely sent.
	EndUpload(ctx context.Context, in *UploadSession, opts ...grpc.CallOption) (*UploadAck, error)
	// Give peers access to a file.
	AuthorizePeers(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Ack, error)
	// Download downloads a file from a peer.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*Ack, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Storage_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Storage_serviceDesc.Streams[0], c.cc, "/stratumn.alice.grpc.storage.Storage/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageUploadClient{stream}
	return x, nil
}

type Storage_UploadClient interface {
	Send(*stratumn_alice_pb_storage.FileChunk) error
	CloseAndRecv() (*UploadAck, error)
	grpc.ClientStream
}

type storageUploadClient struct {
	grpc.ClientStream
}

func (x *storageUploadClient) Send(m *stratumn_alice_pb_storage.FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageUploadClient) CloseAndRecv() (*UploadAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) StartUpload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadSession, error) {
	out := new(UploadSession)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.storage.Storage/StartUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UploadChunk(ctx context.Context, in *SessionFileChunk, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.storage.Storage/UploadChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) EndUpload(ctx context.Context, in *UploadSession, opts ...grpc.CallOption) (*UploadAck, error) {
	out := new(UploadAck)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.storage.Storage/EndUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) AuthorizePeers(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.storage.Storage/AuthorizePeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/stratumn.alice.grpc.storage.Storage/Download", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Storage service

type StorageServer interface {
	// Upload a file to the alice node.
	Upload(Storage_UploadServer) error
	// Sends a request to the server to start a new upload.
	StartUpload(context.Context, *UploadReq) (*UploadSession, error)
	// Upload a single chunk of a file to the server.
	UploadChunk(context.Context, *SessionFileChunk) (*Ack, error)
	// Notifies the server that the session's file has been entirely sent.
	EndUpload(context.Context, *UploadSession) (*UploadAck, error)
	// Give peers access to a file.
	AuthorizePeers(context.Context, *AuthRequest) (*Ack, error)
	// Download downloads a file from a peer.
	Download(context.Context, *DownloadRequest) (*Ack, error)
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Upload(&storageUploadServer{stream})
}

type Storage_UploadServer interface {
	SendAndClose(*UploadAck) error
	Recv() (*stratumn_alice_pb_storage.FileChunk, error)
	grpc.ServerStream
}

type storageUploadServer struct {
	grpc.ServerStream
}

func (x *storageUploadServer) SendAndClose(m *UploadAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageUploadServer) Recv() (*stratumn_alice_pb_storage.FileChunk, error) {
	m := new(stratumn_alice_pb_storage.FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_StartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).StartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.storage.Storage/StartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).StartUpload(ctx, req.(*UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionFileChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.storage.Storage/UploadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UploadChunk(ctx, req.(*SessionFileChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_EndUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).EndUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.storage.Storage/EndUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).EndUpload(ctx, req.(*UploadSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_AuthorizePeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).AuthorizePeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.storage.Storage/AuthorizePeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).AuthorizePeers(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratumn.alice.grpc.storage.Storage/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratumn.alice.grpc.storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartUpload",
			Handler:    _Storage_StartUpload_Handler,
		},
		{
			MethodName: "UploadChunk",
			Handler:    _Storage_UploadChunk_Handler,
		},
		{
			MethodName: "EndUpload",
			Handler:    _Storage_EndUpload_Handler,
		},
		{
			MethodName: "AuthorizePeers",
			Handler:    _Storage_AuthorizePeers_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _Storage_Download_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Storage_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/stratumn/alice/grpc/storage/storage.proto",
}

func (m *SessionFileChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionFileChunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *UploadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	return i, nil
}

func (m *UploadSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *AuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerIds) > 0 {
		for _, b := range m.PeerIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStorage(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.FileHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileHash)))
		i += copy(dAtA[i:], m.FileHash)
	}
	return i, nil
}

func (m *DownloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.PeerId)))
		i += copy(dAtA[i:], m.PeerId)
	}
	if len(m.FileHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileHash)))
		i += copy(dAtA[i:], m.FileHash)
	}
	return i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UploadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileHash)))
		i += copy(dAtA[i:], m.FileHash)
	}
	return i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SessionFileChunk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *UploadReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *UploadSession) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *AuthRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.PeerIds) > 0 {
		for _, b := range m.PeerIds {
			l = len(b)
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *DownloadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *Ack) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UploadAck) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func sovStorage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionFileChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionFileChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionFileChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIds = append(m.PeerIds, make([]byte, postIndex-iNdEx))
			copy(m.PeerIds[len(m.PeerIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = append(m.FileHash[:0], dAtA[iNdEx:postIndex]...)
			if m.FileHash == nil {
				m.FileHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = append(m.PeerId[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerId == nil {
				m.PeerId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = append(m.FileHash[:0], dAtA[iNdEx:postIndex]...)
			if m.FileHash == nil {
				m.FileHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = append(m.FileHash[:0], dAtA[iNdEx:postIndex]...)
			if m.FileHash == nil {
				m.FileHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStorage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStorage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStorage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/alice/grpc/storage/storage.proto", fileDescriptorStorage)
}

var fileDescriptorStorage = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xae, 0xdb, 0xfe, 0xb9, 0x4c, 0xfa, 0x43, 0x35, 0x20, 0x31, 0x0a, 0x52, 0x18, 0x59, 0x08,
	0x45, 0x55, 0x70, 0x50, 0x0b, 0x2b, 0x36, 0xc4, 0x94, 0x4b, 0x36, 0x08, 0x25, 0xb0, 0xa9, 0x10,
	0x65, 0x62, 0x9f, 0xc6, 0x56, 0x12, 0xdb, 0xf1, 0x8c, 0x29, 0xe5, 0x49, 0x58, 0x7b, 0xc5, 0x3b,
	0xf8, 0x05, 0xd8, 0x20, 0xf1, 0x08, 0x28, 0xbc, 0x00, 0x8f, 0x80, 0x66, 0x3c, 0x0e, 0x10, 0x95,
	0xe0, 0xb2, 0x88, 0x26, 0xf2, 0x7c, 0x97, 0x73, 0x8e, 0xbe, 0x33, 0xe8, 0xee, 0xd8, 0x17, 0x5e,
	0x32, 0xb2, 0x9c, 0x70, 0xd6, 0xe5, 0x22, 0x66, 0x22, 0x99, 0x05, 0x5d, 0x36, 0xf5, 0x1d, 0xe8,
	0x8e, 0xe3, 0xc8, 0xe9, 0x72, 0x11, 0xc6, 0x6c, 0x0c, 0xc5, 0x69, 0x45, 0x71, 0x28, 0x42, 0x7c,
	0xbd, 0x80, 0x5a, 0x0a, 0x6a, 0x49, 0xa8, 0xa5, 0x21, 0xcd, 0xce, 0x5f, 0x24, 0xe1, 0x9d, 0x90,
	0xbf, 0x5c, 0xaa, 0xb9, 0xff, 0x67, 0x74, 0x34, 0x3a, 0xdf, 0xde, 0x3c, 0x43, 0xbb, 0x43, 0xe0,
	0xdc, 0x0f, 0x83, 0xc7, 0xfe, 0x14, 0x1e, 0x7a, 0x49, 0x30, 0xc1, 0x77, 0xd0, 0xa6, 0xef, 0x12,
	0x83, 0x1a, 0xed, 0x1d, 0x9b, 0xa6, 0x19, 0x21, 0x7d, 0x97, 0x86, 0x27, 0x54, 0x78, 0x40, 0x93,
	0x68, 0x1a, 0x32, 0x97, 0xf2, 0x9c, 0xf2, 0x31, 0x23, 0xc6, 0x60, 0xd3, 0x77, 0xf1, 0x01, 0xda,
	0x76, 0x99, 0x60, 0x64, 0x53, 0x71, 0x6e, 0xa4, 0x19, 0xb9, 0x66, 0x9f, 0x09, 0xe0, 0x92, 0x16,
	0x06, 0x40, 0x4f, 0xfc, 0x29, 0x50, 0x47, 0x8a, 0x2b, 0x8a, 0x02, 0x9b, 0x36, 0xaa, 0xbf, 0x54,
	0x72, 0x03, 0x98, 0xe3, 0x7b, 0xa8, 0x2e, 0x41, 0xc7, 0x01, 0x9b, 0x81, 0xb2, 0xae, 0xdb, 0x24,
	0xcd, 0xc8, 0xee, 0x33, 0x36, 0x83, 0xc2, 0x5c, 0x02, 0x14, 0xbf, 0x26, 0xff, 0xc9, 0x1b, 0xb3,
	0x87, 0xfe, 0xcf, 0x35, 0x74, 0x13, 0x17, 0xaf, 0xdd, 0x4c, 0x50, 0xa3, 0x97, 0x08, 0x6f, 0x00,
	0xf3, 0x04, 0xb8, 0xc0, 0x5d, 0x54, 0x8b, 0x00, 0xe2, 0x63, 0xdf, 0xe5, 0xc4, 0xa0, 0x5b, 0xed,
	0x1d, 0xfb, 0x6a, 0x9a, 0x91, 0xda, 0x73, 0x80, 0x98, 0xf6, 0x0f, 0xb9, 0xa4, 0x7d, 0x97, 0xd4,
	0xaa, 0x44, 0xf5, 0x5d, 0xbe, 0xac, 0xdc, 0x63, 0xdc, 0xd3, 0x03, 0x50, 0x95, 0x3f, 0x65, 0xdc,
	0x3b, 0xbf, 0x72, 0x79, 0x63, 0xbe, 0x45, 0x97, 0x0f, 0xc3, 0xd3, 0x40, 0xf7, 0xaf, 0xac, 0x3b,
	0xa8, 0xaa, 0xad, 0x75, 0x03, 0x57, 0xd2, 0x8c, 0x54, 0xb5, 0xf3, 0xd2, 0xb8, 0x92, 0x1b, 0xff,
	0xab, 0xef, 0x7f, 0x68, 0xab, 0xe7, 0x4c, 0xcc, 0x17, 0xc5, 0xf0, 0x7b, 0xce, 0x04, 0x3f, 0xf9,
	0x55, 0x2a, 0xb7, 0xde, 0x4b, 0x33, 0x62, 0xae, 0x4a, 0x51, 0xe1, 0x31, 0x41, 0x4f, 0x19, 0xd7,
	0xb3, 0x04, 0xf7, 0x77, 0xf1, 0xfd, 0xcf, 0xdb, 0xa8, 0x3a, 0xcc, 0xf3, 0x85, 0x8f, 0x50, 0x25,
	0x77, 0xc0, 0x37, 0xad, 0x95, 0x8c, 0x47, 0xa3, 0x22, 0xe1, 0xd6, 0x32, 0x75, 0xcd, 0x5b, 0xd6,
	0x9a, 0x4d, 0xb0, 0x96, 0xc5, 0x9a, 0x1b, 0x6d, 0x03, 0x3b, 0xa8, 0x31, 0x14, 0x2c, 0x16, 0xda,
	0xa0, 0x0c, 0x75, 0x00, 0xf3, 0xe6, 0x5e, 0x09, 0x9c, 0x0e, 0x92, 0xb9, 0x81, 0xdf, 0xa0, 0x46,
	0xfe, 0x29, 0xdf, 0x8a, 0xdb, 0x6b, 0xc9, 0xab, 0x4b, 0xd4, 0xa4, 0x6b, 0xe1, 0xaa, 0x11, 0xcc,
	0x50, 0xfd, 0x51, 0xe0, 0xea, 0x26, 0x2e, 0x50, 0x5c, 0xf9, 0x59, 0xe1, 0xd7, 0xe8, 0x92, 0x4c,
	0x77, 0x18, 0xfb, 0xef, 0x41, 0x26, 0x89, 0xe3, 0xf6, 0xfa, 0xc2, 0x7e, 0xae, 0x42, 0xa9, 0x16,
	0x5e, 0xa1, 0x5a, 0x11, 0x63, 0xdc, 0x59, 0x8b, 0x5f, 0x49, 0x7b, 0x19, 0x75, 0xfb, 0xc1, 0xa7,
	0x45, 0xcb, 0xf8, 0xb2, 0x68, 0x19, 0x5f, 0x17, 0x2d, 0xe3, 0xc3, 0xb7, 0xd6, 0xc6, 0x91, 0x55,
	0xee, 0x91, 0xbd, 0xaf, 0xcf, 0x51, 0x45, 0x3d, 0x73, 0x07, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xca, 0x56, 0xbf, 0x37, 0x9d, 0x05, 0x00, 0x00,
}
