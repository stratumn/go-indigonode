// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/pb/bootstrap/bootstrap.proto

/*
	Package bootstrap is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/pb/bootstrap/bootstrap.proto

	It has these top-level messages:
		Hello
		Ack
		CompleteReq
		Filter
		PeerID
		NodeIdentity
		UpdateProposal
*/
package bootstrap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type of network updates that can be proposed.
type UpdateType int32

const (
	UpdateType_None       UpdateType = 0
	UpdateType_AddNode    UpdateType = 1
	UpdateType_RemoveNode UpdateType = 2
)

var UpdateType_name = map[int32]string{
	0: "None",
	1: "AddNode",
	2: "RemoveNode",
}
var UpdateType_value = map[string]int32{
	"None":       0,
	"AddNode":    1,
	"RemoveNode": 2,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}
func (UpdateType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{0} }

// A simple Hello handshake message.
type Hello struct {
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{0} }

// A message ack.
type Ack struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{1} }

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// A request to complete the bootstrap phase.
type CompleteReq struct {
}

func (m *CompleteReq) Reset()                    { *m = CompleteReq{} }
func (m *CompleteReq) String() string            { return proto.CompactTextString(m) }
func (*CompleteReq) ProtoMessage()               {}
func (*CompleteReq) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{2} }

// A results filter.
type Filter struct {
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{3} }

// A base58-encoded PeerId.
type PeerID struct {
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{4} }

func (m *PeerID) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

// A message containing a proof of a node's identity.
type NodeIdentity struct {
	PeerId        []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PeerAddr      []byte `protobuf:"bytes,2,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	IdentityProof []byte `protobuf:"bytes,3,opt,name=identity_proof,json=identityProof,proto3" json:"identity_proof,omitempty"`
}

func (m *NodeIdentity) Reset()                    { *m = NodeIdentity{} }
func (m *NodeIdentity) String() string            { return proto.CompactTextString(m) }
func (*NodeIdentity) ProtoMessage()               {}
func (*NodeIdentity) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{5} }

func (m *NodeIdentity) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *NodeIdentity) GetPeerAddr() []byte {
	if m != nil {
		return m.PeerAddr
	}
	return nil
}

func (m *NodeIdentity) GetIdentityProof() []byte {
	if m != nil {
		return m.IdentityProof
	}
	return nil
}

// Proposal to update the network.
type UpdateProposal struct {
	UpdateType  UpdateType    `protobuf:"varint,1,opt,name=update_type,json=updateType,proto3,enum=stratumn.alice.pb.bootstrap.UpdateType" json:"update_type,omitempty"`
	NodeDetails *NodeIdentity `protobuf:"bytes,2,opt,name=node_details,json=nodeDetails" json:"node_details,omitempty"`
}

func (m *UpdateProposal) Reset()                    { *m = UpdateProposal{} }
func (m *UpdateProposal) String() string            { return proto.CompactTextString(m) }
func (*UpdateProposal) ProtoMessage()               {}
func (*UpdateProposal) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{6} }

func (m *UpdateProposal) GetUpdateType() UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return UpdateType_None
}

func (m *UpdateProposal) GetNodeDetails() *NodeIdentity {
	if m != nil {
		return m.NodeDetails
	}
	return nil
}

func init() {
	proto.RegisterType((*Hello)(nil), "stratumn.alice.pb.bootstrap.Hello")
	proto.RegisterType((*Ack)(nil), "stratumn.alice.pb.bootstrap.Ack")
	proto.RegisterType((*CompleteReq)(nil), "stratumn.alice.pb.bootstrap.CompleteReq")
	proto.RegisterType((*Filter)(nil), "stratumn.alice.pb.bootstrap.Filter")
	proto.RegisterType((*PeerID)(nil), "stratumn.alice.pb.bootstrap.PeerID")
	proto.RegisterType((*NodeIdentity)(nil), "stratumn.alice.pb.bootstrap.NodeIdentity")
	proto.RegisterType((*UpdateProposal)(nil), "stratumn.alice.pb.bootstrap.UpdateProposal")
	proto.RegisterEnum("stratumn.alice.pb.bootstrap.UpdateType", UpdateType_name, UpdateType_value)
}
func (m *Hello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hello) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *CompleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PeerID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.PeerId)))
		i += copy(dAtA[i:], m.PeerId)
	}
	return i, nil
}

func (m *NodeIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeIdentity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.PeerId)))
		i += copy(dAtA[i:], m.PeerId)
	}
	if len(m.PeerAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.PeerAddr)))
		i += copy(dAtA[i:], m.PeerAddr)
	}
	if len(m.IdentityProof) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.IdentityProof)))
		i += copy(dAtA[i:], m.IdentityProof)
	}
	return i, nil
}

func (m *UpdateProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProposal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.UpdateType))
	}
	if m.NodeDetails != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.NodeDetails.Size()))
		n1, err := m.NodeDetails.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintBootstrap(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Hello) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Ack) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *CompleteReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Filter) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PeerID) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *NodeIdentity) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.PeerAddr)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.IdentityProof)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *UpdateProposal) Size() (n int) {
	var l int
	_ = l
	if m.UpdateType != 0 {
		n += 1 + sovBootstrap(uint64(m.UpdateType))
	}
	if m.NodeDetails != nil {
		l = m.NodeDetails.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func sovBootstrap(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBootstrap(x uint64) (n int) {
	return sovBootstrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = append(m.PeerId[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerId == nil {
				m.PeerId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = append(m.PeerId[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerId == nil {
				m.PeerId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerAddr = append(m.PeerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerAddr == nil {
				m.PeerAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityProof = append(m.IdentityProof[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityProof == nil {
				m.IdentityProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= (UpdateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeDetails == nil {
				m.NodeDetails = &NodeIdentity{}
			}
			if err := m.NodeDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBootstrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBootstrap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBootstrap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBootstrap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBootstrap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBootstrap   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/alice/pb/bootstrap/bootstrap.proto", fileDescriptorBootstrap)
}

var fileDescriptorBootstrap = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xeb, 0x96, 0x26, 0xe9, 0x6c, 0xba, 0x8a, 0x0c, 0x87, 0x15, 0x95, 0xa2, 0x68, 0x2f,
	0xb4, 0xa8, 0xec, 0xa2, 0x56, 0xaa, 0x84, 0x38, 0x25, 0x8d, 0x50, 0x23, 0x50, 0x15, 0x59, 0xe5,
	0x00, 0x97, 0xc8, 0x1b, 0x0f, 0x65, 0xc5, 0x26, 0x63, 0xbc, 0x0e, 0x22, 0x6f, 0xc2, 0x39, 0x07,
	0xd4, 0x77, 0xd8, 0x17, 0xe0, 0xc8, 0x23, 0xa0, 0xf0, 0x02, 0x3c, 0x02, 0xb2, 0x43, 0x53, 0x2e,
	0x54, 0xf4, 0x60, 0x69, 0x66, 0xfc, 0xfb, 0xbe, 0xf1, 0x9f, 0x81, 0x93, 0xcb, 0xdc, 0xbe, 0x9f,
	0x65, 0xc9, 0x98, 0x26, 0x69, 0x69, 0x8d, 0xb4, 0xb3, 0xc9, 0x34, 0x95, 0x45, 0x3e, 0xc6, 0x54,
	0x67, 0x69, 0x46, 0x64, 0x5d, 0x55, 0xdf, 0x44, 0x89, 0x36, 0x64, 0x89, 0xef, 0x5d, 0xc3, 0x89,
	0x87, 0x13, 0x9d, 0x25, 0x6b, 0xe4, 0xe1, 0xe1, 0xbf, 0x4d, 0x2f, 0x8d, 0x1e, 0xa7, 0xf8, 0xd9,
	0xba, 0xb5, 0xb2, 0x8a, 0xeb, 0xb0, 0x7d, 0x86, 0x45, 0x41, 0xf1, 0x1e, 0x6c, 0x75, 0xc7, 0x1f,
	0xf8, 0x03, 0xd8, 0x46, 0x63, 0xc8, 0x44, 0xac, 0xc3, 0xf6, 0x77, 0xc4, 0x2a, 0x89, 0x77, 0x21,
	0x38, 0xa5, 0x89, 0x2e, 0xd0, 0xa2, 0xc0, 0x8f, 0x71, 0x03, 0x6a, 0x2f, 0xf2, 0xc2, 0xa2, 0x89,
	0x4f, 0xa0, 0x36, 0x44, 0x34, 0x83, 0x3e, 0x3f, 0x84, 0xba, 0x46, 0x34, 0xa3, 0x5c, 0x79, 0x69,
	0xb3, 0x77, 0x7f, 0x51, 0x45, 0x75, 0xb7, 0xd9, 0x19, 0xf4, 0xaf, 0xaa, 0x88, 0xfd, 0xaa, 0x22,
	0x26, 0x6a, 0x8e, 0x19, 0xa8, 0xf8, 0x2b, 0x83, 0xe6, 0x39, 0x29, 0x1c, 0x28, 0x9c, 0xda, 0xdc,
	0xce, 0xef, 0x26, 0xe7, 0x4f, 0x60, 0xc7, 0xd3, 0x52, 0x29, 0x13, 0x6d, 0x7a, 0xbe, 0xb5, 0xa8,
	0xa2, 0xa6, 0xe7, 0xbb, 0x4a, 0x19, 0x2c, 0x4b, 0xd1, 0x70, 0x88, 0x4b, 0xf8, 0x33, 0x08, 0xf3,
	0x3f, 0x8d, 0x46, 0xda, 0x10, 0xbd, 0x8b, 0xb6, 0xbc, 0x86, 0x2f, 0xaa, 0x28, 0x7c, 0xf9, 0xe6,
	0xb4, 0xa3, 0xa4, 0x95, 0x9d, 0xfd, 0x8b, 0x5e, 0xff, 0x40, 0xec, 0x5e, 0x93, 0x43, 0x07, 0xc6,
	0x57, 0x0c, 0xc2, 0xd7, 0x5a, 0x49, 0x8b, 0x43, 0x43, 0x9a, 0x4a, 0x59, 0xf0, 0x33, 0x08, 0x66,
	0xbe, 0x32, 0xb2, 0x73, 0x8d, 0xfe, 0xb8, 0xe1, 0xd1, 0xa3, 0xe4, 0x96, 0x3f, 0x49, 0x56, 0x0e,
	0x17, 0x73, 0x8d, 0x02, 0x66, 0xeb, 0x98, 0xbf, 0x82, 0xe6, 0x94, 0x14, 0x8e, 0x14, 0x5a, 0x99,
	0x17, 0xa5, 0xbf, 0x49, 0x70, 0x74, 0x70, 0xab, 0xd5, 0xdf, 0xaf, 0x26, 0x02, 0x27, 0xef, 0xaf,
	0xd4, 0x8f, 0x8f, 0x01, 0x6e, 0xfa, 0xf0, 0x06, 0xdc, 0x3b, 0xa7, 0x29, 0xb6, 0x36, 0x78, 0x00,
	0xf5, 0xae, 0x52, 0x4e, 0xd7, 0x62, 0x3c, 0x04, 0x10, 0x38, 0xa1, 0x4f, 0xe8, 0xf3, 0xcd, 0x5e,
	0xef, 0xdb, 0xb2, 0xcd, 0xbe, 0x2f, 0xdb, 0xec, 0xc7, 0xb2, 0xcd, 0xbe, 0xfc, 0x6c, 0x6f, 0xbc,
	0x7d, 0xfa, 0x7f, 0x43, 0xf9, 0x7c, 0x1d, 0x65, 0x35, 0x3f, 0x4a, 0xc7, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x07, 0x50, 0x87, 0xf8, 0xcf, 0x02, 0x00, 0x00,
}
