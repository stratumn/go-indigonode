// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/stratumn/alice/pb/coin/coin.proto

/*
Package coin is a generated protocol buffer package.

It is generated from these files:
	github.com/stratumn/alice/pb/coin/coin.proto

It has these top-level messages:
	Transaction
	Signature
	Header
	Block
*/
package coin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Types of digital keys supported.
type KeyType int32

const (
	KeyType_RSA       KeyType = 0
	KeyType_ECDSA     KeyType = 1
	KeyType_Ed25519   KeyType = 2
	KeyType_Secp256k1 KeyType = 3
)

var KeyType_name = map[int32]string{
	0: "RSA",
	1: "ECDSA",
	2: "Ed25519",
	3: "Secp256k1",
}
var KeyType_value = map[string]int32{
	"RSA":       0,
	"ECDSA":     1,
	"Ed25519":   2,
	"Secp256k1": 3,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}
func (KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A coin transaction.
type Transaction struct {
	From      []byte     `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To        []byte     `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Value     int64      `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	Nonce     int64      `protobuf:"varint,4,opt,name=nonce" json:"nonce,omitempty"`
	Signature *Signature `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Transaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Transaction) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Transaction) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// A digital signature.
type Signature struct {
	KeyType   KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=stratumn.alice.pb.coin.KeyType" json:"key_type,omitempty"`
	PublicKey []byte  `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature []byte  `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Signature) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_RSA
}

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// A block header.
type Header struct {
	Version      int32                       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	BlockNumber  int32                       `protobuf:"varint,2,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	PreviousHash []byte                      `protobuf:"bytes,3,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	MerkleRoot   []byte                      `protobuf:"bytes,4,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Timestamp    *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Nonce        int32                       `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Header) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetBlockNumber() int32 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Header) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *Header) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *Header) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Header) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// A block.
type Block struct {
	Header       *Header        `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Block) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "stratumn.alice.pb.coin.Transaction")
	proto.RegisterType((*Signature)(nil), "stratumn.alice.pb.coin.Signature")
	proto.RegisterType((*Header)(nil), "stratumn.alice.pb.coin.Header")
	proto.RegisterType((*Block)(nil), "stratumn.alice.pb.coin.Block")
	proto.RegisterEnum("stratumn.alice.pb.coin.KeyType", KeyType_name, KeyType_value)
}

func init() { proto.RegisterFile("github.com/stratumn/alice/pb/coin/coin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x5d, 0x6f, 0xf3, 0x34,
	0x14, 0x26, 0xed, 0xdb, 0x96, 0xba, 0xdd, 0x4b, 0x31, 0x5f, 0x56, 0x5f, 0x60, 0x7e, 0x37, 0xc4,
	0xca, 0x57, 0xa2, 0x15, 0x15, 0x34, 0x10, 0x17, 0x0b, 0x1b, 0x1a, 0x0c, 0x26, 0xd4, 0x56, 0x5c,
	0x70, 0x53, 0x39, 0xe9, 0x59, 0x1b, 0x25, 0x8d, 0x23, 0xc7, 0x29, 0xe4, 0xef, 0xe4, 0x8a, 0xdf,
	0x40, 0x2e, 0xf8, 0x0d, 0x48, 0xfc, 0x10, 0x7e, 0x02, 0xb2, 0xdd, 0xb4, 0x01, 0x36, 0xb8, 0x68,
	0x54, 0x1f, 0x3f, 0xe7, 0x39, 0xc7, 0xcf, 0x79, 0x6c, 0xf4, 0xe1, 0x2a, 0x90, 0xeb, 0xcc, 0xb3,
	0x7d, 0xbe, 0x71, 0x52, 0x29, 0x98, 0xcc, 0x36, 0xb1, 0xc3, 0xa2, 0xc0, 0x07, 0x27, 0xf1, 0x1c,
	0x9f, 0x07, 0xb1, 0xfe, 0xd8, 0x89, 0xe0, 0x92, 0xe3, 0xd7, 0x2b, 0x88, 0xad, 0x21, 0x76, 0xa2,
	0x12, 0x83, 0x78, 0xf8, 0x1f, 0x2c, 0x2b, 0x91, 0xf8, 0x0e, 0xfc, 0x2c, 0xd5, 0xcf, 0xb0, 0x0c,
	0x8f, 0x57, 0x9c, 0xaf, 0x22, 0x70, 0xf4, 0xca, 0xcb, 0xee, 0x1d, 0x19, 0x6c, 0x20, 0x95, 0x6c,
	0x93, 0x18, 0xc0, 0xc9, 0x6f, 0x0d, 0xd4, 0x9b, 0x0b, 0x16, 0xa7, 0xcc, 0x97, 0x01, 0x8f, 0xb1,
	0x8d, 0x9e, 0xdc, 0x0b, 0xbe, 0x21, 0x16, 0xb5, 0x46, 0x7d, 0x77, 0x58, 0x94, 0xe4, 0xe9, 0x0c,
	0xe2, 0x25, 0x08, 0xfa, 0x3d, 0x80, 0xa0, 0x5f, 0x5f, 0xfd, 0x52, 0x12, 0xeb, 0xcf, 0x92, 0x58,
	0x53, 0x8d, 0xc3, 0x1f, 0xa1, 0x86, 0xe4, 0xa4, 0xa1, 0xd1, 0x6f, 0x15, 0x25, 0x79, 0x79, 0x0a,
	0x7e, 0x90, 0x04, 0x10, 0xcb, 0x7f, 0x25, 0x34, 0x24, 0xc7, 0x1f, 0xa0, 0xd6, 0x96, 0x45, 0x19,
	0x90, 0x26, 0xb5, 0x46, 0x4d, 0xf7, 0xb5, 0xa2, 0x24, 0x47, 0x3f, 0xa8, 0x00, 0x95, 0x9c, 0xa6,
	0x10, 0x2f, 0x15, 0x7a, 0x6a, 0x30, 0xf8, 0x0b, 0xd4, 0x8a, 0x79, 0xec, 0x03, 0x79, 0xa2, 0xc1,
	0x67, 0x45, 0x49, 0x8e, 0xef, 0x54, 0x40, 0x81, 0x13, 0x01, 0x5b, 0x55, 0x45, 0x40, 0x12, 0xb1,
	0x9c, 0x32, 0x29, 0x99, 0x1f, 0xa6, 0x26, 0x5d, 0x67, 0x61, 0x40, 0xdd, 0x34, 0x58, 0xc5, 0x4c,
	0x66, 0x02, 0x48, 0x8b, 0x5a, 0xa3, 0xde, 0xf8, 0xb9, 0xfd, 0xb0, 0xaa, 0xf6, 0xac, 0x02, 0xba,
	0xef, 0x14, 0x25, 0x79, 0x73, 0xbf, 0xa4, 0xfc, 0x9e, 0xca, 0x35, 0x50, 0x79, 0x90, 0x48, 0x97,
	0x38, 0x30, 0x9f, 0xfc, 0x61, 0xa1, 0xee, 0x1e, 0x8f, 0xe7, 0xe8, 0xc5, 0x10, 0xf2, 0x85, 0xcc,
	0x13, 0xd0, 0x1a, 0x3e, 0x1d, 0x1f, 0x3f, 0x56, 0xf3, 0x16, 0xf2, 0x79, 0x9e, 0x80, 0x4b, 0x8a,
	0x92, 0x0c, 0xd4, 0x3f, 0x55, 0x2c, 0x84, 0x9c, 0x66, 0x29, 0x18, 0x1d, 0x3a, 0xa1, 0x81, 0xe0,
	0xcf, 0x10, 0x4a, 0x32, 0x2f, 0x0a, 0xfc, 0x45, 0x08, 0xf9, 0x4e, 0xed, 0x67, 0x45, 0x49, 0x5e,
	0x51, 0x85, 0x41, 0x9c, 0xa5, 0xd4, 0x6c, 0xab, 0x74, 0xd3, 0x9f, 0x59, 0xdf, 0x42, 0x8e, 0x27,
	0x75, 0x19, 0x9a, 0x3a, 0xf5, 0x8d, 0xa2, 0x24, 0x2f, 0x1d, 0xce, 0xe8, 0xe5, 0x12, 0xd2, 0x7f,
	0x1e, 0xeb, 0xf7, 0x26, 0x6a, 0xdf, 0x00, 0x5b, 0x82, 0xc0, 0x0e, 0xea, 0x6c, 0x41, 0xa4, 0x01,
	0x8f, 0xf5, 0x91, 0x5a, 0x66, 0x6c, 0x6e, 0xc4, 0xfd, 0x90, 0xee, 0x36, 0x4c, 0xbb, 0xbb, 0x05,
	0xfe, 0x14, 0xf5, 0x3d, 0xb5, 0xbb, 0x88, 0xb3, 0x8d, 0x07, 0x42, 0x37, 0xdc, 0x72, 0x5f, 0x2d,
	0x4a, 0xd2, 0x37, 0x59, 0x26, 0xae, 0x93, 0x7a, 0x1a, 0x79, 0xa7, 0x03, 0xf8, 0x06, 0x1d, 0xa9,
	0xb9, 0x06, 0x3c, 0x4b, 0x17, 0x6b, 0x96, 0xae, 0x77, 0xfd, 0x9e, 0x16, 0x25, 0x79, 0x76, 0xc3,
	0xd2, 0x75, 0x35, 0x8e, 0x0a, 0x44, 0xd7, 0xba, 0x43, 0x4d, 0xd4, 0xaf, 0x82, 0x0a, 0x88, 0xbf,
	0x41, 0xbd, 0x0d, 0x88, 0x30, 0x82, 0x85, 0xe0, 0x5c, 0x6a, 0x07, 0xf5, 0xdd, 0xf7, 0x8a, 0x92,
	0x3c, 0xff, 0x4e, 0x87, 0xa9, 0x0a, 0x2b, 0x3a, 0x5d, 0xbe, 0x3e, 0x5f, 0xa3, 0x04, 0x32, 0xd9,
	0x53, 0xce, 0x25, 0x66, 0xa8, 0xbb, 0xbf, 0x36, 0x3b, 0x23, 0x0d, 0x6d, 0x73, 0xb1, 0xec, 0xea,
	0x62, 0xd9, 0xf3, 0x0a, 0x61, 0x7c, 0xba, 0x5f, 0x56, 0x2d, 0x9b, 0x3a, 0xbe, 0x00, 0x76, 0x30,
	0xd1, 0x9e, 0x15, 0x2f, 0x2b, 0xab, 0xb7, 0xb5, 0x54, 0x77, 0x45, 0x49, 0xbe, 0x9a, 0xaf, 0x81,
	0xea, 0xa0, 0x36, 0x84, 0xf2, 0xfc, 0x0a, 0x62, 0x10, 0x4c, 0x42, 0x8d, 0x50, 0x72, 0xca, 0xa2,
	0x88, 0xff, 0x44, 0xb7, 0x4c, 0x04, 0x9a, 0x3a, 0xad, 0x2a, 0xd6, 0xb4, 0x31, 0xe4, 0x27, 0xbf,
	0x5a, 0xa8, 0xa5, 0x07, 0x80, 0xbf, 0x45, 0x6d, 0xb3, 0xad, 0x27, 0xda, 0x1b, 0xbf, 0xfd, 0x98,
	0x49, 0x8d, 0x05, 0xea, 0xb3, 0xab, 0xd1, 0xee, 0x38, 0xb0, 0x8f, 0xfa, 0x75, 0x01, 0x49, 0x83,
	0x36, 0x47, 0xbd, 0xf1, 0xe9, 0x63, 0x9c, 0xb5, 0xf7, 0x46, 0xbf, 0x30, 0xd8, 0x7d, 0x78, 0x06,
	0x7f, 0x23, 0x7d, 0xff, 0x02, 0x75, 0x76, 0x37, 0x06, 0x77, 0x50, 0x73, 0x3a, 0xbb, 0x1c, 0xbc,
	0x80, 0xbb, 0xa8, 0x75, 0xfd, 0xe5, 0xd5, 0xec, 0x72, 0x60, 0xe1, 0x1e, 0xea, 0x5c, 0x2f, 0xc7,
	0x93, 0xc9, 0xf9, 0xc5, 0xa0, 0x81, 0x8f, 0x50, 0x77, 0x06, 0x7e, 0x32, 0x9e, 0x7c, 0x12, 0x9e,
	0x0f, 0x9a, 0xee, 0xe8, 0xc7, 0x77, 0xff, 0xf7, 0xed, 0xfd, 0x5c, 0x7d, 0xbc, 0xb6, 0x9e, 0xe7,
	0xc7, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x4a, 0xca, 0x0f, 0xac, 0x05, 0x00, 0x00,
}
