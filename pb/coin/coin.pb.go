// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/pb/coin/coin.proto

/*
	Package coin is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/pb/coin/coin.proto

	It has these top-level messages:
		Transaction
		Signature
		Header
		Block
		Account
		Request
		Response
		HeaderRequest
		HeadersRequest
		Headers
		BlockRequest
		BlocksRequest
		Blocks
*/
package coin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import google_protobuf1 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Types of digital keys supported.
type KeyType int32

const (
	KeyType_RSA       KeyType = 0
	KeyType_ECDSA     KeyType = 1
	KeyType_Ed25519   KeyType = 2
	KeyType_Secp256k1 KeyType = 3
)

var KeyType_name = map[int32]string{
	0: "RSA",
	1: "ECDSA",
	2: "Ed25519",
	3: "Secp256k1",
}
var KeyType_value = map[string]int32{
	"RSA":       0,
	"ECDSA":     1,
	"Ed25519":   2,
	"Secp256k1": 3,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}
func (KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCoin, []int{0} }

// A coin transaction.
type Transaction struct {
	From      []byte     `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To        []byte     `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Value     uint64     `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Fee       uint64     `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Nonce     uint64     `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature *Signature `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{0} }

func (m *Transaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Transaction) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Transaction) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// A digital signature.
type Signature struct {
	KeyType   KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=stratumn.alice.pb.coin.KeyType" json:"key_type,omitempty"`
	PublicKey []byte  `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature []byte  `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{1} }

func (m *Signature) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_RSA
}

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// A block header.
type Header struct {
	Version      int32                       `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BlockNumber  uint64                      `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	PreviousHash []byte                      `protobuf:"bytes,3,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	MerkleRoot   []byte                      `protobuf:"bytes,4,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Timestamp    *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Nonce        uint64                      `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{2} }

func (m *Header) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Header) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *Header) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *Header) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Header) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// A block.
type Block struct {
	Header       *Header        `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{3} }

func (m *Block) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// An account.
type Account struct {
	Balance uint64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{4} }

func (m *Account) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type Request struct {
	// Types that are valid to be assigned to Msg:
	//	*Request_HeaderReq
	//	*Request_HeadersReq
	//	*Request_BlockReq
	//	*Request_BlocksReq
	Msg isRequest_Msg `protobuf_oneof:"msg"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{5} }

type isRequest_Msg interface {
	isRequest_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_HeaderReq struct {
	HeaderReq *HeaderRequest `protobuf:"bytes,1,opt,name=header_req,json=headerReq,oneof"`
}
type Request_HeadersReq struct {
	HeadersReq *HeadersRequest `protobuf:"bytes,2,opt,name=headers_req,json=headersReq,oneof"`
}
type Request_BlockReq struct {
	BlockReq *BlockRequest `protobuf:"bytes,3,opt,name=block_req,json=blockReq,oneof"`
}
type Request_BlocksReq struct {
	BlocksReq *BlocksRequest `protobuf:"bytes,4,opt,name=blocks_req,json=blocksReq,oneof"`
}

func (*Request_HeaderReq) isRequest_Msg()  {}
func (*Request_HeadersReq) isRequest_Msg() {}
func (*Request_BlockReq) isRequest_Msg()   {}
func (*Request_BlocksReq) isRequest_Msg()  {}

func (m *Request) GetMsg() isRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Request) GetHeaderReq() *HeaderRequest {
	if x, ok := m.GetMsg().(*Request_HeaderReq); ok {
		return x.HeaderReq
	}
	return nil
}

func (m *Request) GetHeadersReq() *HeadersRequest {
	if x, ok := m.GetMsg().(*Request_HeadersReq); ok {
		return x.HeadersReq
	}
	return nil
}

func (m *Request) GetBlockReq() *BlockRequest {
	if x, ok := m.GetMsg().(*Request_BlockReq); ok {
		return x.BlockReq
	}
	return nil
}

func (m *Request) GetBlocksReq() *BlocksRequest {
	if x, ok := m.GetMsg().(*Request_BlocksReq); ok {
		return x.BlocksReq
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_HeaderReq)(nil),
		(*Request_HeadersReq)(nil),
		(*Request_BlockReq)(nil),
		(*Request_BlocksReq)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// msg
	switch x := m.Msg.(type) {
	case *Request_HeaderReq:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeaderReq); err != nil {
			return err
		}
	case *Request_HeadersReq:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeadersReq); err != nil {
			return err
		}
	case *Request_BlockReq:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockReq); err != nil {
			return err
		}
	case *Request_BlocksReq:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlocksReq); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Msg has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // msg.header_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeaderRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &Request_HeaderReq{msg}
		return true, err
	case 2: // msg.headers_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeadersRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &Request_HeadersReq{msg}
		return true, err
	case 3: // msg.block_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &Request_BlockReq{msg}
		return true, err
	case 4: // msg.blocks_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlocksRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &Request_BlocksReq{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// msg
	switch x := m.Msg.(type) {
	case *Request_HeaderReq:
		s := proto.Size(x.HeaderReq)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_HeadersReq:
		s := proto.Size(x.HeadersReq)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BlockReq:
		s := proto.Size(x.BlockReq)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_BlocksReq:
		s := proto.Size(x.BlocksReq)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Response struct {
	// Types that are valid to be assigned to Msg:
	//	*Response_HeaderRsp
	//	*Response_HeadersRsp
	//	*Response_BlockRsp
	//	*Response_BlocksRsp
	Msg isResponse_Msg `protobuf_oneof:"msg"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{6} }

type isResponse_Msg interface {
	isResponse_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_HeaderRsp struct {
	HeaderRsp *Header `protobuf:"bytes,1,opt,name=header_rsp,json=headerRsp,oneof"`
}
type Response_HeadersRsp struct {
	HeadersRsp *Headers `protobuf:"bytes,2,opt,name=headers_rsp,json=headersRsp,oneof"`
}
type Response_BlockRsp struct {
	BlockRsp *Block `protobuf:"bytes,3,opt,name=block_rsp,json=blockRsp,oneof"`
}
type Response_BlocksRsp struct {
	BlocksRsp *Blocks `protobuf:"bytes,4,opt,name=blocks_rsp,json=blocksRsp,oneof"`
}

func (*Response_HeaderRsp) isResponse_Msg()  {}
func (*Response_HeadersRsp) isResponse_Msg() {}
func (*Response_BlockRsp) isResponse_Msg()   {}
func (*Response_BlocksRsp) isResponse_Msg()  {}

func (m *Response) GetMsg() isResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Response) GetHeaderRsp() *Header {
	if x, ok := m.GetMsg().(*Response_HeaderRsp); ok {
		return x.HeaderRsp
	}
	return nil
}

func (m *Response) GetHeadersRsp() *Headers {
	if x, ok := m.GetMsg().(*Response_HeadersRsp); ok {
		return x.HeadersRsp
	}
	return nil
}

func (m *Response) GetBlockRsp() *Block {
	if x, ok := m.GetMsg().(*Response_BlockRsp); ok {
		return x.BlockRsp
	}
	return nil
}

func (m *Response) GetBlocksRsp() *Blocks {
	if x, ok := m.GetMsg().(*Response_BlocksRsp); ok {
		return x.BlocksRsp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_HeaderRsp)(nil),
		(*Response_HeadersRsp)(nil),
		(*Response_BlockRsp)(nil),
		(*Response_BlocksRsp)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// msg
	switch x := m.Msg.(type) {
	case *Response_HeaderRsp:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeaderRsp); err != nil {
			return err
		}
	case *Response_HeadersRsp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeadersRsp); err != nil {
			return err
		}
	case *Response_BlockRsp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockRsp); err != nil {
			return err
		}
	case *Response_BlocksRsp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlocksRsp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Msg has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // msg.header_rsp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Header)
		err := b.DecodeMessage(msg)
		m.Msg = &Response_HeaderRsp{msg}
		return true, err
	case 2: // msg.headers_rsp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Headers)
		err := b.DecodeMessage(msg)
		m.Msg = &Response_HeadersRsp{msg}
		return true, err
	case 3: // msg.block_rsp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Msg = &Response_BlockRsp{msg}
		return true, err
	case 4: // msg.blocks_rsp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Blocks)
		err := b.DecodeMessage(msg)
		m.Msg = &Response_BlocksRsp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// msg
	switch x := m.Msg.(type) {
	case *Response_HeaderRsp:
		s := proto.Size(x.HeaderRsp)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_HeadersRsp:
		s := proto.Size(x.HeadersRsp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BlockRsp:
		s := proto.Size(x.BlockRsp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_BlocksRsp:
		s := proto.Size(x.BlocksRsp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// request one header from a peer.
type HeaderRequest struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *HeaderRequest) Reset()                    { *m = HeaderRequest{} }
func (m *HeaderRequest) String() string            { return proto.CompactTextString(m) }
func (*HeaderRequest) ProtoMessage()               {}
func (*HeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{7} }

func (m *HeaderRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// request a list of headers from a peer.
type HeadersRequest struct {
	From   uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *HeadersRequest) Reset()                    { *m = HeadersRequest{} }
func (m *HeadersRequest) String() string            { return proto.CompactTextString(m) }
func (*HeadersRequest) ProtoMessage()               {}
func (*HeadersRequest) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{8} }

func (m *HeadersRequest) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *HeadersRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Headers struct {
	Headers []*Header `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *Headers) Reset()                    { *m = Headers{} }
func (m *Headers) String() string            { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()               {}
func (*Headers) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{9} }

func (m *Headers) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

// request one block from a peer.
type BlockRequest struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockRequest) Reset()                    { *m = BlockRequest{} }
func (m *BlockRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()               {}
func (*BlockRequest) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{10} }

func (m *BlockRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// request a list of blocks from a peer.
type BlocksRequest struct {
	From   uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *BlocksRequest) Reset()                    { *m = BlocksRequest{} }
func (m *BlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*BlocksRequest) ProtoMessage()               {}
func (*BlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{11} }

func (m *BlocksRequest) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *BlocksRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Blocks struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptorCoin, []int{12} }

func (m *Blocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "stratumn.alice.pb.coin.Transaction")
	proto.RegisterType((*Signature)(nil), "stratumn.alice.pb.coin.Signature")
	proto.RegisterType((*Header)(nil), "stratumn.alice.pb.coin.Header")
	proto.RegisterType((*Block)(nil), "stratumn.alice.pb.coin.Block")
	proto.RegisterType((*Account)(nil), "stratumn.alice.pb.coin.Account")
	proto.RegisterType((*Request)(nil), "stratumn.alice.pb.coin.Request")
	proto.RegisterType((*Response)(nil), "stratumn.alice.pb.coin.Response")
	proto.RegisterType((*HeaderRequest)(nil), "stratumn.alice.pb.coin.HeaderRequest")
	proto.RegisterType((*HeadersRequest)(nil), "stratumn.alice.pb.coin.HeadersRequest")
	proto.RegisterType((*Headers)(nil), "stratumn.alice.pb.coin.Headers")
	proto.RegisterType((*BlockRequest)(nil), "stratumn.alice.pb.coin.BlockRequest")
	proto.RegisterType((*BlocksRequest)(nil), "stratumn.alice.pb.coin.BlocksRequest")
	proto.RegisterType((*Blocks)(nil), "stratumn.alice.pb.coin.Blocks")
	proto.RegisterEnum("stratumn.alice.pb.coin.KeyType", KeyType_name, KeyType_value)
}
func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Value))
	}
	if m.Fee != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Fee))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Nonce))
	}
	if m.Signature != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Signature.Size()))
		n1, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.KeyType))
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Version))
	}
	if m.BlockNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.BlockNumber))
	}
	if len(m.PreviousHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.PreviousHash)))
		i += copy(dAtA[i:], m.PreviousHash)
	}
	if len(m.MerkleRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.MerkleRoot)))
		i += copy(dAtA[i:], m.MerkleRoot)
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Timestamp.Size()))
		n2, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Nonce))
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Balance))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Nonce))
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn4, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *Request_HeaderReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeaderReq != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.HeaderReq.Size()))
		n5, err := m.HeaderReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Request_HeadersReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeadersReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.HeadersReq.Size()))
		n6, err := m.HeadersReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Request_BlockReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlockReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.BlockReq.Size()))
		n7, err := m.BlockReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Request_BlocksReq) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlocksReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.BlocksReq.Size()))
		n8, err := m.BlocksReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn9, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *Response_HeaderRsp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeaderRsp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.HeaderRsp.Size()))
		n10, err := m.HeaderRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Response_HeadersRsp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeadersRsp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.HeadersRsp.Size()))
		n11, err := m.HeadersRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Response_BlockRsp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlockRsp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.BlockRsp.Size()))
		n12, err := m.BlockRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Response_BlocksRsp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlocksRsp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.BlocksRsp.Size()))
		n13, err := m.BlocksRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *HeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *HeadersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeadersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.From))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *Headers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Headers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, msg := range m.Headers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *BlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.From))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoin(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *Blocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blocks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovCoin(uint64(m.Value))
	}
	if m.Fee != 0 {
		n += 1 + sovCoin(uint64(m.Fee))
	}
	if m.Nonce != 0 {
		n += 1 + sovCoin(uint64(m.Nonce))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovCoin(uint64(m.KeyType))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}

func (m *Header) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovCoin(uint64(m.Version))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovCoin(uint64(m.BlockNumber))
	}
	l = len(m.PreviousHash)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovCoin(uint64(m.Nonce))
	}
	return n
}

func (m *Block) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovCoin(uint64(l))
		}
	}
	return n
}

func (m *Account) Size() (n int) {
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovCoin(uint64(m.Balance))
	}
	if m.Nonce != 0 {
		n += 1 + sovCoin(uint64(m.Nonce))
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *Request_HeaderReq) Size() (n int) {
	var l int
	_ = l
	if m.HeaderReq != nil {
		l = m.HeaderReq.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *Request_HeadersReq) Size() (n int) {
	var l int
	_ = l
	if m.HeadersReq != nil {
		l = m.HeadersReq.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *Request_BlockReq) Size() (n int) {
	var l int
	_ = l
	if m.BlockReq != nil {
		l = m.BlockReq.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *Request_BlocksReq) Size() (n int) {
	var l int
	_ = l
	if m.BlocksReq != nil {
		l = m.BlocksReq.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *Response_HeaderRsp) Size() (n int) {
	var l int
	_ = l
	if m.HeaderRsp != nil {
		l = m.HeaderRsp.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *Response_HeadersRsp) Size() (n int) {
	var l int
	_ = l
	if m.HeadersRsp != nil {
		l = m.HeadersRsp.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *Response_BlockRsp) Size() (n int) {
	var l int
	_ = l
	if m.BlockRsp != nil {
		l = m.BlockRsp.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *Response_BlocksRsp) Size() (n int) {
	var l int
	_ = l
	if m.BlocksRsp != nil {
		l = m.BlocksRsp.Size()
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}
func (m *HeaderRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}

func (m *HeadersRequest) Size() (n int) {
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovCoin(uint64(m.From))
	}
	if m.Amount != 0 {
		n += 1 + sovCoin(uint64(m.Amount))
	}
	return n
}

func (m *Headers) Size() (n int) {
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovCoin(uint64(l))
		}
	}
	return n
}

func (m *BlockRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}

func (m *BlocksRequest) Size() (n int) {
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovCoin(uint64(m.From))
	}
	if m.Amount != 0 {
		n += 1 + sovCoin(uint64(m.Amount))
	}
	return n
}

func (m *Blocks) Size() (n int) {
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovCoin(uint64(l))
		}
	}
	return n
}

func sovCoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCoin(x uint64) (n int) {
	return sovCoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (KeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousHash = append(m.PreviousHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousHash == nil {
				m.PreviousHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = append(m.MerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MerkleRoot == nil {
				m.MerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeaderRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Request_HeaderReq{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeadersRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Request_HeadersReq{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Request_BlockReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlocksRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Request_BlocksReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Header{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Response_HeaderRsp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Headers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Response_HeadersRsp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Block{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Response_BlockRsp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Blocks{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Response_BlocksRsp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeadersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeadersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeadersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Headers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Headers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Headers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &Header{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/stratumn/alice/pb/coin/coin.proto", fileDescriptorCoin) }

var fileDescriptorCoin = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4d, 0x6f, 0x5b, 0x45,
	0x17, 0xee, 0xb5, 0x63, 0xbb, 0x1e, 0x3b, 0x6d, 0xde, 0x79, 0xf9, 0x18, 0xa5, 0xaa, 0x33, 0x75,
	0x21, 0x4d, 0xf9, 0xb0, 0x55, 0xa3, 0xf4, 0x23, 0x01, 0x55, 0x71, 0xda, 0xaa, 0xa5, 0x50, 0x21,
	0x27, 0x42, 0x82, 0x8d, 0x35, 0xbe, 0x39, 0xb6, 0xaf, 0x6c, 0xdf, 0xb9, 0x9d, 0x99, 0x9b, 0xe2,
	0x3d, 0x12, 0x12, 0x7b, 0x24, 0xc4, 0xf2, 0xae, 0x58, 0xb2, 0xe6, 0xfe, 0x01, 0x96, 0x2c, 0xf8,
	0x01, 0xa8, 0x6c, 0x58, 0xf2, 0x13, 0xd0, 0x7c, 0xdc, 0xf8, 0x86, 0x36, 0x6e, 0x17, 0xb6, 0x3c,
	0x67, 0x9e, 0xf3, 0x9c, 0x33, 0xcf, 0x39, 0x67, 0xc6, 0xe8, 0x83, 0x51, 0xa0, 0xc6, 0xf1, 0xa0,
	0xe5, 0xf3, 0x59, 0x5b, 0x2a, 0xc1, 0x54, 0x3c, 0x0b, 0xdb, 0x6c, 0x1a, 0xf8, 0xd0, 0x8e, 0x06,
	0x6d, 0x9f, 0x07, 0xa1, 0xf9, 0x6a, 0x45, 0x82, 0x2b, 0x8e, 0xdf, 0xca, 0x20, 0x2d, 0x03, 0x69,
	0x45, 0xda, 0x31, 0x08, 0xd7, 0x97, 0xb0, 0x8c, 0x44, 0xe4, 0xb7, 0xe1, 0x1b, 0xa5, 0x3f, 0x96,
	0x65, 0x7d, 0x63, 0xc4, 0xf9, 0x68, 0x0a, 0x6d, 0xb3, 0x1a, 0xc4, 0xc3, 0xb6, 0x0a, 0x66, 0x20,
	0x15, 0x9b, 0x45, 0x16, 0xd0, 0xfc, 0xa9, 0x88, 0x6a, 0x87, 0x82, 0x85, 0x92, 0xf9, 0x2a, 0xe0,
	0x21, 0x6e, 0xa1, 0x95, 0xa1, 0xe0, 0x33, 0xe2, 0x51, 0x6f, 0xab, 0xde, 0x5d, 0x4f, 0x52, 0x72,
	0xe1, 0x00, 0xc2, 0x23, 0x10, 0xf4, 0x0b, 0x00, 0x41, 0x1f, 0xdd, 0xfb, 0x39, 0x25, 0xde, 0x3f,
	0x29, 0xf1, 0x7a, 0x06, 0x87, 0x3f, 0x44, 0x05, 0xc5, 0x49, 0xc1, 0xa0, 0x2f, 0x27, 0x29, 0xf9,
	0x5f, 0x0f, 0xfc, 0x20, 0x0a, 0x20, 0x54, 0x2f, 0x38, 0x14, 0x14, 0xc7, 0xef, 0xa3, 0xd2, 0x31,
	0x9b, 0xc6, 0x40, 0x8a, 0xd4, 0xdb, 0x5a, 0xe9, 0xbe, 0x99, 0xa4, 0x64, 0xf5, 0x4b, 0x6d, 0xa0,
	0x8a, 0x53, 0x09, 0xe1, 0x91, 0x46, 0xf7, 0x2c, 0x06, 0xdf, 0x41, 0xc5, 0x21, 0x00, 0x59, 0x31,
	0xd0, 0x6b, 0x49, 0x4a, 0x36, 0x72, 0x99, 0xd2, 0x21, 0x00, 0xdd, 0x1a, 0x72, 0x41, 0xd5, 0x18,
	0xe8, 0x2c, 0x08, 0x41, 0x5c, 0x37, 0xce, 0xda, 0x07, 0x7f, 0x82, 0x4a, 0x21, 0x0f, 0x7d, 0x20,
	0xa5, 0x85, 0xf3, 0x13, 0x6d, 0xd0, 0x71, 0x22, 0x01, 0xc7, 0x3a, 0x41, 0x01, 0xd1, 0x94, 0xcd,
	0x29, 0x53, 0x8a, 0xf9, 0x13, 0x69, 0x23, 0x1b, 0x2f, 0xfc, 0xad, 0x87, 0xaa, 0x32, 0x18, 0x85,
	0x4c, 0xc5, 0x02, 0x48, 0x99, 0x7a, 0x5b, 0xb5, 0xce, 0x95, 0xd6, 0xcb, 0x2b, 0xd2, 0x3a, 0xc8,
	0x80, 0xdd, 0xfd, 0x24, 0x25, 0xbb, 0x27, 0x4b, 0xca, 0x87, 0x26, 0x37, 0x95, 0x4b, 0x3a, 0x12,
	0xfc, 0x38, 0x08, 0x47, 0x94, 0x3f, 0x0b, 0x41, 0xc8, 0x71, 0x10, 0x65, 0x20, 0xcd, 0x64, 0x53,
	0x58, 0x04, 0x6e, 0xfe, 0xe1, 0xa1, 0xea, 0x09, 0x1d, 0x3e, 0x44, 0xe7, 0x27, 0x30, 0xef, 0xab,
	0x79, 0x04, 0xa6, 0x3c, 0x17, 0x3a, 0x1b, 0x67, 0xa5, 0xf4, 0x18, 0xe6, 0x87, 0xf3, 0x08, 0xba,
	0x24, 0x49, 0xc9, 0x9a, 0xfe, 0xa5, 0xc3, 0x4c, 0x60, 0x4e, 0x63, 0x09, 0x56, 0xe2, 0xca, 0xc4,
	0x42, 0xf0, 0x0e, 0x42, 0x51, 0x3c, 0x98, 0x06, 0x7e, 0x7f, 0x02, 0x73, 0x57, 0xc8, 0x4b, 0x49,
	0x4a, 0xfe, 0xaf, 0x03, 0x83, 0xb8, 0x26, 0xa9, 0xdd, 0xd6, 0xee, 0x36, 0x3f, 0xbb, 0x7e, 0x0c,
	0x73, 0xbc, 0x9d, 0x57, 0xa9, 0x68, 0x5c, 0xdf, 0x4e, 0x52, 0x72, 0x71, 0x21, 0xc1, 0x60, 0xae,
	0xe0, 0x85, 0x63, 0xfd, 0x5d, 0x44, 0xe5, 0x87, 0xc0, 0x8e, 0x40, 0xe0, 0x36, 0xaa, 0x1c, 0x83,
	0x90, 0x01, 0x0f, 0xcd, 0x91, 0x4a, 0xb6, 0x23, 0xba, 0x53, 0xee, 0x4f, 0xa8, 0xdb, 0xb0, 0xe9,
	0xba, 0x05, 0xbe, 0x85, 0xea, 0x03, 0xbd, 0xdb, 0x0f, 0xe3, 0xd9, 0x00, 0x84, 0x49, 0x78, 0xa5,
	0xfb, 0x46, 0x92, 0x92, 0xba, 0xf5, 0xb2, 0x76, 0xe3, 0x54, 0x33, 0xc8, 0x27, 0xc6, 0x80, 0xfb,
	0x68, 0x55, 0xd7, 0x3d, 0xe0, 0xb1, 0xec, 0x8f, 0x99, 0x1c, 0xbb, 0x7c, 0x77, 0x92, 0x94, 0x74,
	0x1e, 0x32, 0x39, 0xce, 0x0a, 0x91, 0x81, 0xe8, 0xd8, 0x64, 0x48, 0x63, 0xa9, 0xeb, 0x35, 0x8b,
	0xa7, 0x2a, 0xd0, 0x6e, 0x74, 0xc8, 0xc5, 0x8c, 0x29, 0xc3, 0x5f, 0xcf, 0xb0, 0xda, 0x1f, 0x7f,
	0x8a, 0x6a, 0x33, 0x10, 0x93, 0x29, 0xf4, 0x05, 0xe7, 0xca, 0x74, 0x6d, 0xbd, 0x7b, 0x3d, 0x49,
	0xc9, 0x95, 0xcf, 0x8d, 0x99, 0x6a, 0xb3, 0x8e, 0x62, 0xb2, 0xca, 0x77, 0x85, 0x15, 0x08, 0x59,
	0xef, 0x1e, 0xe7, 0x0a, 0x33, 0x54, 0x3d, 0x19, 0x54, 0xd3, 0xc2, 0xb5, 0xce, 0x7a, 0xcb, 0x8e,
	0x72, 0x2b, 0x1b, 0xe5, 0xd6, 0x61, 0x86, 0x70, 0xb3, 0x91, 0x2d, 0xb3, 0x93, 0xd8, 0x38, 0xbe,
	0x00, 0xa6, 0x32, 0x19, 0x17, 0xac, 0xf8, 0x28, 0x9b, 0x90, 0xb2, 0x51, 0xf0, 0x49, 0x92, 0x92,
	0x07, 0x87, 0x63, 0xa0, 0xc6, 0x68, 0xfa, 0x44, 0x8f, 0xca, 0x08, 0x42, 0x10, 0x4c, 0x41, 0x8e,
	0x50, 0x71, 0xca, 0xa6, 0x53, 0xfe, 0x8c, 0x1e, 0x33, 0x11, 0x18, 0x6a, 0x99, 0x45, 0xb4, 0x92,
	0xe5, 0x06, 0xa9, 0xf9, 0xab, 0x87, 0x4a, 0xa6, 0x2e, 0xf8, 0x33, 0x54, 0xb6, 0xdb, 0xa6, 0xd0,
	0xb5, 0x4e, 0xe3, 0xac, 0xde, 0xb5, 0x9d, 0x91, 0x2f, 0x69, 0x8e, 0xd6, 0x71, 0x60, 0x1f, 0xd5,
	0xf3, 0x02, 0x92, 0x02, 0x2d, 0x6e, 0xd5, 0x3a, 0x57, 0xcf, 0xe2, 0xcc, 0xdd, 0x1b, 0xe6, 0x4e,
	0xc3, 0xdd, 0x97, 0xd7, 0xe0, 0x14, 0x69, 0xf3, 0x2b, 0x54, 0xd9, 0xf3, 0x7d, 0x1e, 0x87, 0x0a,
	0x5f, 0x47, 0x95, 0x01, 0x9b, 0x32, 0xad, 0x97, 0x67, 0xf4, 0xba, 0x98, 0xa4, 0xa4, 0xd2, 0xb5,
	0x26, 0xdb, 0xa1, 0x6e, 0x1f, 0x5f, 0xcd, 0x84, 0xb5, 0xad, 0xb9, 0x9a, 0xa4, 0xa4, 0x64, 0xae,
	0x9e, 0xbc, 0x2e, 0xbf, 0x14, 0x50, 0xa5, 0x07, 0x4f, 0x63, 0x90, 0x0a, 0x3f, 0x40, 0xc8, 0x9e,
	0xaa, 0x2f, 0xe0, 0xa9, 0x53, 0xe7, 0xdd, 0xe5, 0xea, 0x38, 0xd7, 0x87, 0xe7, 0x7a, 0xd5, 0x71,
	0x66, 0xc0, 0x8f, 0x50, 0xcd, 0x2e, 0xa4, 0x21, 0x2a, 0x18, 0xa2, 0xcd, 0xe5, 0x44, 0x72, 0xc1,
	0xe4, 0x92, 0xd0, 0x16, 0xbc, 0x8f, 0xaa, 0x76, 0xca, 0x34, 0x51, 0xd1, 0x10, 0xbd, 0x73, 0x16,
	0x91, 0x91, 0x72, 0x41, 0x73, 0x7e, 0xe0, 0xd6, 0xfa, 0x5c, 0xe6, 0xb7, 0x4d, 0x67, 0x65, 0xf9,
	0xb9, 0x0c, 0x4b, 0x2e, 0x1b, 0x1b, 0x5f, 0x1b, 0xba, 0x25, 0x54, 0x9c, 0xc9, 0x51, 0xf3, 0x87,
	0x02, 0x3a, 0xdf, 0x03, 0x19, 0xf1, 0x50, 0x02, 0xbe, 0xbb, 0xd0, 0x4c, 0x46, 0xaf, 0xd7, 0x51,
	0x39, 0xb1, 0x64, 0x84, 0xbb, 0x39, 0xb1, 0x64, 0xe4, 0xc4, 0xda, 0x78, 0x85, 0x58, 0x79, 0x95,
	0x64, 0x84, 0x3f, 0x3e, 0x51, 0x49, 0x46, 0x4e, 0xa5, 0xcb, 0x4b, 0xcf, 0xb7, 0x90, 0x47, 0x46,
	0xfa, 0x08, 0x99, 0x3c, 0x32, 0x72, 0xf2, 0x34, 0x96, 0xcb, 0x93, 0xd3, 0x45, 0x46, 0x99, 0x2e,
	0xb7, 0xd0, 0xea, 0xa9, 0xa6, 0xc0, 0x9b, 0x68, 0xc5, 0x5c, 0x70, 0xf6, 0x09, 0xc7, 0x49, 0x4a,
	0x90, 0x9b, 0x23, 0x26, 0xc7, 0xa6, 0x09, 0xcd, 0x7e, 0xf3, 0x7b, 0x0f, 0x5d, 0x38, 0xdd, 0x05,
	0x78, 0x37, 0xf7, 0xfa, 0xbb, 0x57, 0xd3, 0x21, 0xa8, 0x54, 0x4c, 0x28, 0x7d, 0x15, 0x32, 0x45,
	0xd5, 0x38, 0x90, 0xf9, 0x8b, 0xd6, 0xfe, 0x15, 0xd8, 0x45, 0x65, 0x36, 0xd3, 0xd3, 0xe2, 0x3a,
	0xff, 0x6a, 0x92, 0x92, 0x4b, 0x7b, 0xc6, 0xa2, 0x2f, 0x08, 0x27, 0x1c, 0x15, 0x36, 0x96, 0x7b,
	0x87, 0x9c, 0x4b, 0x73, 0x1f, 0x55, 0x5c, 0x24, 0x7c, 0x1b, 0x55, 0x1c, 0x96, 0x78, 0x66, 0xac,
	0x5f, 0x51, 0xd8, 0x5e, 0x06, 0x6f, 0xde, 0x44, 0xf5, 0x7c, 0x37, 0xbe, 0xb6, 0x12, 0xdf, 0x79,
	0x68, 0xf5, 0x54, 0x03, 0xe2, 0x9d, 0x53, 0x42, 0x6c, 0x26, 0x29, 0x69, 0x58, 0xc0, 0x6b, 0xe8,
	0xb0, 0xf3, 0x1f, 0x1d, 0x9a, 0x49, 0x4a, 0xd6, 0x17, 0x3a, 0xd8, 0x02, 0x9e, 0x21, 0xc3, 0x5d,
	0x54, 0xb6, 0x71, 0xf0, 0x36, 0x2a, 0x5b, 0xa4, 0x13, 0x61, 0x79, 0x67, 0xf5, 0x1c, 0xf8, 0xbd,
	0x3b, 0xa8, 0xe2, 0x1e, 0x7f, 0x5c, 0x41, 0xc5, 0xde, 0xc1, 0xde, 0xda, 0x39, 0x5c, 0x45, 0xa5,
	0xfb, 0xfb, 0xf7, 0x0e, 0xf6, 0xd6, 0x3c, 0x5c, 0x43, 0x95, 0xfb, 0x47, 0x9d, 0xed, 0xed, 0x1b,
	0x77, 0xd6, 0x0a, 0x78, 0x15, 0x55, 0x0f, 0xc0, 0x8f, 0x3a, 0xdb, 0x37, 0x27, 0x37, 0xd6, 0x8a,
	0xdd, 0xdb, 0xbf, 0x3d, 0x6f, 0x78, 0xbf, 0x3f, 0x6f, 0x78, 0x7f, 0x3e, 0x6f, 0x78, 0x3f, 0xfe,
	0xd5, 0x38, 0xf7, 0xf5, 0xe6, 0x2b, 0xff, 0xb1, 0xee, 0xea, 0xaf, 0x41, 0xd9, 0xbc, 0x49, 0x1f,
	0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x99, 0xfb, 0x9c, 0xe2, 0x0a, 0x00, 0x00,
}
