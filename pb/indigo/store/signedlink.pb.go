// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/pb/indigo/store/signedlink.proto

/*
	Package store is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/pb/indigo/store/signedlink.proto

	It has these top-level messages:
		SignedLink
*/
package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import stratumn_alice_pb_crypto "github.com/stratumn/alice/pb/crypto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignedLink struct {
	From      []byte                              `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Link      []byte                              `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Signature *stratumn_alice_pb_crypto.Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (m *SignedLink) Reset()                    { *m = SignedLink{} }
func (m *SignedLink) String() string            { return proto.CompactTextString(m) }
func (*SignedLink) ProtoMessage()               {}
func (*SignedLink) Descriptor() ([]byte, []int) { return fileDescriptorSignedlink, []int{0} }

func (m *SignedLink) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SignedLink) GetLink() []byte {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *SignedLink) GetSignature() *stratumn_alice_pb_crypto.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedLink)(nil), "stratumn.alice.pb.indigo.store.SignedLink")
}
func (m *SignedLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSignedlink(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSignedlink(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Signature != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSignedlink(dAtA, i, uint64(m.Signature.Size()))
		n1, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintSignedlink(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignedLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSignedlink(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovSignedlink(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovSignedlink(uint64(l))
	}
	return n
}

func sovSignedlink(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSignedlink(x uint64) (n int) {
	return sovSignedlink(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignedlink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignedlink
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignedlink
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = append(m.Link[:0], dAtA[iNdEx:postIndex]...)
			if m.Link == nil {
				m.Link = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignedlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignedlink
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &stratumn_alice_pb_crypto.Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignedlink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignedlink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignedlink(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignedlink
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignedlink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignedlink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSignedlink
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSignedlink
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSignedlink(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSignedlink = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignedlink   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/alice/pb/indigo/store/signedlink.proto", fileDescriptorSignedlink)
}

var fileDescriptorSignedlink = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x29, 0xcd, 0xcd, 0xd3,
	0x4f, 0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x2f, 0x48, 0xd2, 0xcf, 0xcc, 0x4b, 0xc9, 0x4c, 0xcf, 0xd7,
	0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0xd5, 0x2f, 0xce, 0x4c, 0xcf, 0x4b, 0x4d, 0xc9, 0xc9, 0xcc, 0xcb,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x83, 0x69, 0xd0, 0x03, 0x6b, 0xd0, 0x2b, 0x48,
	0xd2, 0x83, 0x68, 0xd0, 0x03, 0x6b, 0x90, 0xd2, 0xc1, 0x6d, 0x76, 0x7a, 0x51, 0x41, 0xb2, 0x7e,
	0x6a, 0x45, 0x09, 0x08, 0x43, 0x4c, 0x93, 0x32, 0xc0, 0xeb, 0x92, 0xe4, 0xa2, 0xca, 0x82, 0x92,
	0x7c, 0x28, 0x05, 0xd1, 0xa1, 0xd4, 0xc4, 0xc4, 0xc5, 0x15, 0x0c, 0x76, 0x94, 0x4f, 0x66, 0x5e,
	0xb6, 0x90, 0x17, 0x17, 0x4b, 0x5a, 0x51, 0x7e, 0xae, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x8f, 0x93,
	0xd9, 0xa2, 0xdd, 0x12, 0x5a, 0x01, 0xa9, 0xa9, 0x45, 0x0a, 0x9e, 0x2e, 0x0a, 0xf9, 0x69, 0x0a,
	0x25, 0x19, 0xa9, 0x0a, 0x05, 0x20, 0x6e, 0x49, 0x46, 0x62, 0x89, 0x42, 0x41, 0x51, 0x7e, 0x4a,
	0x69, 0x72, 0x6a, 0x0a, 0x58, 0x18, 0xe4, 0xa5, 0x15, 0xbb, 0x25, 0x18, 0x3f, 0xec, 0x96, 0x60,
	0x0c, 0x02, 0x9b, 0x21, 0x64, 0xcc, 0xc5, 0x02, 0x12, 0x95, 0x60, 0x02, 0x9b, 0x25, 0xbf, 0x68,
	0xb7, 0x84, 0xb8, 0x57, 0xb0, 0xbf, 0x9f, 0x6e, 0x6a, 0x5e, 0x72, 0x7e, 0x4a, 0x6a, 0x0a, 0x58,
	0x8b, 0x42, 0x52, 0x65, 0x49, 0x6a, 0xf1, 0x0a, 0xb0, 0x26, 0x10, 0x5f, 0xa8, 0x98, 0x8b, 0x13,
	0x14, 0x46, 0x89, 0x25, 0xa5, 0x45, 0xa9, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xca, 0x7a,
	0x98, 0x61, 0x04, 0xf5, 0x43, 0x30, 0x4c, 0xa9, 0x93, 0xc1, 0xa2, 0xdd, 0x12, 0x1a, 0x70, 0x2e,
	0xc8, 0xb1, 0x04, 0x1c, 0x1a, 0x84, 0xb0, 0xc7, 0xc9, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x9f, 0xe8, 0x28, 0xb5,
	0x06, 0x93, 0x49, 0x6c, 0xe0, 0xe0, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x23, 0x29,
	0x90, 0x0c, 0x02, 0x00, 0x00,
}
