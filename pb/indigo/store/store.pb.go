// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/pb/indigo/store/store.proto

/*
	Package store is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/pb/indigo/store/store.proto

	It has these top-level messages:
		SignedLink
*/
package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"
import stratumn_alice_pb_crypto "github.com/stratumn/alice/pb/crypto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignedLink struct {
	From      []byte                              `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Link      []byte                              `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Signature *stratumn_alice_pb_crypto.Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (m *SignedLink) Reset()                    { *m = SignedLink{} }
func (m *SignedLink) String() string            { return proto.CompactTextString(m) }
func (*SignedLink) ProtoMessage()               {}
func (*SignedLink) Descriptor() ([]byte, []int) { return fileDescriptorStore, []int{0} }

func (m *SignedLink) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SignedLink) GetLink() []byte {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *SignedLink) GetSignature() *stratumn_alice_pb_crypto.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedLink)(nil), "stratumn.alice.pb.indigo.store.SignedLink")
}
func (m *SignedLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStore(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStore(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Signature != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStore(dAtA, i, uint64(m.Signature.Size()))
		n1, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignedLink) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func sovStore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = append(m.Link[:0], dAtA[iNdEx:postIndex]...)
			if m.Link == nil {
				m.Link = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &stratumn_alice_pb_crypto.Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/stratumn/alice/pb/indigo/store/store.proto", fileDescriptorStore)
}

var fileDescriptorStore = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x29, 0xcd, 0xcd, 0xd3,
	0x4f, 0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x2f, 0x48, 0xd2, 0xcf, 0xcc, 0x4b, 0xc9, 0x4c, 0xcf, 0xd7,
	0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0x85, 0x90, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x72, 0x30,
	0xb5, 0x7a, 0x60, 0xb5, 0x7a, 0x05, 0x49, 0x7a, 0x10, 0xb5, 0x7a, 0x60, 0x55, 0x52, 0x3a, 0xb8,
	0x8d, 0x4d, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0xad, 0x28, 0x01, 0x61, 0x88, 0x69, 0x52, 0x06, 0x78,
	0x1d, 0x91, 0x5c, 0x54, 0x59, 0x50, 0x92, 0x0f, 0xa5, 0x20, 0x3a, 0x94, 0xda, 0x98, 0xb8, 0xb8,
	0x82, 0x33, 0xd3, 0xf3, 0x52, 0x53, 0x7c, 0x32, 0xf3, 0xb2, 0x85, 0xbc, 0xb8, 0x58, 0xd2, 0x8a,
	0xf2, 0x73, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x9c, 0xcc, 0x16, 0xed, 0x96, 0xd0, 0x0a, 0x48,
	0x4d, 0x2d, 0x52, 0xf0, 0x74, 0x51, 0xc8, 0x4f, 0x53, 0x28, 0xc9, 0x48, 0x55, 0x28, 0x00, 0x71,
	0x4b, 0x32, 0x12, 0x4b, 0x14, 0x0a, 0x8a, 0xf2, 0x53, 0x4a, 0x93, 0x53, 0x53, 0xc0, 0xc2, 0x39,
	0x99, 0x79, 0xd9, 0x2b, 0x76, 0x4b, 0x30, 0x7e, 0xd8, 0x2d, 0xc1, 0x18, 0x04, 0x36, 0x43, 0xc8,
	0x9c, 0x8b, 0x05, 0x24, 0x2a, 0xc1, 0x04, 0x36, 0x4b, 0x79, 0xd1, 0x6e, 0x09, 0x71, 0xaf, 0x60,
	0x7f, 0x3f, 0xdd, 0xd4, 0xbc, 0xe4, 0xfc, 0x94, 0xd4, 0x14, 0xb0, 0x16, 0x85, 0xa4, 0xca, 0x92,
	0xd4, 0x62, 0x84, 0x46, 0x90, 0x98, 0x50, 0x31, 0x17, 0x67, 0x71, 0x66, 0x7a, 0x5e, 0x62, 0x49,
	0x69, 0x51, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0xb2, 0x1e, 0x66, 0x38, 0x41, 0xfd,
	0x11, 0x0c, 0x53, 0xea, 0x64, 0xb0, 0x68, 0xb7, 0x84, 0x06, 0x9c, 0x0b, 0x72, 0x30, 0x01, 0xc7,
	0x06, 0x21, 0xec, 0x71, 0x72, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x27, 0x3a, 0x46, 0xad, 0xc1, 0x64, 0x12, 0x1b,
	0x38, 0x48, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xda, 0xd5, 0x7b, 0x16, 0x0b, 0x02, 0x00,
	0x00,
}
