// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stratumn/alice/pb/trie/trie.proto

/*
	Package trie is a generated protocol buffer package.

	It is generated from these files:
		github.com/stratumn/alice/pb/trie/trie.proto

	It has these top-level messages:
		ProofNode
*/
package trie

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/stratumn/alice/grpc/ext"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ProofNode describes a node in a proof.
type ProofNode struct {
	Key         []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ChildHashes [][]byte `protobuf:"bytes,3,rep,name=child_hashes,json=childHashes" json:"child_hashes,omitempty"`
}

func (m *ProofNode) Reset()                    { *m = ProofNode{} }
func (m *ProofNode) String() string            { return proto.CompactTextString(m) }
func (*ProofNode) ProtoMessage()               {}
func (*ProofNode) Descriptor() ([]byte, []int) { return fileDescriptorTrie, []int{0} }

func (m *ProofNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ProofNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ProofNode) GetChildHashes() [][]byte {
	if m != nil {
		return m.ChildHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*ProofNode)(nil), "stratumn.alice.pb.trie.ProofNode")
}
func (m *ProofNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrie(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrie(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.ChildHashes) > 0 {
		for _, b := range m.ChildHashes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTrie(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeVarintTrie(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProofNode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTrie(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTrie(uint64(l))
	}
	if len(m.ChildHashes) > 0 {
		for _, b := range m.ChildHashes {
			l = len(b)
			n += 1 + l + sovTrie(uint64(l))
		}
	}
	return n
}

func sovTrie(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrie(x uint64) (n int) {
	return sovTrie(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProofNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrie
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrie
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrie
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildHashes = append(m.ChildHashes, make([]byte, postIndex-iNdEx))
			copy(m.ChildHashes[len(m.ChildHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrie(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrie
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrie
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrie
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrie(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrie = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrie   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/stratumn/alice/pb/trie/trie.proto", fileDescriptorTrie) }

var fileDescriptorTrie = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x29, 0xcd, 0xcd, 0xd3,
	0x4f, 0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x2f, 0x48, 0xd2, 0x2f, 0x29, 0xca, 0x4c, 0x05, 0x13, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x62, 0x30, 0x25, 0x7a, 0x60, 0x25, 0x7a, 0x05, 0x49, 0x7a,
	0x20, 0x59, 0x29, 0x3c, 0xa6, 0xa4, 0x17, 0x15, 0x24, 0xeb, 0xa7, 0x56, 0x94, 0x80, 0x30, 0xc4,
	0x14, 0xa5, 0xc9, 0x8c, 0x5c, 0x9c, 0x01, 0x45, 0xf9, 0xf9, 0x69, 0x7e, 0xf9, 0x29, 0xa9, 0x42,
	0x72, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x4e, 0x3c, 0x8b, 0x76,
	0x4b, 0x70, 0x80, 0x84, 0x15, 0xb2, 0x53, 0x2b, 0x83, 0x40, 0x12, 0x42, 0x2a, 0x5c, 0xac, 0x65,
	0x89, 0x39, 0xa5, 0xa9, 0x12, 0x4c, 0x60, 0x15, 0x7c, 0x8b, 0x76, 0x4b, 0x70, 0x81, 0x55, 0x80,
	0x45, 0x83, 0x20, 0x92, 0x42, 0x0e, 0x5c, 0x3c, 0xc9, 0x19, 0x99, 0x39, 0x29, 0xf1, 0x19, 0x89,
	0xc5, 0x19, 0xa9, 0xc5, 0x12, 0xcc, 0x0a, 0xcc, 0x1a, 0x3c, 0x4e, 0xb2, 0x8b, 0x76, 0x4b, 0x88,
	0x7a, 0x80, 0x45, 0x14, 0xf2, 0xd3, 0x14, 0xc0, 0x2a, 0x14, 0xf2, 0xf2, 0x53, 0x52, 0x8b, 0x3f,
	0xec, 0x96, 0x60, 0x0c, 0xe2, 0x06, 0x0b, 0x40, 0xe4, 0x9d, 0x2c, 0x4e, 0x3c, 0x92, 0x63, 0xbc,
	0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2, 0xd4, 0x08, 0x86,
	0x8d, 0x35, 0x88, 0x48, 0x62, 0x03, 0x7b, 0xcb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x65,
	0x62, 0xd6, 0x4c, 0x01, 0x00, 0x00,
}
