// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libp2p/go-libp2p-net (interfaces: Conn)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	go_libp2p_crypto "github.com/libp2p/go-libp2p-crypto"
	go_libp2p_net "github.com/libp2p/go-libp2p-net"
	go_libp2p_peer "github.com/libp2p/go-libp2p-peer"
	go_multiaddr "github.com/multiformats/go-multiaddr"
	reflect "reflect"
)

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConn) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// GetStreams mocks base method
func (m *MockConn) GetStreams() []go_libp2p_net.Stream {
	ret := m.ctrl.Call(m, "GetStreams")
	ret0, _ := ret[0].([]go_libp2p_net.Stream)
	return ret0
}

// GetStreams indicates an expected call of GetStreams
func (mr *MockConnMockRecorder) GetStreams() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreams", reflect.TypeOf((*MockConn)(nil).GetStreams))
}

// LocalMultiaddr mocks base method
func (m *MockConn) LocalMultiaddr() go_multiaddr.Multiaddr {
	ret := m.ctrl.Call(m, "LocalMultiaddr")
	ret0, _ := ret[0].(go_multiaddr.Multiaddr)
	return ret0
}

// LocalMultiaddr indicates an expected call of LocalMultiaddr
func (mr *MockConnMockRecorder) LocalMultiaddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalMultiaddr", reflect.TypeOf((*MockConn)(nil).LocalMultiaddr))
}

// LocalPeer mocks base method
func (m *MockConn) LocalPeer() go_libp2p_peer.ID {
	ret := m.ctrl.Call(m, "LocalPeer")
	ret0, _ := ret[0].(go_libp2p_peer.ID)
	return ret0
}

// LocalPeer indicates an expected call of LocalPeer
func (mr *MockConnMockRecorder) LocalPeer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalPeer", reflect.TypeOf((*MockConn)(nil).LocalPeer))
}

// LocalPrivateKey mocks base method
func (m *MockConn) LocalPrivateKey() go_libp2p_crypto.PrivKey {
	ret := m.ctrl.Call(m, "LocalPrivateKey")
	ret0, _ := ret[0].(go_libp2p_crypto.PrivKey)
	return ret0
}

// LocalPrivateKey indicates an expected call of LocalPrivateKey
func (mr *MockConnMockRecorder) LocalPrivateKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalPrivateKey", reflect.TypeOf((*MockConn)(nil).LocalPrivateKey))
}

// NewStream mocks base method
func (m *MockConn) NewStream() (go_libp2p_net.Stream, error) {
	ret := m.ctrl.Call(m, "NewStream")
	ret0, _ := ret[0].(go_libp2p_net.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream
func (mr *MockConnMockRecorder) NewStream() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockConn)(nil).NewStream))
}

// RemoteMultiaddr mocks base method
func (m *MockConn) RemoteMultiaddr() go_multiaddr.Multiaddr {
	ret := m.ctrl.Call(m, "RemoteMultiaddr")
	ret0, _ := ret[0].(go_multiaddr.Multiaddr)
	return ret0
}

// RemoteMultiaddr indicates an expected call of RemoteMultiaddr
func (mr *MockConnMockRecorder) RemoteMultiaddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteMultiaddr", reflect.TypeOf((*MockConn)(nil).RemoteMultiaddr))
}

// RemotePeer mocks base method
func (m *MockConn) RemotePeer() go_libp2p_peer.ID {
	ret := m.ctrl.Call(m, "RemotePeer")
	ret0, _ := ret[0].(go_libp2p_peer.ID)
	return ret0
}

// RemotePeer indicates an expected call of RemotePeer
func (mr *MockConnMockRecorder) RemotePeer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemotePeer", reflect.TypeOf((*MockConn)(nil).RemotePeer))
}

// RemotePublicKey mocks base method
func (m *MockConn) RemotePublicKey() go_libp2p_crypto.PubKey {
	ret := m.ctrl.Call(m, "RemotePublicKey")
	ret0, _ := ret[0].(go_libp2p_crypto.PubKey)
	return ret0
}

// RemotePublicKey indicates an expected call of RemotePublicKey
func (mr *MockConnMockRecorder) RemotePublicKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemotePublicKey", reflect.TypeOf((*MockConn)(nil).RemotePublicKey))
}

// Stat mocks base method
func (m *MockConn) Stat() go_libp2p_net.Stat {
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(go_libp2p_net.Stat)
	return ret0
}

// Stat indicates an expected call of Stat
func (mr *MockConnMockRecorder) Stat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockConn)(nil).Stat))
}
