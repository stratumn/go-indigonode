// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ipfs/go-log (interfaces: EventLogger)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	go_log "github.com/ipfs/go-log"
	reflect "reflect"
)

// MockEventLogger is a mock of EventLogger interface
type MockEventLogger struct {
	ctrl     *gomock.Controller
	recorder *MockEventLoggerMockRecorder
}

// MockEventLoggerMockRecorder is the mock recorder for MockEventLogger
type MockEventLoggerMockRecorder struct {
	mock *MockEventLogger
}

// NewMockEventLogger creates a new mock instance
func NewMockEventLogger(ctrl *gomock.Controller) *MockEventLogger {
	mock := &MockEventLogger{ctrl: ctrl}
	mock.recorder = &MockEventLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventLogger) EXPECT() *MockEventLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method
func (m *MockEventLogger) Debug(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug
func (mr *MockEventLoggerMockRecorder) Debug(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockEventLogger)(nil).Debug), arg0...)
}

// Debugf mocks base method
func (m *MockEventLogger) Debugf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf
func (mr *MockEventLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockEventLogger)(nil).Debugf), varargs...)
}

// Error mocks base method
func (m *MockEventLogger) Error(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockEventLoggerMockRecorder) Error(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockEventLogger)(nil).Error), arg0...)
}

// Errorf mocks base method
func (m *MockEventLogger) Errorf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf
func (mr *MockEventLoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockEventLogger)(nil).Errorf), varargs...)
}

// Event mocks base method
func (m *MockEventLogger) Event(arg0 context.Context, arg1 string, arg2 ...go_log.Loggable) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Event", varargs...)
}

// Event indicates an expected call of Event
func (mr *MockEventLoggerMockRecorder) Event(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockEventLogger)(nil).Event), varargs...)
}

// EventBegin mocks base method
func (m *MockEventLogger) EventBegin(arg0 context.Context, arg1 string, arg2 ...go_log.Loggable) *go_log.EventInProgress {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EventBegin", varargs...)
	ret0, _ := ret[0].(*go_log.EventInProgress)
	return ret0
}

// EventBegin indicates an expected call of EventBegin
func (mr *MockEventLoggerMockRecorder) EventBegin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBegin", reflect.TypeOf((*MockEventLogger)(nil).EventBegin), varargs...)
}

// Fatal mocks base method
func (m *MockEventLogger) Fatal(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal
func (mr *MockEventLoggerMockRecorder) Fatal(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockEventLogger)(nil).Fatal), arg0...)
}

// Fatalf mocks base method
func (m *MockEventLogger) Fatalf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf
func (mr *MockEventLoggerMockRecorder) Fatalf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockEventLogger)(nil).Fatalf), varargs...)
}

// Finish mocks base method
func (m *MockEventLogger) Finish(arg0 context.Context) {
	m.ctrl.Call(m, "Finish", arg0)
}

// Finish indicates an expected call of Finish
func (mr *MockEventLoggerMockRecorder) Finish(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockEventLogger)(nil).Finish), arg0)
}

// FinishWithErr mocks base method
func (m *MockEventLogger) FinishWithErr(arg0 context.Context, arg1 error) {
	m.ctrl.Call(m, "FinishWithErr", arg0, arg1)
}

// FinishWithErr indicates an expected call of FinishWithErr
func (mr *MockEventLoggerMockRecorder) FinishWithErr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishWithErr", reflect.TypeOf((*MockEventLogger)(nil).FinishWithErr), arg0, arg1)
}

// Info mocks base method
func (m *MockEventLogger) Info(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info
func (mr *MockEventLoggerMockRecorder) Info(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockEventLogger)(nil).Info), arg0...)
}

// Infof mocks base method
func (m *MockEventLogger) Infof(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof
func (mr *MockEventLoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockEventLogger)(nil).Infof), varargs...)
}

// LogKV mocks base method
func (m *MockEventLogger) LogKV(arg0 context.Context, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogKV", varargs...)
}

// LogKV indicates an expected call of LogKV
func (mr *MockEventLoggerMockRecorder) LogKV(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogKV", reflect.TypeOf((*MockEventLogger)(nil).LogKV), varargs...)
}

// Panic mocks base method
func (m *MockEventLogger) Panic(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic
func (mr *MockEventLoggerMockRecorder) Panic(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockEventLogger)(nil).Panic), arg0...)
}

// Panicf mocks base method
func (m *MockEventLogger) Panicf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf
func (mr *MockEventLoggerMockRecorder) Panicf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockEventLogger)(nil).Panicf), varargs...)
}

// SerializeContext mocks base method
func (m *MockEventLogger) SerializeContext(arg0 context.Context) ([]byte, error) {
	ret := m.ctrl.Call(m, "SerializeContext", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerializeContext indicates an expected call of SerializeContext
func (mr *MockEventLoggerMockRecorder) SerializeContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeContext", reflect.TypeOf((*MockEventLogger)(nil).SerializeContext), arg0)
}

// SetErr mocks base method
func (m *MockEventLogger) SetErr(arg0 context.Context, arg1 error) {
	m.ctrl.Call(m, "SetErr", arg0, arg1)
}

// SetErr indicates an expected call of SetErr
func (mr *MockEventLoggerMockRecorder) SetErr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockEventLogger)(nil).SetErr), arg0, arg1)
}

// SetTag mocks base method
func (m *MockEventLogger) SetTag(arg0 context.Context, arg1 string, arg2 interface{}) {
	m.ctrl.Call(m, "SetTag", arg0, arg1, arg2)
}

// SetTag indicates an expected call of SetTag
func (mr *MockEventLoggerMockRecorder) SetTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTag", reflect.TypeOf((*MockEventLogger)(nil).SetTag), arg0, arg1, arg2)
}

// SetTags mocks base method
func (m *MockEventLogger) SetTags(arg0 context.Context, arg1 map[string]interface{}) {
	m.ctrl.Call(m, "SetTags", arg0, arg1)
}

// SetTags indicates an expected call of SetTags
func (mr *MockEventLoggerMockRecorder) SetTags(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockEventLogger)(nil).SetTags), arg0, arg1)
}

// Start mocks base method
func (m *MockEventLogger) Start(arg0 context.Context, arg1 string) context.Context {
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockEventLoggerMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventLogger)(nil).Start), arg0, arg1)
}

// StartFromParentState mocks base method
func (m *MockEventLogger) StartFromParentState(arg0 context.Context, arg1 string, arg2 []byte) (context.Context, error) {
	ret := m.ctrl.Call(m, "StartFromParentState", arg0, arg1, arg2)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFromParentState indicates an expected call of StartFromParentState
func (mr *MockEventLoggerMockRecorder) StartFromParentState(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromParentState", reflect.TypeOf((*MockEventLogger)(nil).StartFromParentState), arg0, arg1, arg2)
}

// Warning mocks base method
func (m *MockEventLogger) Warning(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning
func (mr *MockEventLoggerMockRecorder) Warning(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockEventLogger)(nil).Warning), arg0...)
}

// Warningf mocks base method
func (m *MockEventLogger) Warningf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf
func (mr *MockEventLoggerMockRecorder) Warningf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockEventLogger)(nil).Warningf), varargs...)
}
