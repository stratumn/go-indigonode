// Code generated by MockGen. DO NOT EDIT.
// Source: gx/ipfs/QmdeiKhUy1TVGBaKxt7y1QmBDLBdisSrLJ1x58Eoj4PXUh/go-libp2p-peerstore (interfaces: Peerstore)

package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	go_multiaddr "gx/ipfs/QmWWQ2Txc2c6tqjsBpzg5Ar652cHPGNsQQp2SejkNmkUMb/go-multiaddr"
	go_libp2p_peer "gx/ipfs/QmcJukH2sAFjY3HdBKq35WDzWoL3UUu2gt9wdfqZTUyM74/go-libp2p-peer"
	go_libp2p_peerstore "gx/ipfs/QmdeiKhUy1TVGBaKxt7y1QmBDLBdisSrLJ1x58Eoj4PXUh/go-libp2p-peerstore"
	go_libp2p_crypto "gx/ipfs/Qme1knMqwt1hKZbc1BmQFmnm9f36nyQGwXxPGVpVJ9rMK5/go-libp2p-crypto"
	reflect "reflect"
	time "time"
)

// MockPeerstore is a mock of Peerstore interface
type MockPeerstore struct {
	ctrl     *gomock.Controller
	recorder *MockPeerstoreMockRecorder
}

// MockPeerstoreMockRecorder is the mock recorder for MockPeerstore
type MockPeerstoreMockRecorder struct {
	mock *MockPeerstore
}

// NewMockPeerstore creates a new mock instance
func NewMockPeerstore(ctrl *gomock.Controller) *MockPeerstore {
	mock := &MockPeerstore{ctrl: ctrl}
	mock.recorder = &MockPeerstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPeerstore) EXPECT() *MockPeerstoreMockRecorder {
	return _m.recorder
}

// AddAddr mocks base method
func (_m *MockPeerstore) AddAddr(_param0 go_libp2p_peer.ID, _param1 go_multiaddr.Multiaddr, _param2 time.Duration) {
	_m.ctrl.Call(_m, "AddAddr", _param0, _param1, _param2)
}

// AddAddr indicates an expected call of AddAddr
func (_mr *MockPeerstoreMockRecorder) AddAddr(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddAddr", reflect.TypeOf((*MockPeerstore)(nil).AddAddr), arg0, arg1, arg2)
}

// AddAddrs mocks base method
func (_m *MockPeerstore) AddAddrs(_param0 go_libp2p_peer.ID, _param1 []go_multiaddr.Multiaddr, _param2 time.Duration) {
	_m.ctrl.Call(_m, "AddAddrs", _param0, _param1, _param2)
}

// AddAddrs indicates an expected call of AddAddrs
func (_mr *MockPeerstoreMockRecorder) AddAddrs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddAddrs", reflect.TypeOf((*MockPeerstore)(nil).AddAddrs), arg0, arg1, arg2)
}

// AddPrivKey mocks base method
func (_m *MockPeerstore) AddPrivKey(_param0 go_libp2p_peer.ID, _param1 go_libp2p_crypto.PrivKey) error {
	ret := _m.ctrl.Call(_m, "AddPrivKey", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPrivKey indicates an expected call of AddPrivKey
func (_mr *MockPeerstoreMockRecorder) AddPrivKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddPrivKey", reflect.TypeOf((*MockPeerstore)(nil).AddPrivKey), arg0, arg1)
}

// AddProtocols mocks base method
func (_m *MockPeerstore) AddProtocols(_param0 go_libp2p_peer.ID, _param1 ...string) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddProtocols", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProtocols indicates an expected call of AddProtocols
func (_mr *MockPeerstoreMockRecorder) AddProtocols(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddProtocols", reflect.TypeOf((*MockPeerstore)(nil).AddProtocols), _s...)
}

// AddPubKey mocks base method
func (_m *MockPeerstore) AddPubKey(_param0 go_libp2p_peer.ID, _param1 go_libp2p_crypto.PubKey) error {
	ret := _m.ctrl.Call(_m, "AddPubKey", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPubKey indicates an expected call of AddPubKey
func (_mr *MockPeerstoreMockRecorder) AddPubKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddPubKey", reflect.TypeOf((*MockPeerstore)(nil).AddPubKey), arg0, arg1)
}

// AddrStream mocks base method
func (_m *MockPeerstore) AddrStream(_param0 context.Context, _param1 go_libp2p_peer.ID) <-chan go_multiaddr.Multiaddr {
	ret := _m.ctrl.Call(_m, "AddrStream", _param0, _param1)
	ret0, _ := ret[0].(<-chan go_multiaddr.Multiaddr)
	return ret0
}

// AddrStream indicates an expected call of AddrStream
func (_mr *MockPeerstoreMockRecorder) AddrStream(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddrStream", reflect.TypeOf((*MockPeerstore)(nil).AddrStream), arg0, arg1)
}

// Addrs mocks base method
func (_m *MockPeerstore) Addrs(_param0 go_libp2p_peer.ID) []go_multiaddr.Multiaddr {
	ret := _m.ctrl.Call(_m, "Addrs", _param0)
	ret0, _ := ret[0].([]go_multiaddr.Multiaddr)
	return ret0
}

// Addrs indicates an expected call of Addrs
func (_mr *MockPeerstoreMockRecorder) Addrs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Addrs", reflect.TypeOf((*MockPeerstore)(nil).Addrs), arg0)
}

// ClearAddrs mocks base method
func (_m *MockPeerstore) ClearAddrs(_param0 go_libp2p_peer.ID) {
	_m.ctrl.Call(_m, "ClearAddrs", _param0)
}

// ClearAddrs indicates an expected call of ClearAddrs
func (_mr *MockPeerstoreMockRecorder) ClearAddrs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClearAddrs", reflect.TypeOf((*MockPeerstore)(nil).ClearAddrs), arg0)
}

// Get mocks base method
func (_m *MockPeerstore) Get(_param0 go_libp2p_peer.ID, _param1 string) (interface{}, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockPeerstoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockPeerstore)(nil).Get), arg0, arg1)
}

// GetProtocols mocks base method
func (_m *MockPeerstore) GetProtocols(_param0 go_libp2p_peer.ID) ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetProtocols", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtocols indicates an expected call of GetProtocols
func (_mr *MockPeerstoreMockRecorder) GetProtocols(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProtocols", reflect.TypeOf((*MockPeerstore)(nil).GetProtocols), arg0)
}

// LatencyEWMA mocks base method
func (_m *MockPeerstore) LatencyEWMA(_param0 go_libp2p_peer.ID) time.Duration {
	ret := _m.ctrl.Call(_m, "LatencyEWMA", _param0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// LatencyEWMA indicates an expected call of LatencyEWMA
func (_mr *MockPeerstoreMockRecorder) LatencyEWMA(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LatencyEWMA", reflect.TypeOf((*MockPeerstore)(nil).LatencyEWMA), arg0)
}

// PeerInfo mocks base method
func (_m *MockPeerstore) PeerInfo(_param0 go_libp2p_peer.ID) go_libp2p_peerstore.PeerInfo {
	ret := _m.ctrl.Call(_m, "PeerInfo", _param0)
	ret0, _ := ret[0].(go_libp2p_peerstore.PeerInfo)
	return ret0
}

// PeerInfo indicates an expected call of PeerInfo
func (_mr *MockPeerstoreMockRecorder) PeerInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PeerInfo", reflect.TypeOf((*MockPeerstore)(nil).PeerInfo), arg0)
}

// Peers mocks base method
func (_m *MockPeerstore) Peers() []go_libp2p_peer.ID {
	ret := _m.ctrl.Call(_m, "Peers")
	ret0, _ := ret[0].([]go_libp2p_peer.ID)
	return ret0
}

// Peers indicates an expected call of Peers
func (_mr *MockPeerstoreMockRecorder) Peers() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Peers", reflect.TypeOf((*MockPeerstore)(nil).Peers))
}

// PrivKey mocks base method
func (_m *MockPeerstore) PrivKey(_param0 go_libp2p_peer.ID) go_libp2p_crypto.PrivKey {
	ret := _m.ctrl.Call(_m, "PrivKey", _param0)
	ret0, _ := ret[0].(go_libp2p_crypto.PrivKey)
	return ret0
}

// PrivKey indicates an expected call of PrivKey
func (_mr *MockPeerstoreMockRecorder) PrivKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PrivKey", reflect.TypeOf((*MockPeerstore)(nil).PrivKey), arg0)
}

// PubKey mocks base method
func (_m *MockPeerstore) PubKey(_param0 go_libp2p_peer.ID) go_libp2p_crypto.PubKey {
	ret := _m.ctrl.Call(_m, "PubKey", _param0)
	ret0, _ := ret[0].(go_libp2p_crypto.PubKey)
	return ret0
}

// PubKey indicates an expected call of PubKey
func (_mr *MockPeerstoreMockRecorder) PubKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PubKey", reflect.TypeOf((*MockPeerstore)(nil).PubKey), arg0)
}

// Put mocks base method
func (_m *MockPeerstore) Put(_param0 go_libp2p_peer.ID, _param1 string, _param2 interface{}) error {
	ret := _m.ctrl.Call(_m, "Put", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockPeerstoreMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockPeerstore)(nil).Put), arg0, arg1, arg2)
}

// RecordLatency mocks base method
func (_m *MockPeerstore) RecordLatency(_param0 go_libp2p_peer.ID, _param1 time.Duration) {
	_m.ctrl.Call(_m, "RecordLatency", _param0, _param1)
}

// RecordLatency indicates an expected call of RecordLatency
func (_mr *MockPeerstoreMockRecorder) RecordLatency(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecordLatency", reflect.TypeOf((*MockPeerstore)(nil).RecordLatency), arg0, arg1)
}

// SetAddr mocks base method
func (_m *MockPeerstore) SetAddr(_param0 go_libp2p_peer.ID, _param1 go_multiaddr.Multiaddr, _param2 time.Duration) {
	_m.ctrl.Call(_m, "SetAddr", _param0, _param1, _param2)
}

// SetAddr indicates an expected call of SetAddr
func (_mr *MockPeerstoreMockRecorder) SetAddr(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetAddr", reflect.TypeOf((*MockPeerstore)(nil).SetAddr), arg0, arg1, arg2)
}

// SetAddrs mocks base method
func (_m *MockPeerstore) SetAddrs(_param0 go_libp2p_peer.ID, _param1 []go_multiaddr.Multiaddr, _param2 time.Duration) {
	_m.ctrl.Call(_m, "SetAddrs", _param0, _param1, _param2)
}

// SetAddrs indicates an expected call of SetAddrs
func (_mr *MockPeerstoreMockRecorder) SetAddrs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetAddrs", reflect.TypeOf((*MockPeerstore)(nil).SetAddrs), arg0, arg1, arg2)
}

// SetProtocols mocks base method
func (_m *MockPeerstore) SetProtocols(_param0 go_libp2p_peer.ID, _param1 ...string) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SetProtocols", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProtocols indicates an expected call of SetProtocols
func (_mr *MockPeerstoreMockRecorder) SetProtocols(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetProtocols", reflect.TypeOf((*MockPeerstore)(nil).SetProtocols), _s...)
}

// SupportsProtocols mocks base method
func (_m *MockPeerstore) SupportsProtocols(_param0 go_libp2p_peer.ID, _param1 ...string) ([]string, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SupportsProtocols", _s...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsProtocols indicates an expected call of SupportsProtocols
func (_mr *MockPeerstoreMockRecorder) SupportsProtocols(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SupportsProtocols", reflect.TypeOf((*MockPeerstore)(nil).SupportsProtocols), _s...)
}

// UpdateAddrs mocks base method
func (_m *MockPeerstore) UpdateAddrs(_param0 go_libp2p_peer.ID, _param1 time.Duration, _param2 time.Duration) {
	_m.ctrl.Call(_m, "UpdateAddrs", _param0, _param1, _param2)
}

// UpdateAddrs indicates an expected call of UpdateAddrs
func (_mr *MockPeerstoreMockRecorder) UpdateAddrs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateAddrs", reflect.TypeOf((*MockPeerstore)(nil).UpdateAddrs), arg0, arg1, arg2)
}
