// Code generated by MockGen. DO NOT EDIT.
// Source: gx/ipfs/QmXoz9o2PT3tEzf7hicegwex5UgVP54n3k82K7jrWFyN86/go-libp2p-net (interfaces: Stream)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	go_libp2p_net "gx/ipfs/QmXoz9o2PT3tEzf7hicegwex5UgVP54n3k82K7jrWFyN86/go-libp2p-net"
	go_libp2p_protocol "gx/ipfs/QmZNkThpqfVXs9GNbexPrfBbXSLNYeKrE7jwFM2oqHbyqN/go-libp2p-protocol"
	reflect "reflect"
	time "time"
)

// MockStream is a mock of Stream interface
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStream) EXPECT() *MockStreamMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockStream) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockStreamMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Conn mocks base method
func (_m *MockStream) Conn() go_libp2p_net.Conn {
	ret := _m.ctrl.Call(_m, "Conn")
	ret0, _ := ret[0].(go_libp2p_net.Conn)
	return ret0
}

// Conn indicates an expected call of Conn
func (_mr *MockStreamMockRecorder) Conn() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Conn", reflect.TypeOf((*MockStream)(nil).Conn))
}

// Protocol mocks base method
func (_m *MockStream) Protocol() go_libp2p_protocol.ID {
	ret := _m.ctrl.Call(_m, "Protocol")
	ret0, _ := ret[0].(go_libp2p_protocol.ID)
	return ret0
}

// Protocol indicates an expected call of Protocol
func (_mr *MockStreamMockRecorder) Protocol() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Protocol", reflect.TypeOf((*MockStream)(nil).Protocol))
}

// Read mocks base method
func (_m *MockStream) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (_mr *MockStreamMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Read", reflect.TypeOf((*MockStream)(nil).Read), arg0)
}

// Reset mocks base method
func (_m *MockStream) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (_mr *MockStreamMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockStream)(nil).Reset))
}

// SetDeadline mocks base method
func (_m *MockStream) SetDeadline(_param0 time.Time) error {
	ret := _m.ctrl.Call(_m, "SetDeadline", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline
func (_mr *MockStreamMockRecorder) SetDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDeadline", reflect.TypeOf((*MockStream)(nil).SetDeadline), arg0)
}

// SetProtocol mocks base method
func (_m *MockStream) SetProtocol(_param0 go_libp2p_protocol.ID) {
	_m.ctrl.Call(_m, "SetProtocol", _param0)
}

// SetProtocol indicates an expected call of SetProtocol
func (_mr *MockStreamMockRecorder) SetProtocol(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetProtocol", reflect.TypeOf((*MockStream)(nil).SetProtocol), arg0)
}

// SetReadDeadline mocks base method
func (_m *MockStream) SetReadDeadline(_param0 time.Time) error {
	ret := _m.ctrl.Call(_m, "SetReadDeadline", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (_mr *MockStreamMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetReadDeadline", reflect.TypeOf((*MockStream)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method
func (_m *MockStream) SetWriteDeadline(_param0 time.Time) error {
	ret := _m.ctrl.Call(_m, "SetWriteDeadline", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline
func (_mr *MockStreamMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockStream)(nil).SetWriteDeadline), arg0)
}

// Write mocks base method
func (_m *MockStream) Write(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (_mr *MockStreamMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockStream)(nil).Write), arg0)
}
