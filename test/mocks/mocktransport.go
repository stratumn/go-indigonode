// Code generated by MockGen. DO NOT EDIT.
// Source: gx/ipfs/QmPUHzTLPZFYqv8WqcBTuMFYTgeom4uHHEaxzk7bd5GYZB/go-libp2p-transport (interfaces: Conn)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	go_libp2p_transport "gx/ipfs/QmPUHzTLPZFYqv8WqcBTuMFYTgeom4uHHEaxzk7bd5GYZB/go-libp2p-transport"
	go_multiaddr "gx/ipfs/QmWWQ2Txc2c6tqjsBpzg5Ar652cHPGNsQQp2SejkNmkUMb/go-multiaddr"
	net "net"
	reflect "reflect"
	time "time"
)

// MockTransportConn is a mock of Conn interface
type MockTransportConn struct {
	ctrl     *gomock.Controller
	recorder *MockTransportConnMockRecorder
}

// MockTransportConnMockRecorder is the mock recorder for MockTransportConn
type MockTransportConnMockRecorder struct {
	mock *MockTransportConn
}

// NewMockTransportConn creates a new mock instance
func NewMockTransportConn(ctrl *gomock.Controller) *MockTransportConn {
	mock := &MockTransportConn{ctrl: ctrl}
	mock.recorder = &MockTransportConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransportConn) EXPECT() *MockTransportConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockTransportConn) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockTransportConnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransportConn)(nil).Close))
}

// LocalAddr mocks base method
func (m *MockTransportConn) LocalAddr() net.Addr {
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr
func (mr *MockTransportConnMockRecorder) LocalAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockTransportConn)(nil).LocalAddr))
}

// LocalMultiaddr mocks base method
func (m *MockTransportConn) LocalMultiaddr() go_multiaddr.Multiaddr {
	ret := m.ctrl.Call(m, "LocalMultiaddr")
	ret0, _ := ret[0].(go_multiaddr.Multiaddr)
	return ret0
}

// LocalMultiaddr indicates an expected call of LocalMultiaddr
func (mr *MockTransportConnMockRecorder) LocalMultiaddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalMultiaddr", reflect.TypeOf((*MockTransportConn)(nil).LocalMultiaddr))
}

// Read mocks base method
func (m *MockTransportConn) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockTransportConnMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransportConn)(nil).Read), arg0)
}

// RemoteAddr mocks base method
func (m *MockTransportConn) RemoteAddr() net.Addr {
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr
func (mr *MockTransportConnMockRecorder) RemoteAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockTransportConn)(nil).RemoteAddr))
}

// RemoteMultiaddr mocks base method
func (m *MockTransportConn) RemoteMultiaddr() go_multiaddr.Multiaddr {
	ret := m.ctrl.Call(m, "RemoteMultiaddr")
	ret0, _ := ret[0].(go_multiaddr.Multiaddr)
	return ret0
}

// RemoteMultiaddr indicates an expected call of RemoteMultiaddr
func (mr *MockTransportConnMockRecorder) RemoteMultiaddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteMultiaddr", reflect.TypeOf((*MockTransportConn)(nil).RemoteMultiaddr))
}

// SetDeadline mocks base method
func (m *MockTransportConn) SetDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline
func (mr *MockTransportConnMockRecorder) SetDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockTransportConn)(nil).SetDeadline), arg0)
}

// SetReadDeadline mocks base method
func (m *MockTransportConn) SetReadDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (mr *MockTransportConnMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockTransportConn)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method
func (m *MockTransportConn) SetWriteDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline
func (mr *MockTransportConnMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockTransportConn)(nil).SetWriteDeadline), arg0)
}

// Transport mocks base method
func (m *MockTransportConn) Transport() go_libp2p_transport.Transport {
	ret := m.ctrl.Call(m, "Transport")
	ret0, _ := ret[0].(go_libp2p_transport.Transport)
	return ret0
}

// Transport indicates an expected call of Transport
func (mr *MockTransportConnMockRecorder) Transport() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transport", reflect.TypeOf((*MockTransportConn)(nil).Transport))
}

// Write mocks base method
func (m *MockTransportConn) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockTransportConnMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTransportConn)(nil).Write), arg0)
}
